{"version":3,"sources":["views/appartaPayCoupons/index.jsx"],"names":["STATUS","id","name","CODE_TYPE","columns","_ref","onEdit","onRemove","dataIndex","key","title","sorter","render","value","concat","numeral","format","moment","_jsx","_Tag","color","children","record","_jsxs","_Row","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","AppartaPayCoupons","appartaPayCouponsService","getService","drawerVisible","setDrawerVisible","useState","selectedCoupon","setSelectedCoupon","updateSource","setUpdateSource","fieldsValue","setFieldsValue","_Layout","Content","style","height","overflow","padding","Grid","source","filterDefaultValues","$sort","rest","_objectWithoutProperties","_excluded","_objectSpread","expire_date","undefined","async","_ref2","remove","then","_message","success","catch","error","message","actions","extra","RoundedButton","AiOutlinePlus","_Drawer","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","err","data","form","utc","patch","create","allowNull","_Input","flex","label","validations","required","_InputNumber","size","formatter","replace","parser","_DatePicker","locale","showTime","_Select","initial","onSelect","_","map","_ref3","index","Option","_ref4"],"mappings":"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","file":"static/js/60.564c9a4e.chunk.js","sourcesContent":["import { Button, DatePicker, Drawer, Input, InputNumber, Layout, message, Row, Select, Tag } from 'antd';\nimport _ from 'lodash';\nimport numeral from 'numeral';\nimport React, { useState } from 'react';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { Grid } from '../../components/com';\nimport { SimpleForm } from '../../components/com/form/';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { getService } from '../../services';\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport moment from 'moment';\n\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\nconst CODE_TYPE = [\n    {\n        id: null,\n        name: \"Ninguno\",\n    },\n    {\n        id: \"pay_benefit\",\n        name: \"Pay Benefit\",\n    },\n];\n\nconst columns = ({ onEdit, onRemove }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"name\",\n        key: \"name\",\n        title: \"Nombre\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"nanoid\",\n        key: \"nanoid\",\n        title: \"C贸digo\",\n    },\n    {\n        dataIndex: \"amount\",\n        key: \"amount\",\n        title: \"Monto\",\n        sorter: true,\n        render: (value) => `$ ${numeral(value || \"\").format(\"0,0\")}`\n    },\n    {\n        dataIndex: \"max_quantity_uses\",\n        key: \"max_quantity_uses\",\n        title: \"Maxima cantidad de usos\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"max_quantity_uses_per_user\",\n        key: \"max_quantity_uses_per_user\",\n        title: \"Maxima cantidad de usos por persona\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"expire_date\",\n        key: \"expire_date\",\n        title: \"Fecha y hora de expiraci贸n\",\n        sorter: true,\n        render: (value) => value ? moment(value).format(\"YYYY-MM-DD h:mm a\") : \"\",\n    },\n    {\n        dataIndex: \"type\",\n        key: \"type\",\n        title: \"Tipo\",\n    },\n    {\n        dataIndex: \"status\",\n        key: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        render: (id, record) => {\n            return (\n                <Row>\n                    <Button\n                        type=\"text\"\n                        onClick={() => onEdit(record)}\n                        icon={<AiOutlineEdit />}\n                    />\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </Row>\n            );\n        },\n    }\n];\n\nconst AppartaPayCoupons = () => {\n\n    const appartaPayCouponsService = getService('pay-cupons-code');\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedCoupon, setSelectedCoupon] = useState();\n    const [updateSource, setUpdateSource] = useState(false);\n    const [fieldsValue, setFieldsValue] = useState();\n\n\n    const onEdit = (record) => {\n        const { type, ...rest } = record;\n        setFieldsValue({ type });\n        setSelectedCoupon({\n            ...rest,\n            expire_date: record?.expire_date ? moment(record.expire_date) : undefined\n        });\n        setDrawerVisible(true);\n    }\n\n    const onRemove = async ({ id }) => {\n        await appartaPayCouponsService.remove(id)\n            .then(() => {\n                message.success(\"Cup贸n eliminado!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el Cup贸n! ' + error?.message)\n            )\n    }\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n\n        data.expire_date = data?.expire_date ? moment(data.expire_date).utc().format('YYYY-MM-DD hh:mm:00') : undefined;\n\n        if (selectedCoupon && selectedCoupon.id) {\n            await appartaPayCouponsService.patch(selectedCoupon.id, data)\n                .then(() => {\n                    message.success(\"Cup贸n actualizado!\");\n                    setSelectedCoupon();\n                    setFieldsValue();\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await appartaPayCouponsService.create(data)\n                .then(() => {\n                    message.success(\"Cup贸n Creado!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                source='pay-cupons-code'\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    }\n                }}\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove })}\n                actions={{}}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedCoupon ? 'Editar' : 'Crear'} Cup贸n`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedCoupon();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedCoupon}\n                        onSubmit={handleSubmit}\n                        allowNull={true}\n                    >\n                        <Input\n                            flex={1}\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <InputNumber\n                            flex={0.4}\n                            size='large'\n                            name='amount'\n                            label='Monto'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Monto es requerido`\n                                }\n                            ]}\n                            formatter={(value) => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            parser={(value) => value.replace(/\\$\\s?|(,*)/g, '')}\n                        />\n                        <DatePicker\n                            flex={0.6}\n                            locale={locale}\n                            showTime\n                            name='expire_date'\n                            label='Fecha y hora expiraci贸n'\n                            format='YYYY-MM-DD h:mm a'\n                        />\n                        <Input\n                            flex={1}\n                            name='nanoid'\n                            label='C贸digo'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `C贸digo es requerido`\n                                }\n                            ]}\n                        />\n                        <InputNumber\n                            flex={0.5}\n                            size='large'\n                            name='max_quantity_uses'\n                            label='Maxima cantidad de usos'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Este campo es requerido`\n                                }\n                            ]}\n                        />\n                        <InputNumber\n                            flex={0.5}\n                            size='large'\n                            name='max_quantity_uses_per_user'\n                            label='Maxima cantidad de usos por persona'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Este camp es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='type'\n                            label=\"Tipo de codigo\"\n                            size='large'\n                            initial={fieldsValue?.type}\n                            onSelect={(value) => setFieldsValue({ ...fieldsValue, type: value })}\n                        >\n                            {\n                                _.map(CODE_TYPE, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        {\n                            fieldsValue?.type === 'pay_benefit' && (\n                                <InputNumber\n                                    flex={1}\n                                    size='large'\n                                    name='pay_benefit_id'\n                                    label='Id beneficio'\n                                    validations={[\n                                        {\n                                            required: fieldsValue?.type === 'pay_benefit',\n                                            message: `Este camp es requerido`\n                                        }\n                                    ]}\n                                />\n                            )\n                        }\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default AppartaPayCoupons;"],"sourceRoot":""}