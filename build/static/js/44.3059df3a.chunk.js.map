{"version":3,"sources":["views/coupons/Coupons.jsx","views/coupons/hooks/useCoupons.js","views/coupons/CouponsBranches.jsx","views/coupons/index.jsx","components/Styles.js","hooks/useCities.js"],"names":["status","id","name","types","discount_applies_to","condition_type","columns","_ref","onEdit","cities","dataIndex","key","title","sorter","render","value","_jsx","_Tag","color","children","concat","numeral","format","_$find","_","find","_ref2","_$find2","_ref3","moment","record","_Button","type","onClick","icon","AiOutlineEdit","Coupons","couponsService","getService","updateSource","setUpdateSource","useState","drawerVisible","setDrawerVisible","selectedCoupon","setSelectedCoupon","selectedCondition","setSelectedCondition","loadingCities","useCities","_jsxs","_Fragment","Grid","source","filterDefaultValues","$sort","_objectSpread","start_date_time","end_date_time","actions","searchField","searchText","search","filters","SelectField","alwaysOn","label","placeholder","allowEmpty","choices","size","style","width","loading","extra","RoundedButton","AiOutlinePlus","_Drawer","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","async","err","data","form","_message","error","utc","undefined","patch","then","success","catch","message","create","_Input","flex","validations","required","_Select","map","_ref4","index","Option","_InputNumber","formatter","replace","parser","_ref5","_ref6","_ref7","_DatePicker","secondStep","showTime","onChange","_ref8","initial","min","TextArea","autoSize","onRemove","coupons","AsyncButton","AiOutlineDelete","confirmText","CouponsBranches","dataCouponsId","setDataCouponsId","dataBranchesId","setDataBranchesId","couponsId","setCoupons","useEffect","query","$limit","$in","$select","useCoupons","remove","returnToParentData","reduce","acc","coupon_id","includes","push","establishment_branch_id","CouponsManager","_Layout","Content","height","overflow","padding","TabsStyled","defaultActiveKey","_Tabs","TabPane","tab","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","Box","_Row","_templateObject4","_templateObject5","citiesService","setCities","setLoadingCities"],"mappings":"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","file":"static/js/44.3059df3a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { message, Button, Tag, Drawer, Input, Select, InputNumber, DatePicker } from 'antd';\nimport { getService } from '../../services';\nimport { Grid } from '../../components/com';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport { useCities } from '../../hooks/useCities';\nimport numeral from 'numeral';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { SimpleForm } from '../../components/com/form/';\nimport SelectField from \"../../components/com/form/SelectField\";\n\nconst status = [\n    {\n        id: \"active\",\n        name: \"Activo\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactivo\",\n    },\n];\nconst types = [\n    {\n        id: \"allBranches\",\n        name: \"allBranches\",\n    },\n    {\n        id: \"specificBranches\",\n        name: \"specificBranches\",\n    },\n];\nconst discount_applies_to = [\n    {\n        id: \"reservation\",\n        name: \"Reserva\",\n    },\n    {\n        id: \"num_persons\",\n        name: \"Cada Persona\",\n    },\n];\nconst condition_type = [\n    {\n        id: \"newUsers\",\n        name: \"newUsers\",\n    },\n    {\n        id: \"allUsers\",\n        name: \"allUsers\",\n    },\n    {\n        id: \"ByConditions\",\n        name: \"ByConditions\",\n    },\n];\n\nconst columns = ({ onEdit, cities }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"name\",\n        key: \"name\",\n        title: \"Nombre\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"code\",\n        key: \"code\",\n        title: \"Código del cupón\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"code\",\n        key: \"code\",\n        title: \"Código del cupón\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"status\",\n        key: \"status\",\n        title: \"Código del cupón\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">{value}</Tag> : <Tag color=\"red\">{value}</Tag>\n    },\n    {\n        dataIndex: \"amount_campaign\",\n        key: \"amount_campaign\",\n        title: \"Campaña monto total\",\n        sorter: true,\n        render: (value) => `$ ${numeral(value || \"\").format(\"0,0\")}`\n    },\n    {\n        dataIndex: \"amount_discount_per_use\",\n        key: \"amount_discount_per_use\",\n        title: \"Valor descuento\",\n        sorter: true,\n        render: (value) => `$ ${numeral(value || \"\").format(\"0,0\")}`\n    },\n    {\n        dataIndex: \"use_type\",\n        key: \"use_type\",\n        title: \"Aplicar descuento a\",\n        sorter: true,\n        render: (value) => _.find(discount_applies_to, ({ id }) => id === value)?.name || value\n    },\n    {\n        dataIndex: \"type\",\n        key: \"type\",\n        title: \"Aplica para\",\n        sorter: true\n    },\n    {\n        dataIndex: \"city_id\",\n        key: \"city_id\",\n        title: \"Ciudad\",\n        render: (value) => _.find(cities, ({ id }) => value === id)?.name || ''\n    },\n    {\n        dataIndex: \"start_date_time\",\n        key: \"start_date_time\",\n        title: \"Fecha inicio\",\n        sorter: true,\n        render: (value) => moment(value).format('YYYY-MM-DD HH:mm')\n    },\n    {\n        dataIndex: \"end_date_time\",\n        key: \"end_date_time\",\n        title: \"Fecha fin\",\n        sorter: true,\n        render: (value) => moment(value).format('YYYY-MM-DD HH:mm')\n    },\n    {\n        dataIndex: \"claims_by_user\",\n        key: \"claims_by_user\",\n        title: \"Usos por usuario\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"condition_type\",\n        key: \"condition_type\",\n        title: \"Tipo de condición\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"condition_user_no_reservation_days\",\n        key: \"condition_user_no_reservation_days\",\n        title: \"Condición: Usuarios sin reservas en x días\",\n        sorter: true,\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <Button\n                type=\"text\"\n                onClick={() => onEdit(record)}\n                icon={<AiOutlineEdit />}\n            />\n    }\n]\n\nconst Coupons = () => {\n\n    const couponsService = getService('coupons');\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedCoupon, setSelectedCoupon] = useState();\n    const [selectedCondition, setSelectedCondition] = useState();\n\n    const [cities, loadingCities] = useCities();\n\n    const onEdit = (record) => {\n        setSelectedCoupon({\n            ...record,\n            start_date_time: moment(record.start_date_time),\n            end_date_time: moment(record.end_date_time)\n        });\n        setSelectedCondition(record?.condition_type);\n        setDrawerVisible(true);\n    };\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n\n        data.start_date_time = data.start_date_time ? moment(data.start_date_time).utc().format() : undefined;\n        data.end_date_time = data.end_date_time ? moment(data.end_date_time).utc().format() : undefined;\n\n        if (selectedCoupon && selectedCoupon.id) {\n            await couponsService.patch(selectedCoupon.id, data)\n                .then(() => {\n                    message.success(\"Cupón actualizado!\");\n                    setSelectedCoupon();\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await couponsService.create(data)\n                .then(() => {\n                    message.success(\"Cupón creado correctamente!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <>\n            <Grid\n                source='coupons'\n                filterDefaultValues={{\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                updateSource={updateSource}\n                columns={columns({ onEdit, cities })}\n                actions={{}}\n                searchField=\"q\"\n                searchText=\"Nombre\"\n                search={true}\n                filters={\n                    <>\n                        <SelectField\n                            alwaysOn\n                            source=\"status\"\n                            name=\"status\"\n                            label=\"Estado\"\n                            placeholder=\"Estado\"\n                            allowEmpty\n                            choices={status}\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                        <SelectField\n                            alwaysOn\n                            source=\"city_id\"\n                            name=\"city_id\"\n                            label=\"Ciudad\"\n                            placeholder=\"Ciudad\"\n                            allowEmpty\n                            choices={cities}\n                            size=\"medium\"\n                            loading={loadingCities}\n                            style={{ width: '15rem' }}\n                        />\n                        <SelectField\n                            alwaysOn\n                            source=\"condition_type\"\n                            name=\"condition_type\"\n                            label=\"Tipo de condición\"\n                            placeholder=\"Tipo de condición\"\n                            allowEmpty\n                            choices={condition_type}\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                    </>\n                }\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    width={520}\n                    title={`${selectedCoupon ? 'Editar' : 'Crear'} cupón`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedCoupon();\n                        setSelectedCondition();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedCoupon}\n                        onSubmit={handleSubmit}\n                    >\n                        <Input\n                            flex={1}\n                            name=\"name\"\n                            label=\"Nombre\"\n                            size='large'\n                            validations={[{ required: true, message: \"Nombre es requerido\" }]}\n                        />\n                        <Input\n                            flex={1}\n                            name=\"code\"\n                            label=\"Código del cupón\"\n                            size='large'\n                            validations={[{ required: true, message: \"Código es requerido\" }]}\n                        />\n                        <Select\n                            flex={0.5}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(status, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <InputNumber\n                            flex={0.5}\n                            name=\"amount_campaign\"\n                            label=\"Monto Total\"\n                            size='large'\n                            formatter={(value) => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            parser={(value) => value.replace(/\\$\\s?|(,*)/g, '')}\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                        <InputNumber\n                            flex={0.5}\n                            name=\"amount_discount_per_use\"\n                            label=\"Valor Descuento\"\n                            size='large'\n                            formatter={(value) => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            parser={(value) => value.replace(/\\$\\s?|(,*)/g, '')}\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                        <Select\n                            flex={0.5}\n                            name='use_type'\n                            label=\"Aplicar descuento a:\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Este campo es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(discount_applies_to, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Select\n                            flex={1}\n                            name='type'\n                            label=\"Aplica para\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Este campo es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(types, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Select\n                            flex={1}\n                            name='city_id'\n                            label=\"Ciudad\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Ciudad es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(cities, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <DatePicker\n                            flex={0.5}\n                            size='large'\n                            name=\"start_date_time\"\n                            label=\"Fecha Inicio\"\n                            format='YYYY-MM-DD HH:mm:ss'\n                            secondStep={60}\n                            showTime\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                        <DatePicker\n                            flex={0.5}\n                            size='large'\n                            name=\"end_date_time\"\n                            label=\"Fecha Fin\"\n                            format='YYYY-MM-DD HH:mm:ss'\n                            secondStep={60}\n                            showTime\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                        <InputNumber\n                            flex={0.5}\n                            size='large'\n                            name=\"claims_by_user\"\n                            label=\"Usos por usuario\"\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                        <Select\n                            flex={0.5}\n                            name='condition_type'\n                            label=\"Tipo de Condición\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Este campo es requerido',\n                                },\n                            ]}\n                            onChange={(value) => setSelectedCondition(value)}\n                        >\n                            {\n                                _.map(condition_type, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <InputNumber\n                            flex={0.5}\n                            initial={0}\n                            min={0}\n                            size='large'\n                            name=\"condition_user_no_reservation_days\"\n                            label=\"Condición: Usuarios sin reservas  x dias\"\n                            validations={[{ required: selectedCondition === 'ByConditions', message: \"Este campo es requerido\" }]}\n                        />\n                        <Input.TextArea\n                            flex={1}\n                            name='condition_terms'\n                            label='Términos'\n                            autoSize\n                            validations={[{ required: true, message: \"Este campo es requerido\" }]}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    );\n}\n\nexport default Coupons;","import { useState, useEffect } from 'react';\nimport { getService } from '../../../services';\n\nexport const useCoupons = (couponsId) => {\n\n    const couponsService = getService('coupons');\n\n    const [coupons, setCoupons] = useState([]);\n\n    useEffect(() => {\n        if (couponsId)\n            couponsService.find({\n                query: {\n                    $limit: 100,\n                    id: {\n                        $in: couponsId\n                    },\n                    $select: ['name', 'id']\n                }\n            }).then(({ data }) => {\n                setCoupons(data)\n            })\n\n    }, [couponsId])\n\n    return [\n        coupons\n    ];\n}","import React, { useState } from 'react';\nimport { message, Button, Drawer, InputNumber } from 'antd';\nimport { Grid } from '../../components/com';\nimport { getService } from '../../services';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { SimpleForm } from '../../components/com/form/';\nimport _ from 'lodash';\nimport { useCoupons } from './hooks/useCoupons';\nimport { useBranches } from './hooks/useBranches';\n\nconst columns = ({ onEdit, onRemove, coupons }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"coupon_id\",\n        key: \"coupon_id\",\n        title: \"Cupón Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"establishment_branch_id\",\n        key: \"establishment_branch_id\",\n        title: \"Sucursal Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"coupon_id\",\n        key: \"coupon_id_name\",\n        title: \"Cupón\",\n        sorter: true,\n        render: (value) => _.find(coupons, ({ id }) => id === value)?.name || value\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n]\n\nconst CouponsBranches = () => {\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedCoupon, setSelectedCoupon] = useState();\n    const [dataCouponsId, setDataCouponsId] = useState([]);\n    const [dataBranchesId, setDataBranchesId] = useState([]);\n\n    const [coupons] = useCoupons(dataCouponsId);\n\n\n    const onEdit = (record) => {\n        setSelectedCoupon(record);\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        const couponsService = getService('coupons-establishment-branch');\n        await couponsService.remove(id)\n            .then(() => {\n                message.success(\"Cupón eliminado de la sucursal!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el cupón! ' + error?.message)\n            )\n    };\n\n    return (\n        <>\n            <Grid\n                source='coupons-establishment-branch'\n                filterDefaultValues={{\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove, coupons })}\n                actions={{}}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n                returnToParentData={(data) => {\n                    setDataCouponsId(data.reduce((acc, { coupon_id }) => {\n                        if (!acc.includes(coupon_id)) {\n                            acc.push(coupon_id);\n                        }\n                        return acc;\n                    }, []))\n                    setDataBranchesId(data.reduce((acc, { establishment_branch_id }) => {\n                        if (!acc.includes(establishment_branch_id)) {\n                            acc.push(establishment_branch_id);\n                        }\n                        return acc;\n                    }, []))\n                }}\n                filters={\n                    <>\n                        <InputNumber\n                            alwaysOn\n                            source=\"coupon_id\"\n                            name=\"coupon_id\"\n                            placeholder=\"Cupón  Id\"\n                            size=\"medium\"\n                            allowEmpty\n                            style={{ width: '15rem' }}\n                        />\n                        <InputNumber\n                            alwaysOn\n                            source=\"establishment_branch_id\"\n                            name=\"establishment_branch_id\"\n                            placeholder=\"Sucursal  Id\"\n                            size=\"medium\"\n                            allowEmpty\n                            style={{ width: '15rem' }}\n                        />\n                    </>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedCoupon ? 'Editar' : 'Añadir'} cupón a la sucursal`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedCoupon();\n                    }}\n                >\n                    <SimpleForm\n                        source='coupons-establishment-branch'\n                        id={selectedCoupon?.id}\n                        textAcceptButton={`${selectedCoupon ? 'Actualizar' : 'Añadir'}`}\n                        initialValues={selectedCoupon}\n                        onSubmit={() => {\n                            setDrawerVisible(false);\n                            setUpdateSource(!updateSource);\n                            setSelectedCoupon();\n                        }}\n                    >\n                        <InputNumber\n                            flex={1}\n                            name=\"coupon_id\"\n                            label=\"Cupón Id\"\n                            size='large'\n                            validations={[{ required: true, message: \"Cupón Id es requerido\" }]}\n                        />\n                        <InputNumber\n                            flex={1}\n                            name=\"establishment_branch_id\"\n                            label=\"Sucursal Id\"\n                            size='large'\n                            validations={[{ required: true, message: \"Sucursal Id es requerida\" }]}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    );\n}\n\nexport default CouponsBranches;","import React from 'react';\nimport { Layout, Tabs } from 'antd';\nimport { TabsStyled } from '../../components/Styles';\nimport Coupons from './Coupons';\nimport CouponsBranches from './CouponsBranches';\n\nconst CouponsManager = () => {\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <TabsStyled defaultActiveKey=\"1\">\n                <Tabs.TabPane tab=\"Cupones\" key=\"1\">\n                    <Coupons />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Cupones para sucursales\" key=\"2\">\n                    <CouponsBranches />\n                </Tabs.TabPane>\n            </TabsStyled>\n        </Layout.Content>\n    )\n}\n\nexport default CouponsManager;","import { Row, Tabs } from 'antd';\nimport styled from 'styled-components';\n\nexport const HeadLine = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: baseline;\n  flex-wrap: wrap;\n\n  width:100%!important;\n\n  background-color:var(--gray-dark-1)!important;\n  color:#fff!important;\n\n  & .ant-checkbox-wrapper{\n    margin:0px 10px;\n  }\n  & h2{\n    color: #fff!important;\n    text-transform: uppercase!important;\n    padding: 4px 10px!important;\n    font-size: 16px!important;\n    vertical-align: middle!important;\n    margin-bottom: 0px!important;\n  }\n`;\nexport const AvatarWrapper = styled.div`\n\n    position:relative;\n   \n    display: flex;\n    justify-content: start;\n    align-items: center;\n\n    & .container{\n      width: 34px;\n      position:relative;\n    }\n    & .container:hover .ant-btn{\n      display:inline-block;\n    }\n    & .ant-btn,.ant-btn:hover{\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 999;\n      height: 34px!important;\n      display: none;\n      width: 34px!important;\n      background: #0010214f!important;\n      color: #FFF!important;\n      font-weight: bold;\n      display:none;\n    }\n`;\n\nexport const Tools = styled.div`\n    display:flex;\n    justify-content: space-between;\n`;\nexport const Box = styled(Row)`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n  border-radius:1rem;\n  background: #fff ;\n  padding: 2rem;\n`;\nexport const TabsStyled = styled(Tabs)`\n    & .ant-tabs-nav{\n        background-color:white;\n        border-radius:1rem;\n        box-shadow: rgb(0 0 0 / 10%) 0px 4px 12px;\n        padding:0 1rem;\n    }\n`;\n","import { useEffect, useState } from 'react';\nimport { message } from 'antd';\nimport { getService } from '../services';\n\nexport const useCities = () => {\n    const citiesService = getService(\"cities\");\n\n    const [cities, setCities] = useState([]);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    useEffect(() => {\n        setLoadingCities(true);\n        citiesService\n            .find({\n                query: {\n                    $limit: 100000,\n                    $sort: {\n                        name: 1,\n                    },\n                }\n            })\n            .then(({ data }) => {\n                setCities(data);\n                setLoadingCities(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n                setCities([]);\n                setLoadingCities(false);\n            });\n    }, []);\n\n\n    return [\n        cities,\n        loadingCities\n    ];\n}"],"sourceRoot":""}