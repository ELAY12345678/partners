{"version":3,"sources":["views/users/Users.js"],"names":["RoundedButton","styled","_Button","_templateObject","_taggedTemplateLiteral","WrapperStatusField","div","_templateObject2","roles","id","name","status","genders","StatusField","_ref","source","choices","optionText","optionValue","props","_objectWithoutProperties","_excluded","record","setRecord","useState","value","setValue","useEffect","find","it","_jsx","className","concat","children","columns","title","dataIndex","sorter","render","_Tag","color","UserGrid","_ref2","filters","_excluded2","navigate","useNavigate","handleAdd","loading","Grid","_objectSpread","custom","filterDefaultValues","$skip","permitFetch","create","searchField","searchText","search","searchById","extra","icon","AiOutlinePlus","type","onClick","actions","edit","AiOutlineEdit","connect","state","updated","dispatch","onUpdate","actionTypes","_ref3","_excluded3","useDispatch","brand_id","setBrandId","restaurant_id","setRestaurantId","filter","setFilter","setLoading","role","setRole","query","location","qs","parse","replace","defaultFilters","key","_Layout","Content","style","height","overflow","padding","_Avatar","size","alt","src","S3_PATH_IMAGE_HANDLER","window","imageShark","url","DEFAULT_USER_AVATAR","width","_ref4","last_name","initial","_jsxs","_Fragment","SelectField","alwaysOn","label","placeholder","allowEmpty"],"mappings":"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","file":"static/js/74.0a488a1c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\n/* Redux */\nimport { connect, useDispatch } from \"react-redux\";\nimport * as actionTypes from \"../../redux/app/actions\";\n/* Components */\nimport { Grid } from \"../../components/com\";\nimport { Button, Empty, Avatar, Layout, Tag } from \"antd\";\n\nimport qs from \"qs\";\nimport SelectField from \"../../components/com/form/SelectField\";\n\nimport { AiOutlinePlus, AiOutlineEdit } from 'react-icons/ai';\n\nimport { URL_S3, DEFAULT_USER_AVATAR, S3_PATH_IMAGE_HANDLER } from '../../constants'\n\nconst RoundedButton = styled(Button)`\n  border-radius: 20px !important;\n`;\nexport const WrapperStatusField = styled.div`\n  &.status-field.inactive span {\n    color: red;\n  }\n`;\nconst roles = [\n  {\n    id: \"admin\",\n    name: \"Administrador\",\n  },\n  {\n    id: \"user\",\n    name: \"Usuario\",\n  },\n];\nconst status = [\n  {\n    id: \"active\",\n    name: \"Activo\",\n  },\n  {\n    id: \"disabled\",\n    name: \"Desactivado\",\n  },\n  {\n    id: \"pending validation\",\n    name: \"Pendiente de validación\",\n  },\n  {\n    id: \"pending_information\",\n    name: \"Pendiente por información\",\n  },\n];\nconst genders = [\n  {\n    id: \"male\",\n    name: \"Masculino\",\n  },\n  {\n    id: \"female\",\n    name: \"Femenino\",\n  },\n  {\n    id: \"not_defined\",\n    name: \"No definido\",\n  },\n];\nconst StatusField = ({\n  source,\n  choices,\n  optionText = \"name\",\n  optionValue = \"id\",\n  ...props\n}) => {\n  const [record, setRecord] = useState();\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (props.record) setRecord(props.record);\n  }, [props.record]);\n  useEffect(() => {\n    if (record) {\n      let value = choices.find((it) => it[optionValue] === record[source]);\n      if (value) setValue(value[optionText]);\n    }\n  }, [choices, optionText, optionValue, record, source]);\n  if (!record) return <span></span>;\n  return (\n    <WrapperStatusField className={`status-field ${record && record[source]}`}>\n      <span>{value}</span>\n    </WrapperStatusField>\n  );\n};\nconst columns = [\n  {\n    title: \"Código País\",\n    dataIndex: \"phone_country_code\",\n    sorter: true,\n  },\n  {\n    title: \"Teléfono\",\n    dataIndex: \"phone\",\n    sorter: true,\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n    sorter: true,\n  },\n  {\n    title: \"Disabled Reason\",\n    dataIndex: \"disabled_reason\",\n    sorter: true,\n  },\n  {\n    title: \"Estado\",\n    sorter: true,\n    dataIndex: \"status\",\n    render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color={value === 'disabled' ? 'red' : 'orange'}>{value}</Tag>\n  },\n];\n\nconst UserGrid = ({ columns, filters, ...props }) => {\n  const navigate = useNavigate();\n\n  const handleAdd = (id) => {\n    navigate(\n      `/dashboard/management/users/${id ? id : \"create\"}`\n    );\n  };\n\n  if (props.loading) return null;\n\n  return (\n    <Grid\n      custom={true}\n      filterDefaultValues={{\n        $skip: 50\n      }}\n      permitFetch={true}\n      create={false}\n      searchField=\"q\"\n      searchText=\"Usuario...\"\n      search={true}\n      searchById={true}\n      columns={columns}\n      filters={filters}\n      extra={\n        <div>\n          <RoundedButton\n            icon={<AiOutlinePlus />}\n            type={\"primary\"}\n            onClick={() => handleAdd()}\n          >\n            Agregar\n          </RoundedButton>\n        </div>\n      }\n      actions={{\n        edit: false,\n        create: false,\n        extra: (\n          <div>\n            <Button\n              icon={<AiOutlineEdit />}\n              type={\"link\"}\n              onClick={(record) => handleAdd(record.id)}\n            />\n          </div>\n        ),\n      }}\n      source={\"users\"}\n      {...props}\n    />\n  );\n};\n\nconst Users = ({ updated, onUpdate, ...props }) => {\n  const dispatch = useDispatch();\n  const [brand_id, setBrandId] = useState();\n  const [restaurant_id, setRestaurantId] = useState();\n  const [filter, setFilter] = useState();\n  const [loading, setLoading] = useState(props.loading);\n  const [role, setRole] = useState();\n\n  useEffect(() => {\n    let query;\n    if (props.location) {\n      let { search } = props.location;\n      query = qs.parse(search.replace(/\\?/, \"\"));\n      if (query) {\n        if (role != query[\"role\"]) {\n          setLoading(true);\n          setRole(query.role);\n        }\n      }\n    }\n  }, [props.location]);\n\n  useEffect(() => {\n    if (filter) {\n      setBrandId(filter.brand_id);\n      setRestaurantId(filter.restaurant_id);\n    }\n  }, [filter]);\n\n  useEffect(() => {\n    if (role) {\n      setLoading(false);\n      dispatch({\n        type: actionTypes.CHANGE_FILTERS,\n        defaultFilters: {\n          restaurant_id: role === \"user\",\n          brand_id: role === \"user\",\n        },\n      });\n    }\n  }, [role]);\n\n  useEffect(() => {\n    if (props.location) {\n      let query = qs.parse(props.location.search.replace(/\\?/, \"\"));\n      if (query) {\n        for (let key in query) {\n          if (\n            typeof query[key] === \"undefined\" ||\n            query[key] === \"\" ||\n            query[key] === null\n          ) {\n            delete query[key];\n          }\n        }\n        setFilter(query);\n      }\n    }\n  }, [props.location]);\n\n  useEffect(() => {\n    if (filter) {\n      let { brand_id, restaurant_id } = filter;\n      setBrandId(brand_id);\n      setRestaurantId(restaurant_id);\n    }\n  }, [filter]);\n\n  return (\n    <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n      <UserGrid\n        {...props}\n        columns={[\n          {\n            title: \"ID\",\n            dataIndex: \"id\",\n            sorter: true,\n          },\n          {\n            title: \"Foto\",\n            dataIndex: \"avatar_path\",\n            sorter: false,\n            render: (value) =>\n              <Avatar\n                size=\"large\"\n                alt={'Avatar'}\n                src={`${S3_PATH_IMAGE_HANDLER}/${window.imageShark({\n                  url: value || DEFAULT_USER_AVATAR,\n                  width: 64,\n                  height: 64,\n                })}`}\n              />\n          },\n          {\n            title: \"Nombre\",\n            dataIndex: \"first_name\",\n            sorter: true,\n            render: (value, { last_name }) =>\n              `${value || \"\"} ${last_name || \"\"}`,\n          },\n          {\n            title: \"Genero\",\n            dataIndex: \"gender\",\n            sorter: true,\n            render: (value, record) => (\n              <StatusField\n                initial={value}\n                className={`status-field ${record && record[value]}`}\n                record={record}\n                source=\"gender\"\n                choices={genders}\n              />\n            ),\n          },\n          {\n            title: \"Role\",\n            dataIndex: \"role\",\n            sorter: true,\n            render: (value, record) => (\n              <StatusField\n                initial={value}\n                className={`status-field ${record && record[value]}`}\n                record={record}\n                source=\"role\"\n                choices={roles}\n              />\n            ),\n          },\n          ...columns,\n        ]}\n        loading={loading}\n        // filterDefaultValues={\n        //   role === \"user\"\n        //     ? brand_id &&\n        //     restaurant_id && {\n        //       role: { $ne: \"admin\" },\n        //       restaurant_id,\n        //       brand_id,\n        //     }\n        //     : undefined\n        // }\n        filters={\n          <>\n            <SelectField\n              alwaysOn\n              source=\"status\"\n              name=\"status\"\n              label=\"Estado\"\n              placeholder=\"Estado\"\n              allowEmpty\n              choices={status}\n              size=\"medium\"\n            />\n            <SelectField\n              alwaysOn\n              source=\"role\"\n              name=\"role\"\n              label=\"Role\"\n              placeholder=\"Role\"\n              allowEmpty\n              choices={roles}\n              size=\"medium\"\n            />\n          </>\n        }\n      />\n    </Layout.Content>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    updated: state.updated,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUpdate: (updated) => {\n      dispatch({ type: actionTypes.UPDATE_LIST, updated });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n"],"sourceRoot":""}