{"version":3,"sources":["views/reports-zones/Styles.js","components/map/Styles.js","components/map/Map.js","views/reports-zones/index.jsx","hooks/useCities.js"],"names":["WrapperList","styled","div","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","_ref","height","_ref2","size","_templateObject3","count","Map","onMapChange","onSelect","source","reference","refresh","props","_objectWithoutProperties","_excluded","infoWindowVisible","setInfoWindowVisible","useState","record","setRecord","polygons","setPolygons","dataSource","setDataSource","initialized","setInitialized","loading","setLoading","selected","setSelected","polygon","setPolygon","filterDefaultValues","setFilterDefaultValues","center","setCenter","lat","lng","dragging","setDragging","save","async","item","onChangePolygon","_","debounce","maxWait","path","setPath","polygonRef","useRef","listenersRef","onUnmount","useCallback","e","current","find","it","id","nextPath","getPath","getArray","map","latLng","useEffect","isEqual","getService","query","_objectSpread","$limit","then","data","JSON","parse","catch","err","_message","error","message","getBounds","bounds","window","google","maps","LatLngBounds","forEach","element","index","extend","getCenter","_jsx","className","children","LoadScript","googleMapsApiKey","language","region","_jsxs","GoogleMap","mapContainerClassName","zoom","version","on","InfoWindow","position","positionInfo","open","onCloseClick","style","backgroundColor","padding","fontSize","fontColor","name","geometry","spherical","computeArea","Polygon","editable","options","strokeColor","color","fillColor","strokeOpacity","strokeWeight","fillOpacity","draggable","onMouseDown","interval","setTimeout","clearTimeout","onMouseUp","onDragEnd","onClick","onLoad","push","length","MenuItems","onChange","actions","edit","delete","_Menu","key","items","label","icon","AiOutlineEdit","AiOutlineDelete","ListPolygons","_ref3","onSubmit","onItemSelect","cities_id","cities","buttonText","title","_excluded2","visible","setVisible","handleChange","remove","res","success","getData","service","$sort","_ref4","restaurant_id","pointA","LatLng","pointB","computeOffset","newAngle","computeHeading","pointC","_List","header","_Button","handleAdd","type","block","AiOutlinePlus","renderItem","Item","_Dropdown","trigger","overlay","AiOutlineMore","concat","handleSelect","background","price","money","MyModal","width","onCancel","SimpleForm","handleOnSubmit","$select","allowNull","_Input","flex","placeholder","validations","required","_Select","allowClear","Option","value","initial","Number","ColorField","ReportZones","_ref5","_excluded3","cityId","setCityId","citySelected","setCitySelected","setItem","setRefresh","render","setRender","loadingCities","useCities","filter","_Layout","Content","overflow","_Row","_Col","span","boxShadow","borderRadius","_ref6","city_id","parseFloat","handleOnChange","differenceBy","patch","item_id","citiesService","setCities","setLoadingCities"],"mappings":"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","file":"static/js/52.01e1d16e.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const WrapperList = styled.div`\n  & .head-tools {\n    background: var(--white) !important;\n    margin: 0px 8px !important;\n  }\n  & .item {\n    padding-left: 4px;\n    border-left: 3px solid transparent !important;\n  }\n  & .item.selected {\n    border-left: 3px solid var(--color-primary) !important;\n  }\n  & .item-container {\n  }\n  & .item-color,\n  .item-container {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  }\n  & .item-container > * {\n    margin: 0px 4px;\n  }\n  & .item-price {\n  }\n  & .color {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    padding: 4px;\n    margin: 0px 4px;\n  }\n  & .name {\n    text-transform: capitalize;\n    font-size: 16px;\n    font-weight: bold;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const WraperMarker = styled.div`\n  padding: 0px !important;\n  & .sections-name-properties {\n    font-size: 12px;\n  }\n  & .ant-card-meta-title {\n    font-size: 11px;\n  }\n  & .container-neighborhood > span {\n    font-size: 12px;\n  }\n  & .price {\n    font-size: 11px;\n  }\n  & .ant-avatar-lg {\n    width: 17px !important;\n    height: 17px !important;\n  }\n  & .sections-description {\n    min-width: 88px;\n  }\n  & .description {\n    font-size: 13px;\n  }\n  & .sections-description-rooms {\n    min-width: 86px;\n    margin-left: 6px;\n  }\n  & .section-color-tag span {\n    font-size: 8px;\n    text-transform: uppercase;\n    font-weight: bold;\n  }\n  & .ant-card {\n    width: 210px;\n    margin: 0px !important;\n  }\n  & .ant-card-cover {\n    height: 137px !important;\n  }\n  & .ant-card-body {\n    padding: 6px 12px 9px 12px !important;\n    overflow: hidden;\n  }\n  & .ant-card .cover img {\n    height: 138px;\n  }\n  & .tools {\n    top: 94px !important;\n  }\n`;\nexport const Wrapper = styled.div`\n   padding:0px!important;\n     height:${({ height }) => height || '100px'}!important;\n    height:${({ size }) => {\n    switch (size) {\n      case \"large\":\n        return \"100vh!important;\";\n        break;\n      case \"medium\":\n        return \"600px!important;\";\n        break;\n      case \"small\":\n        return \"400px!important;\";\n        break;\n      case \"tiny\":\n        return \"200px!important;\";\n        break;\n      default:\n        return \"100%!important;\";\n        break;\n    }\n  }}\n    & .app-map{\n        height:100% ;\n    }\n    \n`;\nexport const Mark = styled.div`\n  background-color: #e74c3c;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  border: 4px solid #eaa29b;\n`;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { LoadScript, GoogleMap, Polygon, InfoWindow } from \"@react-google-maps/api\";\nimport { Wrapper } from \"./Styles\";\nimport { getService } from \"../../services\";\nimport { message } from \"antd\";\nimport _ from \"lodash\";\n\nlet count = 0;\n\nconst Map = ({\n  onMapChange,\n  onSelect,\n  source = \"polygon\",\n  reference,\n  refresh,\n  ...props\n}) => {\n\n  const [infoWindowVisible, setInfoWindowVisible] = useState();\n\n  const [record, setRecord] = useState();\n  const [polygons, setPolygons] = useState([]);\n  const [dataSource, setDataSource] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [selected, setSelected] = useState();\n  const [polygon, setPolygon] = useState();\n  const [filterDefaultValues, setFilterDefaultValues] = useState();\n  const [center, setCenter] = useState({\n    lat: 52.52047739093263,\n    lng: 13.36653284549709,\n  });\n  const [dragging, setDragging] = useState(false);\n\n  const save = async (polygon, item) => {\n    if (onMapChange && item) {\n      await onMapChange(polygon, item);\n    }\n  };\n\n  const onChangePolygon = _.debounce(save, 800, { maxWait: 1000 });\n  // Store Polygon path in state\n  const [path, setPath] =\n    useState(/* [\n        { lat: 52.52549080781086, lng: 13.398118538856465 },\n        { lat: 52.48578559055679, lng: 13.36653284549709 },\n        { lat: 52.48871246221608, lng: 13.44618372440334 }\n    ] */);\n  // Define refs for Polygon instance and listeners\n  const polygonRef = useRef(null);\n  const listenersRef = useRef([]);\n\n\n  const handleSave = _.debounce(save, 800, { maxWait: 800 });\n  // Call setPath with new edited path\n  const onEdit = useCallback(\n    (e, record) => {\n      let item = listenersRef.current.find((it) => it.id == record.id);\n      if (item && item.polygon) {\n        let { polygon } = item;\n        const nextPath = polygon\n          .getPath()\n          .getArray()\n          .map((latLng) => {\n            return { lat: latLng.lat(), lng: latLng.lng() };\n          });\n        setPath(nextPath);\n      }\n      setSelected(record);\n      /* if (polygonRef.current) {\n            const nextPath = polygonRef.current\n                .getPath()\n                .getArray()\n                .map(latLng => {\n                    return { lat: latLng.lat(), lng: latLng.lng() };\n                });\n            setPath(nextPath);\n        } */\n      onChangePolygon(e, record);\n      // console.log(\"--> \", e, record);\n    },\n    [setPath]\n  );\n  // Bind refs to current Polygon and listeners\n  const onLoad = (polygon, record) => {\n    // console.log(\"Polygon loaded: \", polygon, record);\n    if (record) {\n      if (\n        typeof listenersRef.current.find((it) => record.id == it.id) ==\n        \"undefined\"\n      ) {\n        record[\"polygon\"] = polygon;\n        // console.log(\"polygon: \", polygon);\n        listenersRef.current.push(record);\n        /* polygonRef.current = polygon; */\n      }\n      setInitialized(listenersRef.current.length >= dataSource.length);\n    }\n    /*\n         polygonRef.current = polygon;\n         console.log(\"Path:: \", path)\n         listenersRef.current.push(\n             path.addListener(\"set_at\", onEdit),\n             path.addListener(\"insert_at\", onEdit),\n             path.addListener(\"remove_at\", onEdit)\n         );\n         const path = polygon.getPath();\n         polygon\n         .push(\n             path.addListener(\"set_at\", onEdit),\n             path.addListener(\"insert_at\", onEdit),\n             path.addListener(\"remove_at\", onEdit)\n             );\n             */\n  };\n  // Clean up refs\n  const onUnmount = useCallback(() => {\n    /* listenersRef.current.forEach(it => it.polygon.remove()); */\n    polygonRef.current = null;\n  }, []);\n\n  const getData = () => {\n    if (reference) {\n      setLoading(true);\n      const service = getService(reference);\n      service\n        .find({\n          query: {\n            ...filterDefaultValues,\n            $limit: 50,\n          },\n        })\n        .then(({ data }) => {\n          setLoading(false);\n          setDataSource(\n            data.map((it) => ({\n              path: JSON.parse(it.polygon),\n              ...it,\n            }))\n          );\n        })\n        .catch((err) => {\n          setLoading(false);\n          message.error(err.message);\n        });\n    }\n  };\n\n  const handleEdit = async (e, record) => {\n    if (record) {\n      setSelected(record);\n      /*  onEdit(e, record); */\n    }\n  };\n\n  useEffect(() => {\n    if (!_.isEqual(props.polygon, polygon)) setPath(props.polygon);\n  }, [props.polygon]);\n\n  useEffect(() => {\n    if (!_.isEqual(props.record, record)) setRecord(props.record);\n  }, [props.record]);\n\n  /* useEffect(() => {\n        if (path && !initialized) {\n            setInitialized(true);\n        }\n        if (path && initialized) {\n            if (selected && selected.id)\n                handleSave(path, record);\n        }\n    }, [path]); */\n\n  useEffect(() => {\n    if (!_.isEqual(props.filterDefaultValues, filterDefaultValues))\n      setFilterDefaultValues(props.filterDefaultValues);\n  }, [props.filterDefaultValues]);\n\n  useEffect(() => {\n    if (filterDefaultValues) getData();\n  }, [filterDefaultValues, refresh]);\n\n  useEffect(() => {\n    /* if (polygon && selected) {\n            onChangePolygon(polygon, selected);\n        } */\n    /* if (onSelect) onSelect(selected); */\n  }, [polygon]);\n\n  useEffect(() => {\n    if (props.polygon && props.polygon.lat && props.polygon.lng) {\n      let latLng = props.polygon;\n      setCenter({\n        lat: latLng.lat,\n        lng: latLng.lng,\n      });\n    }\n  }, [props.polygon]);\n\n  const getBounds = (polygon) => {\n    var bounds = new window.google.maps.LatLngBounds();\n    polygon.getPath().forEach((element, index) => {\n      bounds.extend(element);\n    });\n    return bounds;\n  };\n\n  useEffect(() => {\n    if (props.selected && !_.isEqual(props.selected, selected)) {\n      setSelected(props.selected);\n      let record = listenersRef.current.find(\n        (it) => props.selected.id == it.id\n      );\n      if (record) {\n        let { polygon } = record;\n        if (polygon) {\n          let path = getBounds(polygon);\n          let latLng = path.getCenter();\n          setCenter({\n            lat: latLng.lat(),\n            lng: latLng.lng(),\n          });\n        }\n      }\n    }\n  }, [props.selected]);\n\n  // if (loading) return \"Cargando...\";\n  return (\n    <Wrapper height={props.height} className=\"App\">\n      <LoadScript\n        id=\"script-loader\"\n        googleMapsApiKey=\"AIzaSyBbsQSRn1eit85DvTMfTFR07HYMbjVkzqA\"\n        language=\"en\"\n        region=\"us\"\n      >\n        <GoogleMap\n          loading={loading}\n          mapContainerClassName=\"app-map\"\n          center={center}\n          zoom={11}\n          version=\"weekly\"\n          on\n        >\n          {\n            infoWindowVisible &&\n            <InfoWindow\n              position={infoWindowVisible?.positionInfo}\n              open={true}\n              onCloseClick={(e) => {\n                setInfoWindowVisible();\n              }}\n            >\n              <div style={{ backgroundColor: 'white', padding: 15 }}>\n                <div style={{ fontSize: 15, fontColor: `#08233B` }}>\n                  {infoWindowVisible.name}\n                  <br />\n                  {window.google.maps.geometry.spherical.computeArea(infoWindowVisible.polygon.getPath()) / 1000000} km<sup>2</sup>\n                </div>\n              </div>\n            </InfoWindow >\n          }\n\n          {dataSource &&\n            dataSource.map((it) => (\n              <Polygon\n                // Make the Polygon editable / draggable\n                editable={selected && it.id == selected.id}\n                options={{\n                  strokeColor: it.color || \"#FF0000\",\n                  fillColor: it.color || \"#FF0000\",\n                  strokeOpacity: 0.8,\n                  strokeWeight: 2,\n                  fillOpacity: 0.3,\n                }}\n                draggable={true}\n                path={it.path}\n                onMouseDown={() => {\n                  let interval = setTimeout(() => {\n                    count++;\n                    if (count > 5) {\n                      setDragging(true);\n                      clearTimeout(interval);\n                    }\n                  }, 100);\n                }}\n                // Event used when manipulating and adding points\n                onMouseUp={(e) => {\n                  if (selected) {\n                    let item = listenersRef.current.find(\n                      (item) => item.id == it.id\n                    );\n                    if (item) {\n                      let polygon = item.polygon;\n                      if (polygon) {\n                        const nextPath = polygon\n                          .getPath()\n                          .getArray()\n                          .map((latLng) => {\n                            return {\n                              lat: latLng.lat(),\n                              lng: latLng.lng(),\n                            };\n                          });\n                        if (selected.id != it.id) setSelected(it);\n                        /* item.polygon = nextPath; */\n                        /* setPath(nextPath); */\n                        /* setPolygon(nextPath); */\n                        onChangePolygon(nextPath, item);\n                      }\n                    }\n                  } else if (!selected) {\n                    setSelected(it);\n                  }\n\n                  /* if (selected && it.id == selected.id) {\n                                  if (item) {\n                                      let { polygon } = item;\n                                      if (polygon) {\n                                          const nextPath = polygon\n                                              .getPath()\n                                              .getArray()\n                                              .map(latLng => {\n                                                  return {\n                                                      \"lat\": latLng.lat(),\n                                                      \"lng\": latLng.lng()\n                                                  };\n                                              });\n                                          onEdit(nextPath, selected);\n                                      }\n                                  }\n                              } */\n                }}\n                // Event used when dragging the whole Polygon\n                onDragEnd={(e) => {\n                  setDragging(false);\n                  if (selected) {\n                    let item = listenersRef.current.find(\n                      (item) => item.id == it.id\n                    );\n                    if (item) {\n                      let polygon = item.polygon;\n                      if (polygon) {\n                        const nextPath = polygon\n                          .getPath()\n                          .getArray()\n                          .map((latLng) => {\n                            return {\n                              lat: latLng.lat(),\n                              lng: latLng.lng(),\n                            };\n                          });\n                        if (selected.id != it.id) setSelected(it);\n                        /* item.polygon = nextPath; */\n                        /* setPath(nextPath); */\n                        /* setPolygon(nextPath); */\n                        onChangePolygon(nextPath, item);\n                      }\n                    }\n                  } else if (!selected) {\n                    setSelected(it);\n                  }\n                }}\n                onClick={(e) => {\n                  if (selected) {\n                    let item = listenersRef.current.find(\n                      (item) => item.id === it.id\n                    );\n                    let path = getBounds(item.polygon);\n                    let latLng = path.getCenter();\n                    setInfoWindowVisible({\n                      ...item,\n                      positionInfo: {\n                        lat: latLng.lat(),\n                        lng: latLng.lng(),\n                      }\n                    });\n                  }\n                }\n                }\n                /* onLoad={onLoad} */\n                onLoad={(polygon) => onLoad(polygon, it)}\n                onUnmount={onUnmount}\n              />\n            ))}\n        </GoogleMap>\n      </LoadScript>\n    </Wrapper>\n  );\n};\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport {\n    Col,\n    Row,\n    List,\n    Button,\n    Input,\n    message,\n    Dropdown,\n    Menu,\n    Layout,\n    Select,\n    InputNumber\n} from \"antd\";\nimport { MyModal } from \"../../components/com/MyModal\";\nimport ColorField from \"../../components/com/fields/ColorField\";\nimport { WrapperList } from \"./Styles\";\nimport Map from \"../../components/map/Map\";\nimport { SimpleForm } from \"../../components/com/form/\";\nimport { getService } from \"../../services\";\nimport { money } from \"../../utils\";\n\nimport { AiOutlinePlus, AiOutlineMore, AiOutlineEdit, AiOutlineDelete } from 'react-icons/ai';\nimport { useCities } from '../../hooks/useCities';\n\n\nconst MenuItems = ({\n    onChange,\n    actions = { edit: true, delete: true },\n    ...props\n}) => (\n    <Menu\n        className={props.className || \"list-menu\"}\n        onClick={({ key }) => {\n            if (onChange) onChange(key, props.record);\n        }}\n        items={[\n            actions.edit && {\n                key: 'edit',\n                label: 'Editar',\n                icon: <AiOutlineEdit />\n            },\n            actions.delete && {\n                key: 'delete',\n                label: 'Eliminar',\n                icon: <AiOutlineDelete />\n            }\n        ]}\n    />\n);\n\nconst ListPolygons = ({\n    onSelect,\n    filterDefaultValues,\n    refresh,\n    onSubmit,\n    onItemSelect,\n    cities_id,\n    cities,\n    reference,\n    buttonText,\n    title,\n    ...props\n}) => {\n    const [dataSource, setDataSource] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [center, setCenter] = useState([\n        { lat: 52.52549080781086, lng: 13.398118538856465 },\n        { lat: 52.48578559055679, lng: 13.36653284549709 },\n        { lat: 52.48871246221608, lng: 13.44618372440334 },\n    ]);\n    const [selected, setSelected] = useState();\n\n    const handleSelect = (item) => {\n        if (onItemSelect) onItemSelect(item);\n        setSelected(item);\n    };\n    const handleAdd = () => {\n        setSelected(null);\n        setVisible(true);\n    };\n    const removePolygon = (id) => {\n        const service = getService(\"report-zones\");\n        service\n            .remove(id)\n            .then((res) => {\n                message.success(\"Polígono eliminado!\");\n                if (onSubmit) onSubmit();\n                getData();\n            })\n            .catch((err) => {\n                message.error(err.message);\n            });\n    };\n    const handleChange = (key, item) => {\n        switch (key) {\n            case \"edit\":\n                setSelected(item);\n                setVisible(true);\n                break;\n            case \"delete\":\n                if (item.id) removePolygon(item.id);\n                break;\n            default:\n                break;\n        }\n    };\n    const renderItem = (record, index) => {\n        let item = record;\n        return (\n            <List.Item\n                key={index}\n                actions={[\n                    <div>\n                        <Dropdown\n                            trigger={[\"click\"]}\n                            overlay={() => (\n                                <MenuItems\n                                    onChange={(key) => handleChange(key, item)}\n                                    record={item}\n                                />\n                            )}\n                        >\n                            <Button type=\"link\" icon={<AiOutlineMore />} />\n                        </Dropdown>\n                    </div>,\n                ]}\n                className={`item ${selected && selected.id == item.id ? \"selected\" : \"\"\n                    }`}\n                onClick={() => {\n                    if (item) handleSelect(item);\n                }}\n            >\n                <div className=\"item-container\">\n                    <div className=\"item-color\">\n                        <div\n                            style={{\n                                background: item.color || \"#cccccc4a\",\n                            }}\n                            className=\"color\"\n                        />\n                    </div>\n                    <div className=\"item-name\">\n                        <div className=\"name\">{record.name}</div>\n                        {record.price && (\n                            <div className=\"item-price\">{money(record.price)}</div>\n                        )}\n                    </div>\n                </div>\n            </List.Item>\n        );\n    };\n    const getData = () => {\n        if (reference) {\n            const service = getService(reference);\n            setLoading(true);\n            service\n                .find({\n                    query: {\n                        ...filterDefaultValues,\n                        $limit: 50,\n                        $sort: {\n                            id: -1\n                        }\n                    },\n                })\n                .then(({ data }) => {\n                    setDataSource(data);\n                    setLoading(false);\n                })\n                .catch((err) => {\n                    setLoading(false);\n                    message.error(err.message);\n                });\n        }\n    };\n    const handleOnSubmit = (err, data) => {\n        if (err) return message.error(err.message);\n        setVisible(false);\n        setSelected(null);\n        if (onItemSelect) onItemSelect(data);\n        setSelected(data);\n        if (onSubmit) onSubmit(data);\n        getData();\n    };\n\n    useEffect(() => {\n        getData();\n    }, [props.restaurant_id, refresh]);\n\n    useEffect(() => {\n        if (props.selected) setSelected(props.selected);\n    }, [props.selected]);\n\n    useEffect(() => {\n        onSelect(selected);\n    }, [selected]);\n\n    useEffect(() => {\n        if ((!selected?.id) && props.center && props.center.lat && props.center.lng) {\n            let polygons = [];\n            let { google } = window;\n            if (\n                google &&\n                google.maps &&\n                google.maps.geometry &&\n                google.maps.geometry.spherical\n            ) {\n                var distance = 1000; // metres\n                var pointA = new google.maps.LatLng(props.center.lat, props.center.lng);\n                var pointB = google.maps.geometry.spherical.computeOffset(\n                    pointA,\n                    distance,\n                    0\n                );\n                var angle = google.maps.geometry.spherical.computeHeading(\n                    pointA,\n                    pointB\n                );\n                // setting angle to 90 degrees\n                var newAngle = angle + 90; // OR angle - 90\n                // get new point C\n                var pointC = google.maps.geometry.spherical.computeOffset(\n                    pointA,\n                    distance,\n                    newAngle\n                );\n                // console.log(pointC.lat(), pointC.lng(), \"lat, lng\");\n                polygons.push({\n                    lat: pointA.lat(),\n                    lng: pointA.lng(),\n                });\n                polygons.push({\n                    lat: pointB.lat(),\n                    lng: pointB.lng(),\n                });\n                polygons.push({\n                    lat: pointC.lat(),\n                    lng: pointC.lng(),\n                });\n                setCenter(polygons);\n            }\n        }\n    }, [props.center]);\n\n    return (\n        <WrapperList>\n            <List\n                header={\n                    <div className=\"head\">\n                        <h3>{title}</h3>\n                        <div className=\"head-tools\">\n                            <Button onClick={handleAdd} type=\"primary\" block icon={<AiOutlinePlus />}>\n                                {buttonText || \"Agregar Zona de Cobertura\"}\n                            </Button>\n                        </div>\n                    </div>\n                }\n                renderItem={renderItem}\n                dataSource={dataSource}\n            />\n            <MyModal\n                title={selected && selected?.id ? \"Editar Polígono\" : \"Crear Polígono\"}\n                width={700}\n                onCancel={() => {\n                    setVisible(false);\n                    setSelected(null);\n                }}\n                visible={visible}\n            >\n                <SimpleForm\n                    id={selected && selected.id}\n                    source=\"report-zones\"\n                    onSubmit={handleOnSubmit}\n                    query={{ $select: ['id', 'name', 'color', 'city_id', 'danger_level'] }}\n                    allowNull={true}\n                >\n                    <Input\n                        name=\"name\"\n                        flex={1}\n                        label=\"Nombre\"\n                        placeholder=\"Nombre\"\n                        validations={[\n                            {\n                                required: true,\n                                message: \"Este campo es requerido\"\n                            },\n                        ]}\n                    />\n\n                    <Select\n                        flex={1}\n                        name=\"danger_level\"\n                        label=\"Danger level\"\n                        placeholder=\"Danger level null - No hay riesgo\"\n                        allowClear\n                    >\n\n                        <Select.Option key={1} value={1}>\n                            1 - No hay riesgo\n                        </Select.Option>\n                        <Select.Option key={2} value={2}>\n                            2 - Riesgo minimo\n                        </Select.Option>\n                        <Select.Option key={3} value={3}>\n                            3 - Riesgo maximo\n                        </Select.Option>\n                    </Select>\n                    \n                    <Input\n                        type=\"hidden\"\n                        name=\"city_id\"\n                        initial={Number(props.restaurant_id)}\n                    />\n                    <ColorField\n                        flex={1}\n                        name=\"color\"\n                        label=\"Color\"\n                        placeholder=\"Color\"\n                        validations={[\n                            { required: true, message: \"Este campo es requerido\" },\n                        ]}\n                    />\n                    {\n                        !(selected?.id) &&\n                        < Input type=\"hidden\" name=\"polygon\" initial={center} />\n                    }\n                </SimpleForm>\n            </MyModal>\n        </WrapperList>\n    );\n};\n\nconst ReportZones = ({ record, ...props }) => {\n\n    const [cityId, setCityId] = useState(); // id city selected\n    const [citySelected, setCitySelected] = useState(); // target city data\n    const [polygon, setPolygon] = useState();\n    const [item, setItem] = useState();\n    const [refresh, setRefresh] = useState(false);\n    const [render, setRender] = useState(true);\n\n    const [cities, loadingCities] = useCities();\n\n\n    const handleOnSubmit = () => {\n        setRefresh((refresh) => !refresh);\n        setRender(false);\n    };\n    const handleOnSelect = (item) => {\n        setItem(item);\n        setRefresh((refresh) => !refresh);\n        if (item.polygon) setPolygon(JSON.parse(item.polygon));\n    };\n    const handleOnChange = (polygon, item) => {\n        if (_.differenceBy(polygon, item.path, 'lat', 'lng').length === 0)\n            return;\n        const service = getService(\"report-zones\");\n        return service\n            .patch(item.id, {\n                polygon: polygon,\n            })\n            .then((res) => {\n                message.success(\"Polígono Actualizado!\");\n            })\n            .catch((err) => {\n                message.error(err.message);\n            });\n    };\n\n    useEffect(() => {\n        setTimeout(() => {\n            setRender(true);\n        }, 100);\n    }, [render]);\n\n    useEffect(() => {\n        if (cityId) setCitySelected(cities.filter((it) => it.id === cityId));\n        setRender(false);\n    }, [cityId, cities]);\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Row style={{ height: '100%' }}>\n                <Col\n                    span={6}\n                    style={{\n                        boxShadow: \"1px 3px 23px 1px rgba(0, 0, 0, 0.095)\",\n                        borderRadius: \"12px !important\",\n                        background: 'white',\n                        height: '100%',\n                        overflow: 'auto'\n                    }}\n                >\n                    <Select\n                        loading={loadingCities}\n                        style={{\n                            width: \"100%\",\n                            padding: '8px'\n                        }}\n                        placeholder=\"Selecciona una ciudad\"\n                        onSelect={(e) => {\n                            setCityId(e);\n                        }}\n                    >\n                        {\n                            cities.map(({ id, name }, index) =>\n                                <Select.Option key={index} value={id}>\n                                    {name}\n                                </Select.Option>\n                            )\n                        }\n                    </Select>\n\n                    {cityId > 0 && (\n                        <ListPolygons\n                            reference=\"report-zones\"\n                            filterDefaultValues={{\n                                city_id: cityId,\n                            }}\n                            center={{\n                                lat: citySelected && parseFloat(citySelected[0].lat),\n                                lng: citySelected && parseFloat(citySelected[0].lng),\n                            }}\n                            selected={item}\n                            refresh={refresh}\n                            onSelect={(item) => setItem(item)}\n                            onSubmit={handleOnSubmit}\n                            onItemSelect={handleOnSelect}\n                            restaurant_id={cityId}\n                            cities={citySelected && citySelected[0]}\n                        />\n                    )}\n                </Col>\n                {cityId > 0 && (\n                    <Col\n                        span={18}\n                        style={{\n                            boxShadow: \"1px 3px 23px 1px rgba(0, 0, 0, 0.095)\",\n                            borderRadius: \"12px !important\",\n                            background: 'white'\n                        }}\n                    >\n                        {render && (\n                            <Map\n                                height={'100%'}\n                                reference=\"report-zones\"\n                                onMapChange={handleOnChange}\n                                onSelect={(item) => setItem(item)}\n                                record={item}\n                                selected={item}\n                                filterDefaultValues={{\n                                    city_id: cityId,\n                                }}\n                                polygon={{\n                                    lat: citySelected && parseFloat(citySelected[0].lat),\n                                    lng: citySelected && parseFloat(citySelected[0].lng),\n                                }}\n                                refresh={false}\n                                item_id={item && item.id}\n                            />\n                        )}\n                    </Col>\n                )}\n            </Row>\n        </Layout.Content>\n    );\n};\nexport default ReportZones;\n","import { useEffect, useState } from 'react';\nimport { message } from 'antd';\nimport { getService } from '../services';\n\nexport const useCities = () => {\n    const citiesService = getService(\"cities\");\n\n    const [cities, setCities] = useState([]);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    useEffect(() => {\n        setLoadingCities(true);\n        citiesService\n            .find({\n                query: {\n                    $limit: 100000,\n                    $sort: {\n                        name: 1,\n                    },\n                }\n            })\n            .then(({ data }) => {\n                setCities(data);\n                setLoadingCities(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n                setCities([]);\n                setLoadingCities(false);\n            });\n    }, []);\n\n\n    return [\n        cities,\n        loadingCities\n    ];\n}"],"sourceRoot":""}