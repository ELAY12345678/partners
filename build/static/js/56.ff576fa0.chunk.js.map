{"version":3,"sources":["views/pop-up/index.jsx","views/pop-up/PopUpSystem.jsx"],"names":["GroupManager","_jsx","_Layout","Content","style","height","overflow","padding","children","PopUpSystem","format","STATUS","id","name","DAYS_OF_WEEK","day","FRENQUENCY","SCOPE","INTERVAL","columns","_ref","onRemove","onEdit","title","dataIndex","sorter","width","render","value","_Tag","color","record","establishments_ids_included_information","_","map","JSON","parse","_ref2","key","full_name","_jsxs","length","_Row","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","_ref3","location","getService","establishmentsServices","form","_Form","useForm","selectedCampaignId","useWatch","selectedTargetingScope","popupsServices","drawerVisible","setDrawerVisible","useState","selectedGroup","setSelectedGroup","updateSource","setUpdateSource","establishmentBranchSelected","setEstablishmentBranchSelected","establishmentBranchesOptions","setEstablishmentBranchesOptions","establishmentCampaigns","setEstablishmentCampaigns","loadingEstablishmentCampaigns","setloadingEstablishmentCampaigns","currentPage","setCurrentPage","DAYSOFWEEK","_ref4","Number","label","checked","availabilityScheduleByDay","setavailabilityScheduleByDay","debounceGetEstablishmentBranches","debounce","async","find","query","q","$client","skipJoins","$limit","$select","then","_ref5","data","dataResponse","_ref6","establishment_id","sortBy","_ref7","catch","err","_message","error","maxWait","useEffect","_selectedGroup$pop_up","_selectedGroup$pop_up2","_selectedGroup$pop_up3","_selectedGroup$pop_up4","_selectedGroup$pop_up7","_selectedGroup$pop_up8","_selectedGroup$pop_up9","_selectedGroup$pop_up0","_selectedGroup$pop_up1","_selectedGroup$pop_up10","_selectedGroup$pop_up11","_selectedGroup$pop_up12","_selectedGroup$pop_up13","_selectedGroup$pop_up14","_selectedGroup$pop_up5","_selectedGroup$pop_up6","pop_ups_schedules","day_of_week","day_of_weeks","_ref10","daysOfWeek","dia","_objectSpread","includes","setFieldsValue","days_of_week","filter","item","period_type","setFieldValue","moment","date","targeting_scope","reappear_interval_minutes","concat","start_time","end_time","_ref11","establishment_ids","total","_Fragment","Grid","custom","source","filterDefaultValues","showPopUpsSchedules","searchField","searchText","search","permitFetch","actions","_ref8","remove","success","message","forEach","extra","RoundedButton","AiOutlinePlus","_Drawer","placement","visible","onClose","resetFields","setTimeout","SimpleForm","textAcceptButton","initialValues","onSubmit","values","_values$start_time","_values$end_time","_establishmentCampaig","isBefore","typePopup","frequency","DAYSOFWEEKS","undefined","STARTDATETIME","ENDDATETIME","DATE","description","link_url","status","establishments_ids_included","stringify","it","meta_pop_ups_schedules","patch","create","console","log","_Input","flex","validations","required","_Select","size","_ref13","index","Option","_ref14","disabled","_ref15","_DatePicker","xtype","locale","Item","rules","labelCol","display","gap","marginTop","flexWrap","_ref16","minWidth","_ref1","valueChecked","newSchedule","scheduleChecked","handleChangeDayStatus","_TimePicker","use12Hours","minuteStep","_ref17","marginBottom","_Col","showSearch","placeholder","allowClear","onSearch","onClear","onSelect","optionFilterProp","filterOption","input","option","toLowerCase","_ref18","establishment_branch_id","_ref0","tables_partners_groups_id","_ref9","establishmentName","_JSON$parse","setEstablishmentBranchesCampaign","_Table","loading","dataSource","_ref12","updatedData","removeEstablishmentBranchesCampaign","pagination","current","showSizeChanger","pageSize","onChange","page","showTotal"],"mappings":"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","file":"static/js/56.ff576fa0.chunk.js","sourcesContent":["import { Layout } from 'antd';\nimport React from 'react';\nimport PopUpSystem from './PopUpSystem';\n\nconst GroupManager = () => {\n\n    // const [banners, loadingBanners, getBanners] = useBanners();\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <PopUpSystem  />\n        </Layout.Content>\n    );\n}\n\nexport default GroupManager;","import { Button, Col, DatePicker, Drawer, Form, Input, message, Row, Select, Table, Tag, TimePicker } from 'antd';\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport _, { debounce } from 'lodash';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { Grid } from \"../../components/com\";\nimport { SimpleForm } from '../../components/com/form/SimpleForm';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { getService } from '../../services';\nconst format = \"h:mm a\";\nconst formatValue = 'hh:mm a';\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Activo\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactivo\",\n    },\n];\nconst DAYS_OF_WEEK = [\n    { day: 'Lunes', id: 0 },\n    { day: 'Martes', id: 1 },\n    { day: 'Miércoles', id: 2 },\n    { day: 'Jueves', id: 3 },\n    { day: 'Viernes', id: 4 },\n    { day: 'Sábado', id: 5 },\n    { day: 'Domingo', id: 6 },\n    { day: 'Festivos', id: 7 },\n];\n\nconst FRENQUENCY = [\n    {\n        id: \"all\",\n        name: \"Una sola vez\",\n    },\n    {\n        id: \"specific\",\n        name: \"Recurrente\",\n    },\n];\n\nconst SCOPE = [\n    {\n        id: \"all\",\n        name: \"Mostrar en todos los establecimientos\",\n    },\n    {\n        id: \"specific\",\n        name: \"Mostrar en establecimientos específicos\",\n    },\n];\n\n\nconst INTERVAL = [\n    {\n        id: \"null\",\n        name: \"Sin configurar\",\n    },\n    {\n        id: \"5\",\n        name: \"5 segundos\",\n    },\n    {\n        id: \"30\",\n        name: \"30 segundos\",\n    },\n    {\n        id: \"60\",\n        name: \"1 minuto\",\n    },\n    {\n        id: \"300\",\n        name: \"5 minutos\",\n    },\n    {\n        id: \"900\",\n        name: \"15 minutos\",\n    },\n    {\n        id: \"1800\",\n        name: \"30 minutos\",\n    },\n    {\n        id: \"3600\",\n        name: \"1 hora\",\n    },\n    {\n        id: \"21600\",\n        name: \"6 horas\",\n    },\n];\n\nconst columns = ({ onRemove, onEdit }) => [\n    // {\n    //     title: \"Id\",\n    //     dataIndex: \"id\",\n    //     sorter: true,\n    //     width: 100,\n    // },\n    {\n        title: \"Nombre\",\n        dataIndex: \"name\",\n        sorter: true,\n        width: 200,\n    },\n    {\n        title: \"Descripción\",\n        dataIndex: \"description\",\n        sorter: true,\n        width: 200,\n    },\n    {\n        title: \"Estado\",\n        dataIndex: \"status\",\n        sorter: true,\n        width: 100,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Establecimientos\",\n        dataIndex: \"tables_partners\",\n        sorter: true,\n        width: 'auto',\n        render: (value, record) =>\n            record?.establishments_ids_included_information ? _.map(JSON.parse(record?.establishments_ids_included_information), ({ full_name }, key) => (\n              <div>\n                {full_name} \n                {key + 1 === JSON.parse(record?.establishments_ids_included_information || []).length ? '' : ' , '}\n              </div>\n            )) : '',\n    },\n    {\n        title: \"Link\",\n        dataIndex: \"link_url\",\n        sorter: false,\n        // width: 200,\n    },\n    \n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        width: 150,\n        render: (id, record) => {\n            return (\n                <Row>\n                    <Button\n                        type=\"text\"\n                        onClick={() => onEdit(record)}\n                        icon={<AiOutlineEdit />}\n                    />\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </Row>\n            );\n        },\n    }\n];\n\nconst  PopUpSystem = ({ location }) => {\n\n    // const {\n    //     establishment_id,    \n    //     establishment_branch_id\n    // } = location.state;\n    const tablesPartnersGroupService = getService('tables-partners-groups');\n    const tablesPartnersService = getService('tables-partners');\n    const establishmentsServices = getService('establishments');\n    \n    const [form] = Form.useForm();\n    const selectedCampaignId = Form.useWatch('frequency', form);\n    const selectedTargetingScope = Form.useWatch('targeting_scope', form); \n    const popupsServices = getService('pop-ups');\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedGroup, setSelectedGroup] = useState();\n    const [updateSource, setUpdateSource] = useState(false);\n    const [establishmentBranchSelected, setEstablishmentBranchSelected] = useState();\n    const [establishmentBranchesOptions, setEstablishmentBranchesOptions] = useState([]);\n    const [establishmentCampaigns, setEstablishmentCampaigns] = useState([])\n    const [loadingEstablishmentCampaigns, setloadingEstablishmentCampaigns] = useState(false)\n    const [currentPage, setCurrentPage] = useState(1);\n    const DAYSOFWEEK = _.map(DAYS_OF_WEEK, ({ day, id }) => ({\n        value: Number(id || 0) + 1,\n        label: day,\n        checked: false,\n    }));\n    \n    const [availabilityScheduleByDay, setavailabilityScheduleByDay] =\n        useState(DAYSOFWEEK);\n        \n    const getEstablishmentBranches = async (value) => {\n            if (value === '') {\n                setEstablishmentBranchesOptions([])\n                setCurrentPage(1)\n                return;\n            }\n\n            await  establishmentsServices.find({\n                    query: {\n                        q: value,\n                        $client: {\n                            skipJoins: true\n                        },\n                        $limit: 25,\n                        $select: ['id', 'name']\n                    }\n                }).then(({data}) => {  \n            const dataResponse = data.map(({id,name})=>({\n            // city_name: ,\n            // establishment_branch_id: ,\n            establishment_id: id,\n            full_name: name}))\n         \n                setEstablishmentBranchesOptions(_.sortBy(dataResponse, [({ full_name }) => full_name]));\n            })\n            .catch((err) => message.error(err));\n        };\n    \n    const debounceGetEstablishmentBranches = debounce(getEstablishmentBranches, 500, { maxWait: 800 });\n    const onRemove = async ({ id }) => {\n        await popupsServices.remove(id)\n            .then(() => {\n                message.success(\"Pop-up eliminada!\");\n                setUpdateSource(!updateSource);\n                // getEstablishmentCampaigns()\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el Sucursal! ' + error?.message)\n            )\n    };\n\n    const onEdit = (record) => {\n        _.forEach(record, (value, key) => {\n            if (value === null) {\n                delete record[key]\n            }\n        })\n        setSelectedGroup(record);\n        setDrawerVisible(true);\n    };\n\n    // const getTablesPartner = ()=>{\n    //     .find({\n    //         query: {\n    //             $client:{\n    //                 showTablesPartners: true\n    //             },\n    //             $select: [\"id\", \"name\",\"status\"]\n    //         }\n    //     })\n        \n    // }\n    \n    // const [establishmentCampaigns, getEstablishmentCampaigns, loadingEstablishmentCampaigns]\n    //     = useEstablishmentCampaigns({\n    //         source: \"tables-partners\",\n    //         tables_partners_groups_id: selectedGroup?.id || null,//selectedCampaign?.id\n    //         page: currentPage,\n    //         filters: {\n    //             tables_partners_groups_id: selectedGroup?.id,//selectedCampaign?.id\n    //         }\n    //     });\n\n    const handleSubmit = async (err, values, form) => {\n        if (err) return message.error(err);\n\n        try {\n            if (\n                moment(values?.end_time).isBefore(moment(values?.start_time))\n              // values?.start_time?.format('HH:mm:ss') >\n              // values?.end_time?.clone().subtract(1, 'second')?.format('HH:mm:ss')\n            ) {\n                message.error('¡Ups! El rango de horario no es válido');\n              \n                return;\n            }\n            // setisLoading(true);\n            const typePopup = values?.frequency\n            const DAYSOFWEEKS =\n                typePopup === 'all'\n                ? undefined\n                : _.map(\n                    availabilityScheduleByDay.filter(\n                        (item) => item?.checked === true,\n                    ),\n                    'value',\n                );\n\n            const STARTDATETIME = values?.start_time?.format('HH:mm:00');\n           \n            const ENDDATETIME = values?.end_time?.format('HH:mm:00');\n            const DATE =\n            typePopup === 'all'\n                ? moment(values?.day).format('YYYY-MM-DD')\n                : undefined; // all\n            const data = {\n                name: values?.name,\n                description: values?.description,\n                link_url: values?.link_url,\n                status: values?.status,\n                targeting_scope: values?.targeting_scope,\n                 //genera error\n                type: 'system',\n                establishments_ids_included: values?.targeting_scope ==='all' ? null : JSON.stringify(establishmentCampaigns?.data?.map((it)=>it?.establishment_id)),\n                establishments_ids_included_information: values?.targeting_scope ==='all' ? null : JSON.stringify(establishmentCampaigns?.data) ,\n                meta_pop_ups_schedules:\n                typePopup === 'all'\n                    ? [\n                        {\n                            period_type: 'date',\n                            date: DATE,\n                            start_time: STARTDATETIME,\n                            end_time: ENDDATETIME,\n                            reappear_interval_minutes: values?.reappear_interval_minutes !=='null' ? values?.reappear_interval_minutes : undefined,\n                        },\n                        ]\n                    : _.map(DAYSOFWEEKS, (value) => ({\n                            period_type: 'day_of_week',\n                            day_of_week: value,\n                            start_time: STARTDATETIME,\n                            end_time: ENDDATETIME,\n                            reappear_interval_minutes: values?.reappear_interval_minutes !=='null' ? values?.reappear_interval_minutes : undefined,\n                        })),\n            };\n\n            if (selectedGroup && selectedGroup?.id) {\n                const event = await popupsServices.patch(selectedGroup?.id, data);\n                form.resetFields();\n            } else {\n                const event = await popupsServices.create(data);\n                form.resetFields();\n            }\n           \n            setEstablishmentCampaigns([])\n            setSelectedGroup();\n            message.success(\"¡Pop-up creado exitosamente!.\");\n            setTimeout(() => {\n                setUpdateSource(!updateSource);\n                setDrawerVisible(false);\n            }, 500);\n            } catch (error) {\n                console.log('error',error)\n        }\n        \n    };\n\n    const setEstablishmentBranchesCampaign = async ({ establishmentBranchSelected, tables_partners_groups_id }) => {\n       \n        const establishmentName = establishmentBranchesOptions.filter((it)=> it.establishment_id ===JSON.parse(establishmentBranchSelected)?.establishment_id)\n\n        const data = (establishmentCampaigns?.data || []).concat(establishmentName)\n       \n        setEstablishmentCampaigns({data ,total: (data || [])?.length})\n        // const data= {...(JSON.parse(establishmentBranchSelected)),tables_partners_groups_id}\n        //     await tablesPartnersService.create(data).then(() => {\n                    message.success('Establecimiento añadido correctamente!');\n                    setEstablishmentBranchSelected();\n                    setUpdateSource(!updateSource);\n                    // getEstablishmentCampaigns();\n                // }).catch((error) => {\n                //     message.error(error?.message);\n                // })\n    };\n\n    const handleChangeDayStatus = ({ valueChecked }) => {\n        const newSchedule = _.map(availabilityScheduleByDay, (day) =>\n            day.value === valueChecked\n            ? {\n                ...day,\n                checked:\n                //   day?.value === initialValues?.day_of_week ? true :\n                    !day.checked,\n                }\n            : day,\n        );\n        setavailabilityScheduleByDay(newSchedule);\n        const scheduleChecked = newSchedule.filter((item) => item.checked === true);\n        form.setFieldsValue({\n            day_of_week: scheduleChecked.length ? scheduleChecked : null,\n        });\n    };\n\n    useEffect(() => {\n        if(selectedGroup?.id){\n            if (selectedGroup?.pop_ups_schedules?.[0]?.day_of_week) {\n               \n                const day_of_weeks= selectedGroup?.pop_ups_schedules.map(({day_of_week})=>day_of_week)\n            \n                const daysOfWeek = DAYSOFWEEK.map((dia) => ({\n                  ...dia,\n                  checked: !!day_of_weeks.includes(\n                    dia?.value,\n                  ),\n                }));\n                setavailabilityScheduleByDay(daysOfWeek);\n                form.setFieldsValue({\n                  days_of_week: daysOfWeek.length\n                    ? daysOfWeek.filter((item) => item.checked === true)\n                    : null,\n                });\n            }\n            if(selectedGroup?.pop_ups_schedules?.[0]?.period_type ==='date'){\n               \n                form.setFieldValue(\n                    'day',\n                    moment(selectedGroup?.pop_ups_schedules?.[0]?.date),\n                );\n\n            }\n            form.setFieldValue(\n                'frequency',\n                selectedGroup?.pop_ups_schedules?.[0]?.period_type ==='date' ? 'all' : 'specific',\n            );\n\n            form.setFieldValue(\n                'targeting_scope',\n                selectedGroup?.targeting_scope,\n            );\n\n            \n            \n            form.setFieldValue(\n                'reappear_interval_minutes',\n                selectedGroup?.pop_ups_schedules?.[0]?.reappear_interval_minutes ? `${selectedGroup?.pop_ups_schedules?.[0]?.reappear_interval_minutes}` :  'null',\n            );\n\n            //    start_hour: moment(source.start_hour, formatValue),\n            //             end_hour: moment(moment(source.end_hour, formatValue)),\n            form.setFieldValue(\n                'start_time',\n                moment(selectedGroup?.pop_ups_schedules?.[0]?.start_time, 'HH:mm:ss')\n                // moment(moment(selectedGroup?.pop_ups_schedules?.[0]?.start_time, formatValue))\n                ,\n            );\n            //   date_time_start: moment(source.date_time_start),\n            //             date_time_end: moment(moment(source.date_time_end)),\n            form.setFieldValue(\n                'end_time',\n                moment(selectedGroup?.pop_ups_schedules?.[0]?.end_time, formatValue)\n                \n            );\n            \n            if(selectedGroup?.establishments_ids_included_information){\n                const establishment_ids = JSON.parse(selectedGroup?.establishments_ids_included_information)\n                setEstablishmentCampaigns({data: establishment_ids ,total: (establishment_ids || [])?.length})\n            }\n            \n            \n        }else{\n            form.setFieldValue(\n            'frequency',\n            'all',\n            );\n            form.setFieldValue(\n                'targeting_scope',\n                'specific',\n            );\n            \n            form.setFieldValue(\n            'name',\n            '',\n            );\n            form.setFieldValue(\n            'description',\n            '',\n            );\n            form.setFieldValue(\n            'link_url',\n            '',\n            );\n        }\n        \n    }, [selectedGroup?.id])\n    \n    const removeEstablishmentBranchesCampaign = ({ id }) => {\n       \n        const updatedData = establishmentCampaigns.data.filter(item => item.establishment_id !== id);\n        \n\n        setEstablishmentCampaigns({\n            data: updatedData,\n            total: updatedData.length\n        });\n        message.success('Establecimiento eliminado correctamente!');\n        setEstablishmentBranchSelected();\n        setUpdateSource(!updateSource);\n    };\n    return (\n        <>\n            <Grid\n                custom={true}\n                source=\"pop-ups\"\n                filterDefaultValues={{\n                    // establishment_id: 1,// establishment_id,\n                    // establishment_branch_id: 1,//establishment_branch_id,\n                    type: 'system',\n                    $limit: 1000,\n                    $client: {\n                        showPopUpsSchedules: true,\n                    },\n                    // $client:{\n                    //     showTablesPartners: true\n                    // },\n                    // $select: [\"id\", \"name\",\"status\"]\n                }}\n                searchField=\"q\"\n                searchText=\"Pop-up...\"\n                search={true}\n                permitFetch={true}\n                actions={{}}\n                updateSource={updateSource}\n                columns={columns({ onRemove, onEdit })}\n                extra={\n                    <div>\n                        <RoundedButton\n                            icon={<AiOutlinePlus />}\n                            type={\"primary\"}\n                            onClick={() => {\n                                setDrawerVisible(true)\n                                setSelectedGroup();\n                                form.setFieldValue(\n                                    'frequency',\n                                    'all',\n                                  );\n                                  form.setFieldValue(\n                                    'targeting_scope',\n                                    'specific',\n                                    );\n                                \n                                  form.setFieldValue(\n                                    'reappear_interval_minutes',\n                                    'null',\n                                  );\n                                  setavailabilityScheduleByDay(DAYSOFWEEK)\n                                  \n                                // getEstablishmentCampaigns();\n                            }}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedGroup ? 'Editar' : 'Crear'} Pop-up`}\n                    placement=\"right\"\n                    width={520}\n                    visible={drawerVisible}\n                    onClose={() => {\n                        form.resetFields();\n                        setSelectedGroup();\n                        setCurrentPage(1)\n                        setEstablishmentCampaigns([])\n                        setEstablishmentBranchesOptions([])\n                        setTimeout(() => {\n                            setDrawerVisible(false);\n                        }, 500);\n                        \n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedGroup}\n                        onSubmit={handleSubmit}\n                        form={form}\n                        // source=\"banners\"\n                        // id={selectedBanner.id}\n                    >\n                        <Input\n                            flex={1}\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <Input\n                            flex={1}\n                            name='description'\n                            label='Descripción'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Descripción es requerida`\n                                }\n                            ]}\n                        />\n                        <Input\n                            flex={1}\n                            name='link_url'\n                            label='Link'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Link es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={0.5}\n                            name='reappear_interval_minutes'\n                            label=\"Intervalo\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Intervalo es requerido`\n                                }\n                            ]}\n                        >\n                            {\n                                _.map(INTERVAL, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        \n                        <Select\n                            flex={0.5}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Select\n                            flex={1}\n                            disabled={selectedGroup?.id}\n                            name='frequency'\n                            label=\"Frecuencia\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Frecuencia es requerida`\n                                }\n                            ]}\n                        >\n                            {\n                                _.map(FRENQUENCY, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        {selectedCampaignId ==='all' ?\n                        \n                        <DatePicker\n                            flex={1}\n                            xtype=\"date\"\n                            size=\"large\"\n                            label=\"Fecha\"\n                            name=\"day\"\n                            format=\"MM/DD/YYYY\"\n                            locale={locale}\n                        />\n                     :null}\n                    {selectedCampaignId ==='specific' ?\n                    <div style={{ }}>\n                        <Form.Item\n                            name=\"day_of_week\"\n                            rules={[\n                            {\n                                required: false,\n                            },\n                            ]}\n                            label=\"Días de la semana\"\n                            labelCol={{ style: {} }}\n                        >\n                            <div\n                            style={{\n                                display: 'flex',\n                                gap: '5px',\n                                marginTop: '2px',\n                                flexWrap: 'wrap',\n                            }}\n                            >\n                            {_.map(\n                                availabilityScheduleByDay,\n                                ({ value, label, checked }) => (\n                                <Button\n                                    type= {checked ?  'primary' : 'ghost' }\n                                    style={{\n                                    minWidth: '100px',\n                                    color: checked ? 'white' : 'black',\n                                    }}\n                                    onClick={async () => {\n                                        await handleChangeDayStatus({ valueChecked: value });\n                                    }}\n                                >\n                                    {label}\n                                </Button>\n                                ),\n                            )}\n                            </div>\n                        </Form.Item>\n                        </div>\n                        :null}\n                        <TimePicker\n                            flex={0.5}\n                            name='start_time'\n                            label=\"Hora inicio\"\n                            use12Hours={true}\n                            minuteStep={30}\n                            format={format}\n                            validations={[{\n                                required: true,\n                                message: `Hora Inicio es requerida`\n                            }]}\n                        />\n                        <TimePicker\n                            flex={0.5}\n                            name='end_time'\n                            label=\"Hora fin\"\n                            use12Hours={true}\n                            minuteStep={30}\n                            format={format}\n                            validations={[{\n                                required: true,\n                                message: `Hora Fin es requerida`\n                            }]}\n                        />\n                        {/* <Select\n                            flex={1}\n                            mode=\"multiple\"\n                            size='large'\n                            label=\"Sucursales\"\n                            name='meta_tables_partners'\n                            loading={loadingEstablishmentBranches}\n                        >\n                            {\n                                _.map(establishmentBranches, ({ id, address }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {address}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select> */}\n                        <Select\n                            flex={1}\n                            name='targeting_scope'\n                            label=\"Alcance\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Alcance es requerido`\n                                }\n                            ]}\n                        >\n                            {\n                                _.map(SCOPE, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                                {selectedTargetingScope ==='specific' ?\n                                    <div style={{width:'100%',gap:'4px'}}>\n                                        <Row style={{ width: '100%',gap:'4px',marginBottom:'8px' }}>\n                                    <Col flex=\"auto\">\n                                        <Select\n                                            showSearch\n                                            label=\"Establecimiento\"\n                                            placeholder=\"Añadir establecimiento\"\n                                            allowClear\n                                            // disabled={!selectedGroup?.id}\n                                            onSearch={debounceGetEstablishmentBranches}\n                                            value={establishmentBranchSelected}\n                                            onClear={() => setEstablishmentBranchSelected()}\n                                            onSelect={(value) => {\n                                                setEstablishmentBranchSelected(value);\n                                            }}\n                                            optionFilterProp=\"children\"\n                                            style={{ width: '100%' }}\n                                            filterOption={(input, option) =>option.children.toLowerCase().includes(input.toLowerCase())\n                                            } \n                                        >\n                                            {\n                                                _.map(establishmentBranchesOptions, ({ establishment_branch_id, establishment_id, full_name }, index) =>\n                                                    <Select.Option key={index} value={JSON.stringify({ establishment_branch_id, establishment_id })}>\n                                                        {full_name}\n                                                    </Select.Option>\n                                                )\n                                            }\n                                        </Select>\n                                    </Col>\n                                    <Col flex='none'>\n                                        <AsyncButton\n                                            type=\"primary\"\n                                            // disabled={!selectedGroup?.id}\n                                            onClick={() => setEstablishmentBranchesCampaign({ establishmentBranchSelected, tables_partners_groups_id: selectedGroup?.id })}\n                                        >\n                                            Añadir\n                                        </AsyncButton>\n                                    </Col>\n                                </Row>\n                                    {/* <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} /> */}\n                        \n                        <Table\n                            style={{width:'100%'}}\n                            loading={loadingEstablishmentCampaigns}\n                            dataSource={establishmentCampaigns?.data || []}\n                            columns={[\n                                {\n                                    title: 'Establecimiento',\n                                    dataIndex: 'full_name',\n                                    key: 'full_name',\n                                    render: (full_name) => full_name \n                                },\n                                {\n                                    title: 'Acciones',\n                                    dataIndex: 'establishment_id',\n                                    key: 'establishment_id',\n                                    width: 100,\n                                    render: (establishment_id                                    ) =>\n                                        <AsyncButton\n                                            type=\"link\"\n                                            onClick={() => removeEstablishmentBranchesCampaign({ id: establishment_id\n                                            })}\n                                            icon={<AiOutlineDelete />}\n                                            confirmText=\"Desea eliminar?\"\n                                        >\n                                        </AsyncButton>\n                                },\n                            ]}\n                            pagination={{\n                                current: currentPage,\n                                showSizeChanger: false,\n                                pageSize: 9,\n                                onChange: (page) => {\n                                    setCurrentPage(page);\n                                },\n                                total: establishmentCampaigns?.total || 0,\n                                showTotal: total => {\n                                    return `Total ${total} record${total > 1 ? \"s\" : \"\"}`;\n                                },\n                            }}\n                        />\n                                    </div>\n                                :\n                                    null\n\n                                } \n                                \n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    );\n}\n\nexport default PopUpSystem;"],"sourceRoot":""}