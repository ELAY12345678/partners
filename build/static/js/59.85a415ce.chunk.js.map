{"version":3,"sources":["views/adminInvoices/index.jsx"],"names":["INVOICE_PAYMENT_METHOD","id","name","INVOICE_PAYMENT_METHOD_NAMES","INVOICE_PAYMENT_METHOD_DICTIONARY","credit_card","bank_transfer","apparta_pay","manual_payment_invoice","INVOICE_STATUS","TYPE_RESERVATION_STATUS","INVOICE_STATUS_COLOR","completed","rejected","pending","INVOICE_STATUS_DICTIONARY","crossed","INVOICE_STATUS_DICTIONARY_NAMES","columns","title","dataIndex","key","sorter","width","render","value","address","_jsx","_Tag","color","children","concat","numeral","format","record","method","moment","AdminInvoices","invoicePaymentsService","getService","updateSource","setUpdateSource","useState","selectedRecords","setSelectedRecords","handlePayPendingAndRejected","async","_ref","find","query","$client","receiveByCreditCardInvoicePaymentId","catch","error","_message","message","tryToReceiveGroupInvoice","_ref5","idInvocices","_","map","join","_ref2","handlePayPendingGroup","info","Promise","resolve","setTimeout","setNewStatus","newStatus","_ref6","patch","status","handleUpdateStatus","_ref7","data","length","index","_data$index2","success","console","log","every","item","_selectedRecords$","establishment_branch_id","_Layout","Content","style","height","overflow","padding","Grid","selection","onChangeSelection","maxSelection","custom","source","filterDefaultValues","$sort","$nin","date_end","$gt","endOf","searchField","searchText","search","permitFetch","actions","extra","_jsxs","_Row","gutter","_Col","AsyncButton","type","borderRadius","onClick","exportExcelPendingBankTransfer","then","response","window","open","path","FileUploader","preview","allowTypes","onFinish","url","importExcelCompletedBankTransferFilePath","err","handleUploadFinish","disabled","isEmpty","danger","some","_ref8","_ref3","filter","_ref4","_data$index","tryToReceiveByCreditCardInvoice","_selectedRecords$2","_selectedRecords$3","sumBy","filters","_Fragment","SelectField","alwaysOn","label","placeholder","allowEmpty","choices","size"],"mappings":"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","file":"static/js/59.85a415ce.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Col, Layout, message, Row, Tag } from \"antd\";\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\nimport numeral from \"numeral\";\nimport { getService } from \"../../api\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { Grid } from \"../../components/com\";\nimport { FileUploader, SelectField } from \"../../components/com/form\";\n\n\nconst INVOICE_PAYMENT_METHOD = [\n    {\n        id: 'credit_card',\n        name: 'Tarjeta de credito'\n    },\n    {\n        id: 'bank_transfer',\n        name: 'Débito automático'\n    },\n    {\n        id: 'manual_payment_invoice',\n        name: 'Factura'\n    },\n];\n\nconst INVOICE_PAYMENT_METHOD_NAMES = {\n    credit_card: \"credit_card\",\n    bank_transfer: \"bank_transfer\",\n    apparta_pay: \"apparta_pay\",\n    manual_payment_invoice: 'manual_payment_invoice',\n};\n\nconst INVOICE_PAYMENT_METHOD_DICTIONARY = {\n    credit_card: \"Tarjeta de credito\",\n    bank_transfer: \"Débito automático\",\n    apparta_pay: \"AppartaPay\",\n    manual_payment_invoice: 'Factura',\n};\n\nconst INVOICE_STATUS = [\n    {\n        id: 'completed',\n        name: 'Completado'\n    },\n    {\n        id: 'pending',\n        name: 'Pendiente'\n    },\n    {\n        id: 'rejected',\n        name: 'Rechazado'\n    },\n    {\n        id: 'crossed',\n        name: 'Cruzado'\n    },\n];\n\nconst TYPE_RESERVATION_STATUS = [\n    {\n        id: 'app_reservations',\n        name: 'Reservas'\n    },\n    {\n        id: 'tmp_platform',\n        name: 'TMP'\n    }\n];\n\n\nconst INVOICE_STATUS_COLOR = {\n    completed: 'success',\n    rejected: 'error',\n    pending: 'processing',\n};\n\nconst INVOICE_STATUS_DICTIONARY = {\n    completed: 'Completado',\n    pending: 'Pendiente',\n    rejected: 'Rechazado',\n    crossed: 'Cruzado',\n};\n\nconst INVOICE_STATUS_DICTIONARY_NAMES = {\n    completed: 'completed',\n    pending: 'pending',\n    rejected: 'rejected',\n    crossed: 'crossed',\n};\n\nconst columns = [\n    {\n        title: \"Id\",\n        dataIndex: \"id\",\n        key: 'id',\n        sorter: true,\n        width: 80,\n    },\n    {\n        title: \"Establecimiento\",\n        dataIndex: \"establishment\",\n        key: 'establishment',\n        render: (value) => value?.name,\n        width: 200,\n    },\n    {\n        title: \"Sucursal\",\n        dataIndex: \"establishment_branch\",\n        key: 'establishment_branch',\n        width: 200,\n        render: (value) => value?.address\n    },\n    {\n        title: \"Metodo de pago\",\n        dataIndex: \"method\",\n        key: 'method',\n        sorter: true,\n        render: (value) => INVOICE_PAYMENT_METHOD_DICTIONARY?.[value] || value,\n        width: 200,\n    },\n    {\n        title: \"Estado\",\n        dataIndex: \"status\",\n        key: 'status',\n        sorter: true,\n        width: 130,\n        render: (value) => (<Tag color={INVOICE_STATUS_COLOR?.[value] || ''} >\n            {INVOICE_STATUS_DICTIONARY?.[value] || value}\n        </Tag>)\n    },\n    {\n        title: \"Monto total\",\n        dataIndex: \"total_amount\",\n        key: 'total_amount',\n        sorter: true,\n        width: 130,\n        render: (value) => `$ ${numeral(value || \"\").format(\"0,0\")}`\n    },\n    {\n        title: \"Tipo\",\n        dataIndex: \"type\",\n        key: 'type',\n        sorter: true,\n        width: 120,\n        render: (value) => value == 'app_reservations' ? 'Reservas' : value == 'tmp_platform' ? 'TMP' : 'otras'\n    },\n\n    {\n        title: \"Fecha fin\",\n        dataIndex: \"date_end\",\n        key: 'date_end',\n        sorter: true,\n        render: (value, record) => (record?.method === INVOICE_PAYMENT_METHOD_NAMES.credit_card || record?.method === INVOICE_PAYMENT_METHOD_NAMES.bank_transfer) && value && moment(value).format(\"YYYY-MM-DD h:mm a\"),\n        width: 200,\n    },\n    {\n        title: \"Wompi reference\",\n        dataIndex: \"wompi_reference\",\n        key: 'wompi_reference',\n        sorter: true,\n        width: 150,\n    },\n    {\n        title: \"Ultimo intento de cobro\",\n        dataIndex: \"last_payment_intent_date\",\n        key: 'last_payment_intent_date',\n        sorter: true,\n        render: (value) => value && moment(value).format(\"YYYY-MM-DD h:mm a\"),\n        width: 200,\n    },\n];\n\nconst AdminInvoices = () => {\n    const invoicePaymentsService = getService('invoice-payments');\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [selectedRecords, setSelectedRecords] = useState([]);\n\n    const handleDownload = async () => {\n        const invoicePaymentsService = getService('invoice-payments');\n\n        await invoicePaymentsService.find({\n            query: {\n                $client: {\n                    exportExcelPendingBankTransfer: true,\n                }\n            }\n        })\n            .then((response) => window.open(response.path, '_blank'))\n            .catch((error) => message.error(error.message || 'No se pudo exportar los registros!'))\n    };\n\n    const handleUploadFinish = async (url, _id) => {\n        const invoicePaymentsService = getService('invoice-payments');\n\n        await invoicePaymentsService.find(\n            {\n                query: {\n                    $client: { importExcelCompletedBankTransferFilePath: `${url}` }\n                }\n            }\n        )\n            .then((response) => {\n                message.success(response.message);\n                setUpdateSource(!updateSource);\n            })\n            .catch((err) => message.error(err.message));\n    };\n\n    const handlePayPendingAndRejected = async ({ id }) => {\n\n        await invoicePaymentsService.find({\n            query: {\n                $client: {\n                    receiveByCreditCardInvoicePaymentId: id\n                }\n            }\n        }).catch((error) => {\n            message.error(error?.message || \"Ha ocurrido un error!\");\n        })\n    };\n\n    const handlePayPendingGroup = async ({ id }) => {\n        await invoicePaymentsService.find({\n            query: {\n                $client: {\n                    receiveByCreditCardInvoicePaymentId: id\n                }\n            }\n        }).catch((error) => {\n            message.error(error?.message || \"Ha ocurrido un error!\");\n        })\n    };\n\n    const tryToReceiveByCreditCardInvoice = async ({ selectedRecords }) => {\n        try {\n            const data = _.filter(selectedRecords, ({ method, status }) => method === INVOICE_PAYMENT_METHOD_NAMES.credit_card && (status === INVOICE_STATUS_DICTIONARY_NAMES.pending || status === INVOICE_STATUS_DICTIONARY_NAMES.rejected));\n\n            for (let index = 0; index < data.length; index++) {\n                await handlePayPendingAndRejected({ id: data[index]?.id })\n            }\n            message.info(\"Los pagos estan siendo procesados!\");\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve();\n                    setUpdateSource(!updateSource);\n                }, 8000);\n            });\n        } catch (error) {\n            message.error(error?.message || \"Ha ocurrido un error!\");\n        }\n    };\n\n    const tryToReceiveGroupInvoice = async ({ selectedRecords }) => {\n        try {\n            const idInvocices = _.map(selectedRecords, 'id').join(',')\n            await handlePayPendingGroup({id: idInvocices })\n            message.info(\"Los pagos estan siendo procesados!\");\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve();\n                    setUpdateSource(!updateSource);\n                }, 8000);\n            });\n        } catch (error) {\n            message.error(error?.message || \"Ha ocurrido un error!\");\n        }\n    };\n\n    const setNewStatus = async ({ id, newStatus }) => {\n        await invoicePaymentsService.patch(id, {\n            status: newStatus\n        })\n            .catch((error) => {\n                message.error(error?.message || \"Ha ocurrido un error!\");\n            });\n    };\n\n    const handleUpdateStatus = async ({ selectedRecords, newStatus }) => {\n        try {\n            const data = selectedRecords || [];\n            if (data.length) {\n\n                for (let index = 0; index < data.length; index++) {\n                    await setNewStatus({ id: data[index]?.id, newStatus })\n                }\n                setUpdateSource(!updateSource);\n                if (newStatus === INVOICE_STATUS_DICTIONARY_NAMES.completed) {\n                    message.success('Pagos completados exitosamente!');\n                } else {\n                    message.success('Pagos completados exitosamente!');\n                }\n            }\n\n        } catch (error) {\n            message.error(error?.message || \"Ha ocurrido un error!\");\n        }\n    };\n\n    // console.log('selectedRecordsselectedRecords', !_.isEmpty(selectedRecords) ? _.every(selectedRecords, ['establishment_branch_id', selectedRecords[0]?.establishment_branch_id]) && _.every(selectedRecords, ['status', selectedRecords[0]?.pending]): true)\n    console.log('selectedRecordsselectedRecords',  !_.every(selectedRecords, item => item.establishment_branch_id === selectedRecords[0]?.establishment_branch_id && item?.status === \"pending\" && item?.method == 'credit_card'),selectedRecords)\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                selection={true}\n                onChangeSelection={(_, selectedRecords) => {\n                    setSelectedRecords(selectedRecords);\n                }}\n                maxSelection={10}\n                custom={true}\n                source=\"invoice-payments\"\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    },\n                    method: {\n                        $nin: [INVOICE_PAYMENT_METHOD_NAMES.apparta_pay]\n                    },\n                    date_end:{\n                        $gt: moment('2023-08-31', 'YYYY-MM-DD').endOf('day').format()\n                    }\n                }}\n                searchField=\"q\"\n                searchText=\"Buscar\"\n                search={true}\n                permitFetch={true}\n                actions={{}}\n                updateSource={updateSource}\n                columns={columns}\n                extra={\n                    <Row gutter={[8, 8]}>\n                        <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                style={{ borderRadius: '0.5rem' }}\n                                onClick={handleDownload}\n                            >\n                                Exportar pagos por débito automático pendientes\n                            </AsyncButton>\n                        </Col>\n                        <Col>\n                            <FileUploader\n                                preview={false}\n                                path={`invoicesPayments/import/`}\n                                style={{ borderRadius: '0.5rem', height: '32px !important' }}\n                                title='Importar pagos'\n                                allowTypes={['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']}\n                                onFinish={(url) =>\n                                    handleUploadFinish(url)\n                                }\n                            />\n                        </Col>\n                        <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                style={{ borderRadius: '0.5rem' }}\n                                disabled={ _.isEmpty(selectedRecords)}\n                                onClick={async () => await handleUpdateStatus({ selectedRecords: selectedRecords, newStatus: INVOICE_STATUS_DICTIONARY_NAMES.completed })}\n                            >\n                                Completar pago\n                            </AsyncButton>\n                        </Col>\n                        <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                danger\n                                style={{ borderRadius: '0.5rem' }}\n                                disabled={ _.isEmpty(selectedRecords)}\n                                onClick={async () => await handleUpdateStatus({ selectedRecords: selectedRecords, newStatus: INVOICE_STATUS_DICTIONARY_NAMES.rejected })}\n                            >\n                                Rechazar pago\n                            </AsyncButton>\n                        </Col>\n                        <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                style={{ borderRadius: '0.5rem' }}\n                                disabled={\n                                    _.some(selectedRecords, ({ method, status }) => method !== INVOICE_PAYMENT_METHOD_NAMES.credit_card || (status !== INVOICE_STATUS_DICTIONARY_NAMES.pending && status !== INVOICE_STATUS_DICTIONARY_NAMES.rejected)) || _.isEmpty(selectedRecords)\n                                }\n                                onClick={async () => await tryToReceiveByCreditCardInvoice({ selectedRecords: selectedRecords })}\n                            >\n                                Cobrar\n                            </AsyncButton></Col>\n                        <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                style={{ borderRadius: '0.5rem' }}\n                                disabled={\n                                    // !_.isEmpty(selectedRecords) ? selectedRecords.some(item => item.establishment_branch_id !== selectedRecords[0]?.establishment_branch_id) : true\n                                    !_.isEmpty(selectedRecords) ? !_.every(selectedRecords, item => item.establishment_branch_id === selectedRecords[0]?.establishment_branch_id && item.status === \"pending\"  && item?.method == 'credit_card') : true\n                                    //selectedRecords.some(item => item.establishment_branch_id !== selectedRecords[0]?.establishment_branch_id  && item.status !== 'pending')\n                                    // _.every(selectedRecords, ['establishment_branch_id', selectedRecords[0]?.establishment_branch_id]) ||  _.isEmpty(selectedRecords)\n                                }\n                                onClick={async () => await tryToReceiveGroupInvoice({ selectedRecords: selectedRecords })}\n                            >\n                                Cobrar agrupados {!_.isEmpty(selectedRecords) ? _.every(selectedRecords, item => item.establishment_branch_id === selectedRecords[0]?.establishment_branch_id && item.status === \"pending\"  && item?.method == 'credit_card') ?  `$${numeral(_.sumBy(selectedRecords, 'total_amount_tax_incl') || '').format(\"0,0\")}` : '' : '' }\n                            </AsyncButton></Col>\n                            <Col>\n                            <AsyncButton\n                                type=\"primary\"\n                                style={{ borderRadius: '0.5rem' }}\n                                disabled={ _.isEmpty(selectedRecords)}\n                                onClick={async () => await handleUpdateStatus({ selectedRecords: selectedRecords, newStatus: INVOICE_STATUS_DICTIONARY_NAMES.crossed })}\n                            >\n                                Cruzar pagos\n                            </AsyncButton>\n                        </Col>\n                    </Row>\n                }\n\n                filters={\n                    <>\n                        <SelectField\n                            alwaysOn\n                            source=\"status\"\n                            name=\"status\"\n                            label=\"Estado\"\n                            placeholder=\"Estado\"\n                            allowEmpty\n                            choices={INVOICE_STATUS}\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                        <SelectField\n                            alwaysOn\n                            source=\"method\"\n                            name=\"method\"\n                            label=\"Metodo de pago\"\n                            placeholder=\"Metodo de pago\"\n                            allowEmpty\n                            choices={INVOICE_PAYMENT_METHOD}\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                        <SelectField\n                            alwaysOn\n                            source=\"type\"\n                            name=\"type\"\n                            label=\"Tipo\"\n                            placeholder=\"Tipo\"\n                            allowEmpty\n                            choices={TYPE_RESERVATION_STATUS}\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n\n                    </>\n                }\n            />\n        </Layout.Content>\n    )\n}\n\nexport default AdminInvoices;\n"],"sourceRoot":""}