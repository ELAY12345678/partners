{"version":3,"sources":["views/groups/Banners.jsx","views/groups/hooks/useEstablishmentCampaigns.js","views/groups/index.jsx"],"names":["STATUS","id","name","columns","_ref","onRemove","onEdit","title","dataIndex","sorter","width","render","value","_jsx","_Tag","color","children","record","_","map","tables_partners","_ref2","key","establishment_branch_address","establishment_name","_jsxs","length","_Row","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","Group","_ref3","establishment_id","tablesPartnersGroupService","getService","tablesPartnersService","establishmentBranchesService","drawerVisible","setDrawerVisible","useState","selectedGroup","setSelectedGroup","updateSource","setUpdateSource","establishmentBranchSelected","setEstablishmentBranchSelected","establishmentBranchesOptions","setEstablishmentBranchesOptions","currentPage","setCurrentPage","debounceGetEstablishmentBranches","debounce","find","query","q","$client","fullName","then","data","sortBy","_ref4","full_name","catch","err","_message","error","maxWait","establishmentCampaigns","getEstablishmentCampaigns","loadingEstablishmentCampaigns","tables_partners_groups_id","page","source","filters","establishmentBranchesCampaignsService","setEstablishmentCampaigns","setLoadingEstablishmentCampaigns","_objectSpread","$limit","$skip","_updatedData$","total","updatedData","entry","partners","partner","matchingEntry","d","tables_partners_establishment_id","establishment_branch_id","tables_partners_establishment_branch_id","message","useEffect","useEstablishmentCampaigns","_Fragment","Grid","custom","filterDefaultValues","showTablesPartners","$select","searchField","searchText","search","permitFetch","actions","async","_ref5","remove","success","forEach","extra","RoundedButton","AiOutlinePlus","_Drawer","concat","placement","visible","onClose","setTimeout","SimpleForm","textAcceptButton","initialValues","onSubmit","form","dataFormat","pay_account","undefined","patch","dataTablesPartnersGroup","status","create","console","log","response","e","_Input","flex","label","validations","required","_Select","size","_ref8","index","Option","style","gap","_Col","showSearch","placeholder","allowClear","disabled","onSearch","onClear","onSelect","optionFilterProp","filterOption","input","option","toLowerCase","includes","_ref9","JSON","stringify","_ref6","parse","setEstablishmentBranchesCampaign","_Table","loading","dataSource","_ref0","establishments_branchs_address","_ref7","removeEstablishmentBranchesCampaign","pagination","current","showSizeChanger","pageSize","onChange","showTotal","GroupManager","_Layout","Content","height","overflow","padding","Banners"],"mappings":"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","file":"static/js/68.f91ceca0.chunk.js","sourcesContent":["import { Button, Col, Drawer, Input, message, Row, Select, Table, Tag } from 'antd';\nimport _, { debounce } from 'lodash';\nimport React, { useState } from 'react';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { Grid } from \"../../components/com\";\nimport { SimpleForm } from '../../components/com/form/SimpleForm';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { getService } from '../../services';\nimport { useEstablishmentCampaigns } from \"./hooks/useEstablishmentCampaigns\";\n\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onRemove, onEdit }) => [\n    {\n        title: \"Id\",\n        dataIndex: \"id\",\n        sorter: true,\n        width: 100,\n    },\n    {\n        title: \"Nombre\",\n        dataIndex: \"name\",\n        sorter: true,\n        width: 200,\n    },\n    {\n        title: \"Estado\",\n        dataIndex: \"status\",\n        sorter: true,\n        width: 100,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Establecimientos\",\n        dataIndex: \"tables_partners\",\n        sorter: true,\n        width: 'auto',\n        render: (value, record) =>\n            _.map(record?.tables_partners, ({ establishment_branch_address, establishment_name }, key) => (\n              <div>\n                {establishment_name + ' - ' +establishment_branch_address} \n                {key + 1 === record?.tables_partners.length ? '' : ' , '}\n              </div>\n            )),\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        width: 150,\n        render: (id, record) => {\n            return (\n                <Row>\n                    <Button\n                        type=\"text\"\n                        onClick={() => onEdit(record)}\n                        icon={<AiOutlineEdit />}\n                    />\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </Row>\n            );\n        },\n    }\n];\n\nconst Group = ({ establishment_id }) => {\n    const tablesPartnersGroupService = getService('tables-partners-groups');\n    const tablesPartnersService = getService('tables-partners');\n    const establishmentBranchesService = getService('establishments-branchs');\n    // const [establishmentBranches, loadingEstablishmentBranches] = useEstablishmentBranches({ establishment_id: 1 });\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedGroup, setSelectedGroup] = useState();\n    const [updateSource, setUpdateSource] = useState(false);\n    const [establishmentBranchSelected, setEstablishmentBranchSelected] = useState();\n    const [establishmentBranchesOptions, setEstablishmentBranchesOptions] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n       const getEstablishmentBranches = (value) => {\n            if (value === '') {\n                setEstablishmentBranchesOptions([])\n                setCurrentPage(1)\n                return;\n            }\n            establishmentBranchesService.find({\n                query: {\n                    q: value,\n                    $client: {\n                        fullName: true\n                    },\n                }\n            })\n                .then((data) => {\n                    setEstablishmentBranchesOptions(_.sortBy(data, [({ full_name }) => full_name]));\n                })\n                .catch((err) => message.error(err));\n        };\n    \n  const debounceGetEstablishmentBranches = debounce(getEstablishmentBranches, 500, { maxWait: 800 });\n    const onRemove = async ({ id }) => {\n        await tablesPartnersGroupService.remove(id)\n            .then(() => {\n                message.success(\"Sucursal eliminada!\");\n                setUpdateSource(!updateSource);\n                getEstablishmentCampaigns()\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el Sucursal! ' + error?.message)\n            )\n    };\n\n    const onEdit = (record) => {\n        _.forEach(record, (value, key) => {\n            if (value === null) {\n                delete record[key]\n            }\n        })\n        setSelectedGroup(record);\n        setDrawerVisible(true);\n    };\n\n    // const getTablesPartner = ()=>{\n    //     .find({\n    //         query: {\n    //             $client:{\n    //                 showTablesPartners: true\n    //             },\n    //             $select: [\"id\", \"name\",\"status\"]\n    //         }\n    //     })\n        \n    // }\n\n    const [establishmentCampaigns, getEstablishmentCampaigns, loadingEstablishmentCampaigns]\n        = useEstablishmentCampaigns({\n            source: \"tables-partners\",\n            tables_partners_groups_id: selectedGroup?.id || null,//selectedCampaign?.id\n            page: currentPage,\n            filters: {\n                tables_partners_groups_id: selectedGroup?.id,//selectedCampaign?.id\n            }\n        });\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n        if (selectedGroup && selectedGroup.id) {\n            const dataFormat = {\n                ...data,\n                pay_account: undefined,\n                // meta_tables_partners: establishmentBranches.filter((item)=> data?.meta_tables_partners.includes(item?.id))\n            }\n            await tablesPartnersGroupService.patch(selectedGroup.id, dataFormat)\n                .then(() => {\n                    message.success(\"Grupo actualizado!\");\n                    setDrawerVisible(false);\n                    setSelectedGroup();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            try {\n                const dataTablesPartnersGroup = {\n                    name: data?.name,\n                    status:  data?.status\n                }\n                await tablesPartnersGroupService.create(dataTablesPartnersGroup)\n                    .then(async(response) => {\n                        console.log('reponse tablespartners group',response?.id)\n                            message.success(\"Grupo Creado!\");\n                            setUpdateSource(!updateSource);\n                            setDrawerVisible(false);\n                        // const dataFormat = establishmentBranches.filter((item)=> data?.meta_tables_partners.includes(item?.id))\n                        //     .map(({ pay_account,id , ...rest }) => ({\n                        //         // ...rest,\n                        //         establishment_branch_id: id,\n                        //         establishment_id: pay_account?.establishment_id,\n                        //         tables_partners_groups_id: response?.id,\n                        //         // establishment_id: meta_tables_partners.map(p => p.pay_account?.establishment_id)\n                        //     }))\n                        //     console.log('dataFormatdataFormat====>>>>>',dataFormat)\n                        //     await Promise.all(\n                        //         _.map(dataFormat, (item) => crateDiscounts(item)),\n                        //     );\n\n\n\n\n                        // await tablesPartnersService.create(dataFormat)\n                        // .then(() => {\n                        //     message.success(\"Grupo Creado!\");\n                        //     setDrawerVisible(false);\n                        //     setUpdateSource(!updateSource);\n                        // })\n                    })\n                    .catch(err => message.error(err.message));\n            } catch (e){\n                console.log('datadatadata e',e)\n            }\n        }\n    };\n\n      const setEstablishmentBranchesCampaign = async ({ establishmentBranchSelected, tables_partners_groups_id }) => {\n        console.log('establishmentBranchSelectedestablishmentBranchSelected',establishmentBranchSelected)\n        const data= {...(JSON.parse(establishmentBranchSelected)),tables_partners_groups_id}\n            await tablesPartnersService.create(data).then(() => {\n                    message.success('Establecimiento añadido correctamente!');\n                    setEstablishmentBranchSelected();\n                    setUpdateSource(!updateSource);\n                    getEstablishmentCampaigns();\n                    \n                }).catch((error) => {\n                    message.error(error?.message);\n                })\n       };\n   \n   const removeEstablishmentBranchesCampaign = ({ id }) => {\n        tablesPartnersService.remove(id).then(() => {\n            message.success('Establecimiento eliminado correctamente!');\n            setEstablishmentBranchSelected();\n            setUpdateSource(!updateSource);\n            getEstablishmentCampaigns();\n        }).catch((error) => {\n            message.error(error?.message);\n        })\n    };\n    return (\n        <>\n            <Grid\n                custom={true}\n                source=\"tables-partners-groups\"\n                filterDefaultValues={{\n                    // status: \"active\",\n                    // $limit: 100000,\n                    $client:{\n                        showTablesPartners: true\n                    },\n                    $select: [\"id\", \"name\",\"status\"]\n                }}\n                searchField=\"name\"\n                searchText=\"Grupo...\"\n                search={true}\n                permitFetch={true}\n                actions={{}}\n                updateSource={updateSource}\n                columns={columns({ onRemove, onEdit })}\n                extra={\n                    <div>\n                        <RoundedButton\n                            icon={<AiOutlinePlus />}\n                            type={\"primary\"}\n                            onClick={() => {\n                                setDrawerVisible(true)\n                                setSelectedGroup();\n                                getEstablishmentCampaigns();\n                            }}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedGroup ? 'Editar' : 'Crear'} Grupo`}\n                    placement=\"right\"\n                    width={520}\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setSelectedGroup();\n                        setCurrentPage(1)\n                        setEstablishmentBranchesOptions([])\n                        setTimeout(() => {\n                            setDrawerVisible(false);\n                        }, 500);\n                        \n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedGroup}\n                        onSubmit={handleSubmit}\n                        // source=\"banners\"\n                        // id={selectedBanner.id}\n                    >\n                        <Input\n                            flex={1}\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        {/* <Select\n                            flex={1}\n                            mode=\"multiple\"\n                            size='large'\n                            label=\"Sucursales\"\n                            name='meta_tables_partners'\n                            loading={loadingEstablishmentBranches}\n                        >\n                            {\n                                _.map(establishmentBranches, ({ id, address }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {address}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select> */}\n                                <Row style={{ width: '100%',gap:'4px' }}>\n                                        <Col flex=\"auto\">\n                                            <Select\n                                                showSearch\n                                                label=\"Sucursal\"\n                                                placeholder=\"Añadir sucursal\"\n                                                allowClear\n                                                disabled={!selectedGroup?.id}\n                                                onSearch={debounceGetEstablishmentBranches}\n                                                value={establishmentBranchSelected}\n                                                onClear={() => setEstablishmentBranchSelected()}\n                                                onSelect={(value) => {\n                                                    setEstablishmentBranchSelected(value);\n                                                }}\n                                                optionFilterProp=\"children\"\n                                                style={{ width: '100%' }}\n                                                filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                                            >\n                                                {\n                                                    _.map(establishmentBranchesOptions, ({ establishment_branch_id, establishment_id, full_name }, index) =>\n                                                        <Select.Option key={index} value={JSON.stringify({ establishment_branch_id, establishment_id })}>\n                                                            {full_name}\n                                                        </Select.Option>\n                                                    )\n                                                }\n                                            </Select>\n                                        </Col>\n                                        <Col flex='none'>\n                                            <AsyncButton\n                                                type=\"primary\"\n                                                disabled={!selectedGroup?.id}\n                                                onClick={() => setEstablishmentBranchesCampaign({ establishmentBranchSelected, tables_partners_groups_id: selectedGroup?.id })}\n                                            >\n                                                Añadir\n                                            </AsyncButton>\n                                        </Col>\n                                    </Row>\n                                    {/* <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} /> */}\n                        \n                                    \n                        <Table\n                            style={{width:'100%'}}\n                            loading={loadingEstablishmentCampaigns}\n                            dataSource={establishmentCampaigns?.data || []}\n                            columns={[\n                                {\n                                    title: 'Establecimiento',\n                                    dataIndex: 'establishment_name',\n                                    key: 'establishment_name',\n                                    render: (establishment_name, { establishments_branchs_address }) => establishment_name + ' - ' + establishments_branchs_address\n                                },\n                                {\n                                    title: 'Acciones',\n                                    dataIndex: 'id',\n                                    key: 'id',\n                                    width: 100,\n                                    render: (id) =>\n                                        <AsyncButton\n                                            type=\"link\"\n                                            onClick={() => removeEstablishmentBranchesCampaign({ id })}\n                                            icon={<AiOutlineDelete />}\n                                            confirmText=\"Desea eliminar?\"\n                                        >\n                                        </AsyncButton>\n                                },\n                            ]}\n                            pagination={{\n                                current: currentPage,\n                                showSizeChanger: false,\n                                pageSize: 9,\n                                onChange: (page) => {\n                                    setCurrentPage(page);\n                                },\n                                total: establishmentCampaigns?.total || 0,\n                                showTotal: total => {\n                                    return `Total ${total} record${total > 1 ? \"s\" : \"\"}`;\n                                },\n                            }}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    );\n}\n\nexport default Group;","import { message } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { getService } from '../../../services';\nexport const useEstablishmentCampaigns = ({ tables_partners_groups_id, page, source, filters }) => {\n\n    const establishmentBranchesCampaignsService = getService(source);\n\n    const [establishmentCampaigns, setEstablishmentCampaigns] = useState({});\n    const [loadingEstablishmentCampaigns, setLoadingEstablishmentCampaigns] = useState(false);\n\n    const getEstablishmentCampaigns = () => {\n        setLoadingEstablishmentCampaigns(true);\n        try {\n            if(filters?.tables_partners_groups_id ==null){\n                setEstablishmentCampaigns([])\n                setLoadingEstablishmentCampaigns(false);\n                return \n            }\n            establishmentBranchesCampaignsService.find({\n                query: {\n                    ...filters,\n                    $limit: 9,\n                    $skip: (page - 1) * 9,\n                }\n            }).then(({ data, total }) => {\n                const updatedData = data.map(entry => ({\n                    ...entry,\n                    partners: entry.partners.map(partner => {\n                        // Buscar el ID en data donde coincidan los valores\n                        const matchingEntry = data.find(d => \n                            d.establishment_id === partner.tables_partners_establishment_id &&\n                            d.establishment_branch_id === partner.tables_partners_establishment_branch_id\n                        );\n                        return {\n                            ...partner,\n                            id: matchingEntry ? matchingEntry.id : null // Agregar ID si coincide\n                        };\n                    })\n                }));\n                \n                setEstablishmentCampaigns({ data: updatedData?.[0]?.partners || [], total });\n                setLoadingEstablishmentCampaigns(false);\n            }).catch(() => {\n                setEstablishmentCampaigns([]);\n                setLoadingEstablishmentCampaigns(false);\n            });\n        } catch (error){\n            message.error(error.message)\n            setEstablishmentCampaigns([]);\n            setLoadingEstablishmentCampaigns(false);\n        }\n       \n    }\n\n    useEffect(() => {\n        if (tables_partners_groups_id)\n            getEstablishmentCampaigns();\n    }, [tables_partners_groups_id, page])\n\n    return [\n        establishmentCampaigns,\n        getEstablishmentCampaigns,\n        loadingEstablishmentCampaigns\n    ]\n}","import { Layout } from 'antd';\nimport React from 'react';\nimport Banners from './Banners';\n\nconst GroupManager = () => {\n\n    // const [banners, loadingBanners, getBanners] = useBanners();\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Banners  />\n        </Layout.Content>\n    );\n}\n\nexport default GroupManager;"],"sourceRoot":""}