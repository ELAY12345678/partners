{"version":3,"sources":["views/zones/index.jsx","hooks/useCities.js"],"names":["STATUS","id","name","columns","_ref","onEdit","onRemove","cities","dataIndex","key","title","sorter","render","value","_$find","_","find","_ref2","_jsx","_Tag","color","children","record","_jsxs","_Fragment","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","Zones","zonesService","getService","drawerVisible","setDrawerVisible","useState","selectedZone","setSelectedZone","updateSource","setUpdateSource","useCities","_Layout","Content","style","height","overflow","padding","Grid","source","filterDefaultValues","$sort","async","_ref3","remove","then","_message","success","catch","error","message","actions","extra","RoundedButton","AiOutlinePlus","_Drawer","concat","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","err","data","form","patch","create","_Input","flex","label","validations","required","_Select","size","map","_ref4","index","Option","_InputNumber","_ref5","citiesService","setCities","loadingCities","setLoadingCities","useEffect","query","$limit"],"mappings":"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","file":"static/js/54.3632c550.chunk.js","sourcesContent":["import { Button, Drawer, Input, InputNumber, Layout, message, Select, Tag } from 'antd';\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { Grid } from '../../components/com';\nimport { SimpleForm } from '../../components/com/form/';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { useCities } from '../../hooks/useCities';\nimport { getService } from '../../services';\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onEdit, onRemove, cities }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"name\",\n        key: \"name\",\n        title: \"Nombre\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"city_id\",\n        key: \"city_id\",\n        title: \"Ciudad\",\n        render: (value) => _.find(cities, ({ id }) => value === id)?.name || ''\n    },\n    {\n        dataIndex: \"position\",\n        key: \"position\",\n        title: \"PosiciÃ³n\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"lat\",\n        key: \"lat\",\n        title: \"Lat\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"lng\",\n        key: \"lng\",\n        title: \"Lng\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"status\",\n        key: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n];\n\nconst Zones = () => {\n\n    const zonesService = getService('zones');\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedZone, setSelectedZone] = useState();\n    const [updateSource, setUpdateSource] = useState(false);\n\n    const [cities] = useCities();\n\n\n    const onEdit = (record) => {\n        setSelectedZone(record);\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        await zonesService.remove(id)\n            .then(() => {\n                message.success(\"Zona eliminada!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar la zona! ' + error?.message)\n            )\n    };\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n\n        if (selectedZone && selectedZone.id) {\n            await zonesService.patch(selectedZone.id, data)\n                .then(() => {\n                    message.success(\"Zona actualizada!\");\n                    setSelectedZone();\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await zonesService.create(data)\n                .then(() => {\n                    message.success(\"Zona creada correctamente!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                source='zones'\n                filterDefaultValues={{\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove, cities })}\n                actions={{}}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedZone ? 'Editar' : 'Crear'} Zona`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedZone();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedZone}\n                        onSubmit={handleSubmit}\n                    >\n                        <Input\n                            flex={0.5}\n                            name='id'\n                            label='Id'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Id es requerido`\n                                }\n                            ]}\n                        />\n                        <Input\n                            flex={0.5}\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='city_id'\n                            label=\"Ciudad\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Ciudad es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(cities, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <InputNumber\n                            flex={0.5}\n                            size='large'\n                            name='position'\n                            label='PosiciÃ³n'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `PosiciÃ³n es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={0.5}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <InputNumber\n                            flex={0.5}\n                            name='lat'\n                            label=\"Latitud\"\n                        />\n                        <InputNumber\n                            flex={0.5}\n                            name='lng'\n                            label=\"Longitud\"\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default Zones;","import { useEffect, useState } from 'react';\nimport { message } from 'antd';\nimport { getService } from '../services';\n\nexport const useCities = () => {\n    const citiesService = getService(\"cities\");\n\n    const [cities, setCities] = useState([]);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    useEffect(() => {\n        setLoadingCities(true);\n        citiesService\n            .find({\n                query: {\n                    $limit: 100000,\n                    $sort: {\n                        name: 1,\n                    },\n                }\n            })\n            .then(({ data }) => {\n                setCities(data);\n                setLoadingCities(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n                setCities([]);\n                setLoadingCities(false);\n            });\n    }, []);\n\n\n    return [\n        cities,\n        loadingCities\n    ];\n}"],"sourceRoot":""}