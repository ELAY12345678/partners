{"version":3,"sources":["views/cms/index.jsx"],"names":["STATUS","id","name","columns","_ref","onEdit","onRemove","dataIndex","key","title","sorter","width","render","value","_jsx","_Tag","color","children","record","_jsxs","_Fragment","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","Cms","cmsService","getService","drawerVisible","setDrawerVisible","useState","updateSource","setUpdateSource","selectedCms","setSelectedCms","_Layout","Content","style","height","overflow","padding","Grid","source","filterDefaultValues","$sort","actions","async","_ref2","remove","then","_message","success","catch","error","message","extra","RoundedButton","AiOutlinePlus","_Drawer","concat","placement","size","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","err","data","form","patch","create","_Input","flex","label","validations","required","TextArea","autoSize","_Select","_","map","_ref3","index","Option"],"mappings":"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","file":"static/js/63.09871556.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Drawer, Input, Layout, message, Select, Tag } from 'antd';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { Grid } from '../../components/com';\nimport { SimpleForm } from '../../components/com/form/';\nimport _ from 'lodash';\nimport { getService } from '../../services';\nimport AsyncButton from '../../components/asyncButton';\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onEdit, onRemove }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n        width: 150,\n    },\n    {\n        dataIndex: 'title',\n        key: 'title',\n        title: 'Titulo',\n        sorter: true,\n    },\n    {\n        dataIndex: \"status\",\n        key: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        width: 200,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        width: 100,\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n];\n\nconst Cms = () => {\n\n    const cmsService = getService('cms');\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n    const [selectedCms, setSelectedCms] = useState();\n\n    const onEdit = (record) => {\n        setSelectedCms(record);\n        setDrawerVisible(true);\n    }\n\n    const onRemove = async ({ id }) => {\n        await cmsService.remove(id)\n            .then(() => {\n                message.success(\"Cms eliminado!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el cms! ' + error?.message)\n            )\n    }\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n        if (selectedCms && selectedCms.id) {\n            await cmsService.patch(selectedCms.id, data)\n                .then(() => {\n                    message.success(\"Cms actualizado!\");\n                    setDrawerVisible(false);\n                    setSelectedCms();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await cmsService.create(data)\n                .then(() => {\n                    message.success(\"Cms creado!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                source=\"cms\"\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    }\n                }}\n                updateSource={updateSource}\n                actions={{}}\n                columns={columns({ onEdit, onRemove })}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedCms ? 'Editar' : 'Crear'} Cms`}\n                    placement=\"right\"\n                    size='large'\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedCms();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedCms}\n                        onSubmit={handleSubmit}\n                    >\n                        <Input\n                            flex={1}\n                            name='title'\n                            label='Titulo'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Titulo es requerido`\n                                }\n                            ]}\n                        />\n                        <Input.TextArea\n                            flex={1}\n                            name='body'\n                            label=\"DescripciÃ³n\"\n                            autoSize\n                        />\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default Cms;"],"sourceRoot":""}