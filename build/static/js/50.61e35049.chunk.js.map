{"version":3,"sources":["views/establishments/index.jsx","hooks/useCities.js"],"names":["STATUS","id","name","columns","_ref","onRemove","title","dataIndex","key","sorter","render","value","_jsx","_Avatar","size","alt","src","concat","S3_PATH_IMAGE_HANDLER","window","imageShark","url","width","height","parseFloat","toFixed","_Tag","color","children","_jsxs","_Fragment","Link","to","_Button","type","shape","icon","AiOutlineEye","AsyncButton","onClick","AiOutlineDelete","confirmText","Establishments","cities","loadingCities","useCities","drawerVisible","setDrawerVisible","useState","updateSource","setUpdateSource","_Layout","Content","style","overflow","padding","Grid","source","searchField","searchText","search","filterDefaultValues","$sort","$select","$client","skipJoins","async","_ref2","establishmentService","getService","remove","then","_message","success","catch","err","error","message","permitFetch","actions","filters","SelectField","alwaysOn","loading","label","placeholder","allowEmpty","choices","extra","RoundedButton","AiOutlinePlus","_Drawer","placement","visible","onClose","SimpleForm","textAcceptButton","onSubmit","_Input","flex","validations","required","_Select","_","map","_ref3","index","Option","citiesService","setCities","setLoadingCities","useEffect","find","query","$limit","data"],"mappings":"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","file":"static/js/50.61e35049.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Avatar, Button, Drawer, Input, Layout, message, Select, Tag } from 'antd';\nimport { S3_PATH_IMAGE_HANDLER } from '../../constants';\nimport { Grid } from '../../components/com';\nimport { useCities } from '../../hooks/useCities';\nimport SelectField from \"../../components/com/form/SelectField\";\nimport { AiOutlineDelete, AiOutlineEye, AiOutlinePlus } from 'react-icons/ai';\nimport { SimpleForm } from '../../components/com/form/';\nimport _ from 'lodash';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { Link } from 'react-router-dom';\nimport AsyncButton from '../../components/asyncButton';\nimport { getService } from '../../services';\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onRemove }) => [\n    {\n        title: \"Id\",\n        dataIndex: \"id\",\n        key: \"id\",\n        sorter: true,\n    },\n    {\n        title: \"Foto\",\n        dataIndex: \"logo_path\",\n        key: \"logo_path\",\n        render: (value) =>\n            <Avatar\n                size=\"large\"\n                alt={'Avatar'}\n                src={`${S3_PATH_IMAGE_HANDLER}/${window.imageShark({\n                    url: value,\n                    width: 64,\n                    height: 64,\n                })}`}\n            />\n    },\n    {\n        title: \"Nombre\",\n        dataIndex: \"name\",\n        key: \"name\",\n        sorter: true,\n    },\n    {\n        title: \"PuntuaciÃ³n\",\n        dataIndex: \"total_rating_score\",\n        key: \"total_rating_score\",\n        sorter: true,\n        render: (value) => parseFloat(value).toFixed(1)\n    },\n    {\n        title: \"Rating\",\n        dataIndex: \"total_rating_quantity\",\n        key: \"total_rating_quantity\",\n        sorter: true,\n    },\n    {\n        title: \"Estado\",\n        dataIndex: \"status\",\n        key: \"status\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color={value === 'inactive' ? 'red' : 'orange'}>{value}</Tag>\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: \"id\",\n        key: \"_id\",\n        render: (id) => <>\n            <Link\n                to={`/dashboard/management/establishments/${id}`}\n            >\n                <Button type='text' shape='circle' icon={<AiOutlineEye />} />\n            </Link>\n            <AsyncButton\n                type=\"link\"\n                onClick={() => onRemove({ id })}\n                icon={<AiOutlineDelete />}\n                confirmText=\"Desea eliminar?\"\n            >\n            </AsyncButton>\n        </>\n\n    },\n];\n\nconst Establishments = () => {\n\n    const [cities, loadingCities] = useCities();\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n\n    const onRemove = async ({ id }) => {\n        const establishmentService = getService('establishments');\n        await establishmentService.remove(id)\n            .then(() => {\n                message.success(\"Restaurante eliminado!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch(err => message.error(err.message));\n    };\n\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                source='establishments'\n                searchField=\"q\"\n                searchText=\"Restaurante...\"\n                search={true}\n                updateSource={updateSource}\n                filterDefaultValues={{\n                    $sort: {\n                        id: 1,\n                    },\n                    $select: ['id', 'name', 'logo_path', 'total_rating_score', 'total_rating_quantity', 'status'],\n                    $client: {\n                        skipJoins: true\n                    }\n                }}\n                columns={columns({ onRemove })}\n                permitFetch={true}\n                actions={{}}\n                filters={\n                    <>\n                        <SelectField\n                            alwaysOn\n                            loading={loadingCities}\n                            source=\"q_establishmnet_branch_city_id\"\n                            name=\"q_establishmnet_branch_city_id\"\n                            label=\"q_establishmnet_branch_city_id\"\n                            placeholder=\"Ciudad\"\n                            allowEmpty\n                            choices={cities}\n                            size=\"medium\"\n                            style={{\n                                width: '15em'\n                            }}\n                        />\n                    </>\n                }\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={'Crear Restaurante'}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                    }}\n                >\n                    <SimpleForm\n                        source='establishments'\n                        textAcceptButton='Crear'\n                        onSubmit={() => {\n                            setDrawerVisible(false);\n                            setUpdateSource(!updateSource);\n                        }}\n                    >\n                        <Input\n                            flex={1}\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default Establishments;","import { useEffect, useState } from 'react';\nimport { message } from 'antd';\nimport { getService } from '../services';\n\nexport const useCities = () => {\n    const citiesService = getService(\"cities\");\n\n    const [cities, setCities] = useState([]);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    useEffect(() => {\n        setLoadingCities(true);\n        citiesService\n            .find({\n                query: {\n                    $limit: 100000,\n                    $sort: {\n                        name: 1,\n                    },\n                }\n            })\n            .then(({ data }) => {\n                setCities(data);\n                setLoadingCities(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n                setCities([]);\n                setLoadingCities(false);\n            });\n    }, []);\n\n\n    return [\n        cities,\n        loadingCities\n    ];\n}"],"sourceRoot":""}