{"version":3,"sources":["views/payAccountHistory/TableDataPayments.jsx","views/payAccountHistory/IncomePayments.jsx","views/payAccountHistory/OutputPayments.jsx","views/payAccountHistory/BankAccounts.jsx","views/payAccountHistory/index.jsx","views/payAccountHistory/hooks/useTotalPaymentsByAccountId.js"],"names":["STATUS","id","name","color","TableDataPayments","_ref3","source","filterDefaultValues","permitFetch","updateStatistic","pay_account_id","expandable","updateSource","setUpdateSource","useState","drawerVisible","setDrawerVisible","columns","title","dataIndex","key","sorter","render","record","concat","first_name","last_name","user_id","_record$establishment","_record$establishment2","establishment","establishment_branch","address","keys","moment","subtract","format","value","status","_","find","_ref4","_jsx","_Tag","children","_jsxs","style","fontSize","numeral","align","_Fragment","Grid","_objectSpread","$sort","createdAt","actions","filter","IncomePayments","_ref","OutputPayments","_ref2","BankAccounts","PaymentsDetails","establishmentFilters","useSelector","dashboardReducer","currentUser","appReducer","user","setPayAccountId","userEstablishment","setUserEstablishment","totalPaymentsByAccountId","loadingTotalPaymentsByAccountId","getTotalPaymentsByAccountId","rawQueryService","getService","SetTotalPaymentsByAccountId","SetLoadingTotalPaymentsByAccountId","query","$client","totalPaymentsUserIdByPayAccountId","then","response","catch","error","_message","message","useEffect","useTotalPaymentsByAccountId","serviceReportIncomeExpenses","payAccountService","establishment_branch_id","async","$limit","_response$data","_response$data$","data","length","getPayAccount","establishment_id","role","user_establishment_branch","permissionsv2","includes","Number","_Layout","Content","height","overflow","padding","_Row","gutter","_Col","AiOutlineDollarCircle","size","_Typography","Title","level","margin","_Divider","background","borderTop","marginTop","marginBottom","span","Box","_Statistic","wallet_in","precision","loading","wallet_out","balance","justify","AsyncButton","type","borderRadius","onClick","window","open","path","RiFileExcel2Fill","TabsStyled","defaultActiveKey","_Tabs","TabPane","tab"],"mappings":"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","file":"static/js/70.b7786ac3.chunk.js","sourcesContent":["import _ from 'lodash';\nimport { Drawer, Input, InputNumber, Select, Tag, DatePicker, message } from 'antd';\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport { useState } from \"react\";\nimport { AiOutlinePlus } from 'react-icons/ai';\nimport { Grid } from \"../../components/com\";\nimport { SimpleForm } from '../../components/com/form/';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport { getService } from '../../services';\n\nconst STATUS = [\n    {\n        id: 'completed',\n        name: 'Completado',\n        color: 'success'\n    },\n    {\n        id: 'pending',\n        name: 'Pendiente',\n        color: 'processing'\n    },\n    {\n        id: 'rejected',\n        name: 'Rechazado',\n        color: 'error'\n    },\n];\n\nconst OUTPUT_TYPE = [\n    { id: \"bank\", name: \"Bancario\" },\n    { id: \"administration\", name: \"Administrativo\" },\n    { id: \"event\", name: \"Evento\" },\n    { id: \"consumption\", name: \"Consumo\" },\n    { id: \"reservation_commissions\", name: \"Comisión de reservas\" },\n];\n\nconst INCOME_TYPE = [\n    { id: \"event\", name: \"Evento\" },\n    { id: \"administration\", name: \"Adminstration\" },\n    { id: \"referrar\", name: \"Referido\" },\n    { id: \"consumption\", name: \"Consumo\" },\n    { id: \"bonus\", name: \"Bono\" },\n];\n\nconst SelectField = ({ choices, ...rest }) => {\n    return (\n        <Select\n            {...rest}\n            showSearch\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            {\n                _.map(choices, ({ id, name }, index) =>\n                    <Select.Option\n                        key={index}\n                        value={id}\n                    >\n                        {name}\n                    </Select.Option>\n                )\n            }\n        </Select>\n    );\n};\n\nconst TableDataPayments = ({ source, filterDefaultValues, permitFetch, updateStatistic, pay_account_id ,expandable}) => {\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n\n    const columns = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            sorter: true,\n        },\n        // source === \"pay-payments\"\n        // && {\n        //     title: \"Id usuario\",\n        //     dataIndex: \"user\",\n        //     key: \"user_id\",\n        //     render: (record) => {\n        //         return record\n        //             ? `${record?.id}`\n        //             : \"Usuario no asociado\";\n        //     },\n        // },\n        source === \"pay-payments\"\n        && {\n            title: \"Usuario\",\n            dataIndex: \"user\",\n            key: \"user\",\n            render: (record) => {\n                return record\n                    ? `${record?.first_name} ${record?.last_name\n                    }`\n                    : \"Usuario no asociado\";\n            },\n        },\n        filterDefaultValues?.user_id\n        && {\n            title: \"Establecimiento\",\n            key: \"establishment\",\n            render: (record) => {\n                return record\n                    ? `${record?.establishment?.name}-${record?.establishment_branch?.address}`\n                    : \"Establecimiento no asociado\";\n            },\n        },\n        {\n            title: \"Tipo\",\n            dataIndex: \"type\",\n            key: \"type\",\n            sorter: true,\n            render: (record) => `${record !== null ? record : \"Tipo no definido\"}`,\n        },\n        !(source === \"pay-withdrawal\" || filterDefaultValues?.user_id) && {\n            title: \"Cupón\",\n            dataIndex: \"meta_pay_coupon_name\",\n            keys: \"meta_pay_coupon_name\",\n            sorter: true,\n        },\n        !(source === \"pay-withdrawal\" || filterDefaultValues?.user_id) && {\n            title: \"Beneficio\",\n            dataIndex: \"meta_pay_benefit_name\",\n            keys: \"meta_pay_benefit_name\",\n            sorter: false,\n        },\n        !(source === \"pay-withdrawal\" || filterDefaultValues?.user_id) && {\n            title: \"Fecha de expiración\",\n            dataIndex: \"bonus_expiration_date\",\n            keys: \"bonus_expiration_date\",\n            sorter: true,\n            render: (record) => record && `${moment(record).subtract(1, 'second').format(\"YYYY/MM/DD\")}`,\n        },\n        {\n            title: \"Fecha de la transacción\",\n            dataIndex: \"createdAt\",\n            keys: \"createdAt\",\n            sorter: true,\n            render: (record) => `${moment(record).format(\"YYYY/MM/DD\")}`,\n        },\n        {\n            title: \"Estado\",\n            dataIndex: \"status\",\n            key: \"status\",\n            sorter: true,\n            render: (value) => {\n                const status = _.find(STATUS, ({ id }) => id === value) || value\n                return <Tag color={status?.color} >\n                    {status?.name || status}\n                </Tag>\n            }\n        },\n        {\n            title: \"Monto\",\n            key: \"amount\",\n            dataIndex: \"amount\",\n            render: (record) => {\n                return (\n                    <span style={{ color: source === \"pay-withdrawal\" || filterDefaultValues?.user_id ? \"#ff4d4f\" : \"#52c41a\", fontSize: \"1rem\" }}>\n                        ${\" \"} {source === \"pay-withdrawal\" || filterDefaultValues?.user_id ? \"-\" : \"+\"}\n                        {numeral(record).format(\"0,0\")}\n                    </span>\n                );\n            },\n        },\n        source === \"pay-payments\"\n        && {\n            title: \"Monto disponible\",\n            key: \"amount_available\",\n            dataIndex: \"amount_available\",\n            render: (record) => {\n                return <span> $ {numeral(record).format(\"0,0\")}</span>;\n            },\n            align: \"center\",\n        },\n    ];\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n        const payPayments = getService(source);\n\n        if (data.bonus_expiration_date)\n            data.bonus_expiration_date = moment(data.bonus_expiration_date)\n                .utcOffset(-5)\n                .format(\"YYYY-MM-DD\");\n        await payPayments.create(data)\n            .then(() => {\n                message.success(`Nuevo ${source === \"pay-withdrawal\" || filterDefaultValues?.user_id ? 'egreso' : 'ingreso'} registrado de manera exitosa`);\n                setDrawerVisible(false);\n                setUpdateSource(!updateSource);\n                updateStatistic();\n            })\n            .catch(err => message.error(err.message));\n    };\n\n    return (\n        <>\n            <Grid\n                source={source}\n                filterDefaultValues={{\n                    $sort: {\n                        createdAt: -1\n                    },\n                    ...filterDefaultValues\n                }}\n                permitFetch={permitFetch}\n                actions={{}}\n                updateSource={updateSource}\n                columns={_.filter(columns, (record) => typeof record === 'object')}\n                expandable={expandable}\n            />\n        </>\n    );\n}\n\nexport default TableDataPayments;","import TableDataPayments from \"./TableDataPayments\";\n\nconst IncomePayments = ({ pay_account_id, updateStatistic }) => {\n    return (\n        <>\n            <TableDataPayments\n                source='pay-payments'\n                updateStatistic={updateStatistic}\n                filterDefaultValues={{\n                    pay_account_id\n                }}\n                pay_account_id={pay_account_id}\n            />\n        </>\n    );\n}\n\nexport default IncomePayments;","\nimport numeral from \"numeral\";\nimport _ from \"lodash\";\nimport { Tag } from \"antd\";\nimport moment from \"moment\";\nimport Grid from \"../../components/com/grid/GridOutPutAccount\";\n\nconst STATUS = [\n    {\n        id: 'completed',\n        name: 'Completado',\n        color: 'success'\n    },\n    {\n        id: 'pending',\n        name: 'Pendiente',\n        color: 'processing'\n    },\n    {\n        id: 'rejected',\n        name: 'Rechazado',\n        color: 'error'\n    },\n];\n\n\nconst OutputPayments = ({ pay_account_id }) => {\n    \n    return (\n        <>\n            <Grid\n                source={'pay-withdrawal'}\n                filterDefaultValues={{\n                    pay_account_id,\n                    $sort:{createdAt: -1}\n                }}\n                permitFetch={true}\n                actions={{}}\n                columns={[\n                    {\n                        title: \"ID\",\n                        dataIndex: \"id\",\n                        key: \"id\",\n                        sorter: true,\n                    },\n                    {\n                        title: \"Tipo\",\n                        dataIndex: \"type\",\n                        key: \"type\",\n                        sorter: true,\n                        render: (record) => `${record !== null ? record : \"Tipo no definido\"}`,\n                    },\n                    {\n                        title: \"Fecha de la transacción\",\n                        dataIndex: \"createdAt\",\n                        keys: \"createdAt\",\n                        sorter: true,\n                        render: (record) => `${moment(record).format(\"YYYY/MM/DD\")}`,\n                    },\n                    {\n                        title: \"Estado\",\n                        dataIndex: \"status\",\n                        key: \"status\",\n                        sorter: true,\n                        render: (value) => {\n                            const status = _.find(STATUS, ({ id }) => id === value) || value\n                            return <Tag color={status?.color} >\n                                {status?.name || status}\n                            </Tag>\n                        }\n                    },\n                    {\n                        title: \"Monto\",\n                        key: \"amount\",\n                        dataIndex: \"amount\",\n                        render: (record) => {\n                            return (\n                                <span style={{ color:  \"#ff4d4f\", fontSize: \"1rem\" }}>\n                                    ${\" \"} {\"-\"}\n                                    {numeral(record).format(\"0,0\")}\n                                </span>\n                            );\n                        },\n                    },\n                ]}\n            />\n        </>\n    );\n}\n\nexport default OutputPayments;\n\n\n\n\n// import { Grid } from \"../../components/com\";\n// import TableDataPayments from \"./TableDataPayments\";\n// import { MdOutlineKeyboardArrowDown, MdOutlineKeyboardArrowUp } from 'react-icons/md'\n// import numeral from \"numeral\";\n// import moment from \"moment\";\n// import { Tag } from \"antd\";\n// import _ from \"lodash\";\n// import { useEffect, useState } from \"react\";\n\n// const STATUS = [\n//     {\n//         id: 'completed',\n//         name: 'Completado',\n//         color: 'success'\n//     },\n//     {\n//         id: 'pending',\n//         name: 'Pendiente',\n//         color: 'processing'\n//     },\n//     {\n//         id: 'rejected',\n//         name: 'Rechazado',\n//         color: 'error'\n//     },\n// ];\n\n// const Reservations = ({invoice_payment_id, createdAt, status, type}) => {\n//     return (\n//         <div style={{padding: '0px 20px'}}>\n//             <Grid\n//                 limit={10}\n//                 source={'reservations'}\n//                 filterDefaultValues={{\n//                     invoice_payment_id,\n//                     $sort: {\n//                         id: -1\n//                     },\n//                     commission_tax_incl: {\n//                         $gt: 0\n//                     }\n//                 }}\n//                 permitFetch={true}\n//                 actions={{}}\n//                 showHeader={false}\n//                 columns={[\n//                     {\n//                         key: 'id',\n//                         title: 'Id reserva',\n//                         dataIndex: 'id',\n//                         ellipsis: true,\n//                     },\n//                     {\n//                         key: 'type',\n//                         title: 'Tipo',\n//                         ellipsis: true,\n//                         render:()=> type,\n//                     },\n//                     {\n//                         title: \"Fecha de la transacción\",\n//                         keys: \"createdAt\",\n//                         sorter: true,\n//                         render: (record) => `${moment(`${record?.meta_day} ${record?.meta_start_hour}`,'YYYY-MM-DD HH:mm:ss').format(\"YYYY/MM/DD - h:mm a\")}`,\n//                     },\n//                     {\n//                         sorter: true,\n//                             title: \"Estado\",\n//                             key: \"status\",\n//                             render: () => {\n//                                 const statusF = _.find(STATUS, ({ id }) => id === status) || status\n//                                 return <Tag color={statusF?.color} >\n//                                     {statusF?.name || statusF}\n//                                 </Tag>\n//                             }\n                  \n//                     },\n//                     {\n//                         title: \"Monto\",\n//                         key: \"commission_tax_incl\",\n//                         dataIndex: \"commission_tax_incl\",\n//                         render: (record) => {\n//                             return (\n//                                 <span style={{ color:  \"#ff4d4f\" , fontSize: \"1rem\" }}>\n//                                     ${\" \"} {\"-\"}\n//                                     {numeral(record).format(\"0,0\")}\n//                                 </span>\n//                             );\n//                         },\n//                     },\n//                 ]}\n//                 scroll={{}}\n//                 transparent={true}\n//             />\n//         </div>\n//     )\n// }\n\n// const OutputPayments = ({ pay_account_id, updateStatistic }) => {\n\n//     const [expandedRows, setExpandedRows] = useState([]);\n\n\n//     const defaultExpandable = {\n//         expandedRowKeys:expandedRows,\n//         onExpandedRowsChange:(rows)=> setExpandedRows(rows),\n//         expandedRowRender: (record, index, indent, expanded) => {\n//             return expanded && <Reservations  invoice_payment_id={record?.invoice_payment_id} createdAt={record?.createdAt} status={record?.status} type={record?.type}/>\n//         },\n//         expandIcon: ({ expanded, onExpand, record }) =>\n//             record.invoice_payment_id ?\n//                 expanded ? (\n//                     <MdOutlineKeyboardArrowUp onClick={e => onExpand(record, e)} size='25' />\n//                 ) : (\n//                     <MdOutlineKeyboardArrowDown onClick={e => onExpand(record, e)} size='25' />\n//                 )\n//                 : null,\n//         rowExpandable: (record) => record.invoice_payment_id,\n//     };\n\n//     useEffect(() => {\n//         setExpandedRows([]);\n//     }, [pay_account_id])\n\n//     return (\n//         <>\n//             <TableDataPayments\n//                 source='pay-withdrawal'\n//                 updateStatistic={updateStatistic}\n//                 filterDefaultValues={{\n//                     pay_account_id,\n//                     // amount: {\n//                     //     $gt: 0\n//                     // }\n//                 }}\n//                 pay_account_id={pay_account_id}\n//                 expandable={defaultExpandable}\n//             />\n//         </>\n//     );\n// }\n\n// export default OutputPayments;","import { Button, Drawer, Input, InputNumber, message, Select } from \"antd\";\nimport _ from \"lodash\";\nimport { useState } from \"react\";\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from \"react-icons/ai\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { Grid } from \"../../components/com\";\nimport { SimpleForm } from \"../../components/com/form/\";\nimport { RoundedButton } from \"../../components/com/grid/Styles\";\nimport { useBanks } from \"../../hooks/useBanks\";\nimport { getService } from \"../../services\";\n\nconst ACCOUNT_TYPES = [\n    {\n        id: \"current\",\n        name: \"Corriente\",\n    },\n    {\n        id: \"saving\",\n        name: \"Ahorros\",\n    },\n];\n\nconst IDENTIFY_NUMBER = [\n    {\n        id: \"id\",\n        name: \"Cédula\",\n    },\n    {\n        id: \"foreigner_id\",\n        name: \"Cédula de extranjería\",\n    },\n    {\n        id: \"passport\",\n        name: \"Pasaporte\",\n    },\n    {\n        id: \"ti\",\n        name: \"Tarjeta de identidad\",\n    },\n    {\n        id: \"nit\",\n        name: \"NIT\",\n    }\n];\n\nconst SelectField = ({ choices, ...rest }) => {\n    return (\n        <Select\n            {...rest}\n            showSearch\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            {\n                _.map(choices, ({ id, name }, index) =>\n                    <Select.Option\n                        key={index}\n                        value={id}\n                    >\n                        {name}\n                    </Select.Option>\n                )\n            }\n        </Select>\n    );\n};\n\nconst columns = ({ onRemove, onEdit }) => [\n    {\n        key: \"id\",\n        dataIndex: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        key: \"bank_id\",\n        dataIndex: \"bank_id\",\n        title: \"Nombre del Banco\",\n        render: (value, record) => `${record?.bank?.name || value}`\n    },\n    {\n        key: \"account_number\",\n        dataIndex: \"account_number\",\n        title: \"Numero de cuenta\",\n    },\n    {\n        key: \"account_type\",\n        dataIndex: \"account_type\",\n        title: \"Tipo de cuenta\",\n        render: (value) => _.find(ACCOUNT_TYPES, ({ id }) => id === value)?.name\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n];\n\nconst BankAccounts = ({ pay_account_id }) => {\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedAccount, setSelectedAccount] = useState();\n\n    const [banks] = useBanks();\n\n    const onEdit = (record) => {\n        setSelectedAccount(record);\n        setDrawerVisible(true);\n    }\n\n    const onRemove = async ({ id }) => {\n\n        const payBankService = getService('pay-banks');\n\n        await payBankService.remove(id)\n            .then(() => {\n                message.success(\"Cuenta eliminado!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch(err => message.error(err.message));\n    };\n\n\n    return (\n        <>\n            <Grid\n                source='pay-banks'\n                custom={true}\n                filterDefaultValues={{\n                    pay_account_id,\n                    $sort: {\n                        createdAt: -1\n                    },\n                }}\n                actions={{}}\n                updateSource={updateSource}\n                columns={columns({ onRemove, onEdit })}\n            />\n        </>\n    );\n}\n\nexport default BankAccounts;","import { Col, Divider, Layout, Row, Statistic, Tabs, Breadcrumb, message, Typography } from \"antd\";\nimport { Box, TabsStyled } from \"../../components/Styles\";\nimport { useTotalPaymentsByAccountId } from \"./hooks\";\nimport DonePayments from \"./DonePayments\";\nimport IncomePayments from \"./IncomePayments\";\nimport OutputPayments from \"./OutputPayments\";\nimport BankAccounts from \"./BankAccounts\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { getService } from \"../../services\";\nimport { useSelector } from \"react-redux\";\nimport { AiOutlineDollarCircle } from \"react-icons/ai\";\nimport { RiFileExcel2Fill } from \"react-icons/ri\";\nimport { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\n\nconst PaymentsDetails = () => {\n\n    const establishmentFilters = useSelector(({ dashboardReducer }) => dashboardReducer.establishmentFilters);\n    const currentUser = useSelector(({ appReducer }) => appReducer?.user);\n\n    const [pay_account_id, setPayAccountId] = useState();\n    const [userEstablishment, setUserEstablishment] = useState();\n    const [totalPaymentsByAccountId, loadingTotalPaymentsByAccountId, getTotalPaymentsByAccountId] = useTotalPaymentsByAccountId({ pay_account_id });\n\n    const serviceReportIncomeExpenses = getService(\"report-income-expenses\");\n    const serviceEstablishmentCommissions = getService(\"establishments-commissions\");\n    const payAccountService = getService(\"pay-accounts\");\n\n    const updateStatistic = () => {\n        // getTotalPaymentsByAccountId();\n    };\n\n    const generateReportIncomeExpenses = async () => {\n        await serviceReportIncomeExpenses.find({\n            query: {\n                ...establishmentFilters\n            },\n        }).then((response) => {\n            window.open(response.path, '_blank');\n        }).catch((error) => {\n            message.error(error.message);\n        });\n    };\n\n    const generateExportReportCommission = async (query) => {\n        await serviceEstablishmentCommissions.find({\n            query: {\n                ...query\n            },\n        }).then((response) => {\n            window.open(response.path, '_blank');\n        }).catch((error) => {\n            message.error(error.message);\n        });\n    };\n\n    const getPayAccount = async (establishmentFilters) => {\n\n        await payAccountService.find({\n            query: {\n                // $select: ['id'],\n                $limit: 1,\n                ...establishmentFilters\n            }\n        })\n            .then((response) => {\n                if (response?.data?.length > 0) {\n                    setPayAccountId(response?.data[0]?.id);\n                }\n            })\n            .catch(() => { })\n    };\n\n    useEffect(() => {\n        if (establishmentFilters?.establishment_branch_id && userEstablishment) {\n            getPayAccount(establishmentFilters);\n        }\n    }, [establishmentFilters?.establishment_branch_id, userEstablishment])\n\n    useEffect(() => {\n        if (establishmentFilters?.establishment_id && currentUser?.role === 'user') {\n            const user_establishment_branch = _.find(currentUser?.permissionsv2, ({ role, establishment_id }) => ['superAdmin', 'kam'].includes(role) && establishment_id === Number(establishmentFilters?.establishment_id))\n            setUserEstablishment(user_establishment_branch);\n        } else if (establishmentFilters?.establishment_id && currentUser?.role === 'admin') {\n            setUserEstablishment(true);\n        }\n    }, [establishmentFilters?.establishment_id])\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Row>\n                <Row\n                    align='middle'\n                    style={{\n                        color: \"var(--purple)\",\n                    }}\n                    gutter={[16, 16]}\n                >\n                    <Col>\n                        <AiOutlineDollarCircle size={30} />\n                    </Col>\n                    <Col>\n                        <Typography.Title level={3} style={{ margin: 0 }}>\n                            Histórico AppartaPay\n                        </Typography.Title>\n                    </Col>\n                </Row>\n                <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n            </Row>\n            <Row style={{ marginBottom: '1rem' }} gutter={16}>\n                <Col span={24}>\n                    {\n                        !(establishmentFilters.establishment_branch_id) ? (\n                            <Box>\n                                *Seleccione una dirección para ver los registros*\n                            </Box>\n                        ) : userEstablishment ?\n                            (\n                                <>\n                                    <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n                                    <Row gutter={[16, 16]}>\n                                        <Col span={8}>\n                                            <Box>\n                                                <Col span={24}>\n                                                    <Statistic\n                                                        title=\"Ingreso wallet (COP)\"\n                                                        value={totalPaymentsByAccountId?.wallet_in}\n                                                        precision={2}\n                                                        loading={loadingTotalPaymentsByAccountId}\n                                                    />\n                                                </Col>\n                                            </Box>\n                                        </Col>\n                                        <Col span={8}>\n                                            <Box>\n                                                <Col span={24}>\n                                                    <Statistic\n                                                        title=\"Egreso wallet (COP)\"\n                                                        value={totalPaymentsByAccountId?.wallet_out}\n                                                        precision={2}\n                                                        loading={loadingTotalPaymentsByAccountId}\n                                                    />\n                                                </Col>\n                                            </Box>\n                                        </Col>\n                                        <Col span={8}>\n                                            <Box>\n                                                <Col span={24}>\n                                                    <Statistic\n                                                        title=\"Balance total wallet (COP)\"\n                                                        value={totalPaymentsByAccountId?.balance}\n                                                        precision={2}\n                                                        loading={loadingTotalPaymentsByAccountId}\n                                                    />\n                                                </Col>\n                                            </Box>\n                                        </Col>\n                                    </Row>\n                                    <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n                                    <Row gutter={8} justify='end'>\n                                        {\n                                            establishmentFilters?.establishment_branch_id &&\n                                            <Col>\n                                                <AsyncButton\n                                                    type='primary'\n                                                    style={{ borderRadius: '0.5rem' }}\n                                                    onClick={generateReportIncomeExpenses}\n                                                >\n                                                    <RiFileExcel2Fill size={20} />\n                                                    Ingresos/Egresos\n                                                </AsyncButton>\n                                            </Col>\n                                        }\n                                        {/* {\n                                            establishmentFilters?.establishment_id &&\n                                            <Col>\n                                                <AsyncButton\n                                                    type='primary'\n                                                    style={{ borderRadius: '0.5rem' }}\n                                                    onClick={() => generateExportReportCommission({ establishment_id: establishmentFilters?.establishment_id })}\n                                                >\n                                                    <RiFileExcel2Fill size={20} />\n                                                    Comisiones por establecimiento\n                                                </AsyncButton>\n                                            </Col>\n                                        }\n                                        {\n                                            establishmentFilters?.establishment_branch_id &&\n                                            <Col>\n                                                <AsyncButton\n                                                    type='primary'\n                                                    style={{ borderRadius: '0.5rem' }}\n                                                    onClick={() => generateExportReportCommission({ establishment_branch_id: establishmentFilters?.establishment_branch_id })}\n                                                >\n                                                    <RiFileExcel2Fill size={20} />\n                                                    Comisiones por sucursal\n                                                </AsyncButton>\n                                            </Col>\n                                        } */}\n                                    </Row>\n                                    <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n                                    <TabsStyled defaultActiveKey=\"1\">\n                                        <Tabs.TabPane tab=\"Ingreso wallet\" key=\"2\">\n                                            <IncomePayments pay_account_id={pay_account_id} updateStatistic={updateStatistic} />\n                                        </Tabs.TabPane>\n                                        <Tabs.TabPane tab=\"Egreso wallet\" key=\"3\">\n                                            <OutputPayments pay_account_id={pay_account_id} updateStatistic={updateStatistic} />\n                                        </Tabs.TabPane>\n                                    </TabsStyled>\n                                </>\n                            ) :\n                            (\n                                <Box>\n                                    *No tiene permisos para ver estos registros*\n                                </Box>\n                            )\n                    }\n                </Col>\n            </Row>\n        </Layout.Content>\n    );\n}\n\nexport default PaymentsDetails;","import { message } from 'antd';\nimport { useState, useEffect } from 'react';\nimport { getService } from '../../../services';\n\nexport const useTotalPaymentsByAccountId = ({ pay_account_id }) => {\n\n    const rawQueryService = getService('raw-queries');\n\n    const [totalPaymentsByAccountId, SetTotalPaymentsByAccountId] = useState();\n    const [loadingTotalPaymentsByAccountId, SetLoadingTotalPaymentsByAccountId] = useState(false);\n\n    const getTotalPaymentsByAccountId = () => {\n        if (pay_account_id)\n            SetLoadingTotalPaymentsByAccountId(true);\n        rawQueryService.find({\n            query: {\n                $client: {\n                    totalPaymentsUserIdByPayAccountId: pay_account_id\n                }\n            }\n        }).then((response) => {\n            SetTotalPaymentsByAccountId(response);\n            SetLoadingTotalPaymentsByAccountId(false);\n        }).catch((error) => {\n            message.error(error.message);\n            SetLoadingTotalPaymentsByAccountId(false);\n        })\n    }\n\n    useEffect(() => {\n        getTotalPaymentsByAccountId();\n    }, [pay_account_id])\n\n    return [\n        totalPaymentsByAccountId,\n        loadingTotalPaymentsByAccountId,\n        getTotalPaymentsByAccountId\n    ]\n}"],"sourceRoot":""}