{"version":3,"sources":["views/security/BlockIps.jsx","views/security/BlockDevices.jsx","views/security/BlockEmails.jsx","views/security/index.jsx","components/Styles.js"],"names":["STATUS","id","name","columns","_ref","onEdit","onRemove","key","dataIndex","title","sorter","render","value","_jsx","_Tag","color","children","moment","format","record","_jsxs","_Fragment","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","BlockIps","ipsBlockListService","getService","drawerVisible","setDrawerVisible","useState","selectedIp","setSelectedIp","updateSource","setUpdateSource","Grid","source","_objectSpread","expire_date","undefined","async","_ref2","remove","then","_message","success","catch","error","message","filterDefaultValues","$sort","extra","RoundedButton","AiOutlinePlus","actions","filters","_Input","label","placeholder","allowEmpty","size","style","width","_Drawer","concat","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","err","data","rest","_objectWithoutProperties","_excluded","patch","create","allowNull","flex","validations","required","_Select","_","map","_ref3","index","Option","_DatePicker","locale","showTime","TextArea","BlockDevices","devicesBlockListService","selectedDevice","setSelectedDevice","BlockEmailsDomain","emailsBlockListService","selectedDomain","setSelectedDomain","ReservationsOnDemandManager","_Layout","Content","height","overflow","padding","TabsStyled","defaultActiveKey","_Tabs","TabPane","tab","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","Box","_Row","_templateObject4","_templateObject5"],"mappings":"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","file":"static/js/48.d9fd5c9a.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Grid } from \"../../components/com\";\nimport { RoundedButton } from \"../../components/com/grid/Styles\";\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport { Button, DatePicker, Drawer, Input, message, Select, Tag } from \"antd\";\nimport { SimpleForm } from \"../../components/com/form/\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { getService } from \"../../services\";\nimport moment from \"moment\";\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport _ from \"lodash\";\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onEdit, onRemove }) => [\n    {\n        key: \"id\",\n        dataIndex: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        key: \"ip\",\n        dataIndex: \"ip\",\n        title: \"Ip\",\n        sorter: true,\n    },\n    {\n        key: \"note\",\n        dataIndex: \"note\",\n        title: \"Nota\",\n    },\n    {\n        key: \"block_users\",\n        dataIndex: \"block_users\",\n        title: \"Block users\",\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color={value === 'inactive' ? 'red' : 'orange'}>{value}</Tag>\n\n    },\n    {\n        key: \"expire_date\",\n        dataIndex: \"expire_date\",\n        title: \"Fecha expiración\",\n        render: (value) => value && moment(value).format('YYYY-MMM-DD  h:mm:ss a'),\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n\n];\n\nconst BlockIps = () => {\n\n    const ipsBlockListService = getService('black-list-ips');\n\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedIp, setSelectedIp] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n\n    const onEdit = (record) => {\n        setSelectedIp({\n            ...record,\n            expire_date: record?.expire_date ? moment(record.expire_date) : undefined,\n        });\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        await ipsBlockListService.remove(id)\n            .then(() => {\n                message.success(\"Ip eliminada de la lista!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar la ip! ' + error?.message)\n            )\n    };\n\n    const handleSubmit = async (err, data) => {\n        if (err) return message.error(err);\n        const { id, ...rest } = data;\n\n        if (selectedIp?.id) {\n            await ipsBlockListService.patch(selectedIp.id, { ...rest })\n                .then(() => {\n                    message.success(\"Ip actualizada!\");\n                    setDrawerVisible(false);\n                    setSelectedIp();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await ipsBlockListService.create({ ...rest })\n                .then(() => {\n                    message.success(\"Ip agregada correctamente!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <>\n            <Grid\n                source=\"black-list-ips\"\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove })}\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    },\n                }}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n                actions={{}}\n                filters={\n                    <>\n                        <Input\n                            source=\"ip\"\n                            name=\"ip\"\n                            label=\"ip\"\n                            placeholder=\"ip\"\n                            allowEmpty\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                    </>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedIp ? 'Editar' : 'Crear'}`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedIp();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={`${selectedIp ? 'Actualizar' : 'Crear'}`}\n                        initialValues={selectedIp}\n                        onSubmit={handleSubmit}\n                        allowNull={true}\n                    >\n                        <Input\n                            flex={1}\n                            label=\"Ip\"\n                            size='large'\n                            name=\"ip\"\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Ip es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='block_users'\n                            label=\"Block users\"\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <DatePicker\n                            flex={1}\n                            locale={locale}\n                            showTime\n                            name='expire_date'\n                            label='Fecha expiración'\n                            format='YYYY-MM-DD h:mm a'\n                        />\n                        <Input.TextArea\n                            flex={1}\n                            label=\"Nota\"\n                            size='large'\n                            name=\"note\"\n                        />\n\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    )\n}\n\nexport default BlockIps;","import { useState } from \"react\";\nimport { Grid } from \"../../components/com\";\nimport { RoundedButton } from \"../../components/com/grid/Styles\";\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport { Button, DatePicker, Drawer, Input, message, Select, Tag } from \"antd\";\nimport { SimpleForm } from \"../../components/com/form/\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { getService } from \"../../services\";\nimport moment from \"moment\";\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport _ from \"lodash\";\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onEdit, onRemove }) => [\n    {\n        key: \"id\",\n        dataIndex: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        key: \"device_id\",\n        dataIndex: \"device_id\",\n        title: \"Id dispositivo\",\n        sorter: true,\n    },\n    {\n        key: \"note\",\n        dataIndex: \"note\",\n        title: \"Nota\",\n    },\n    {\n        key: \"block_users\",\n        dataIndex: \"block_users\",\n        title: \"Block users\",\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color={value === 'inactive' ? 'red' : 'orange'}>{value}</Tag>\n\n    },\n    {\n        key: \"expire_date\",\n        dataIndex: \"expire_date\",\n        title: \"Fecha expiración\",\n        render: (value) => value && moment(value).format('YYYY-MMM-DD  h:mm:ss a'),\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n\n];\n\nconst BlockDevices = () => {\n\n    const devicesBlockListService = getService('black-list-device-id');\n\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedDevice, setSelectedDevice] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n\n    const onEdit = (record) => {\n        setSelectedDevice({\n            ...record,\n            expire_date: record?.expire_date ? moment(record.expire_date) : undefined,\n        });\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        await devicesBlockListService.remove(id)\n            .then(() => {\n                message.success(\"Dispositivo eliminado de la lista!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el dispositivo! ' + error?.message)\n            )\n    };\n\n    const handleSubmit = async (err, data) => {\n        if (err) return message.error(err);\n\n        const { id, ...rest } = data;\n\n        if (selectedDevice?.id) {\n            await devicesBlockListService.patch(selectedDevice.id, { ...rest })\n                .then(() => {\n                    message.success(\"Id dispositivo actualizado!\");\n                    setDrawerVisible(false);\n                    setSelectedDevice();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await devicesBlockListService.create({ ...rest })\n                .then(() => {\n                    message.success(\"Id dispositivo agregado correctamente!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <>\n            <Grid\n                source=\"black-list-device-id\"\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove })}\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    },\n                }}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n                actions={{}}\n                filters={\n                    <>\n                        <Input\n                            source=\"device_id\"\n                            name=\"device_id\"\n                            label=\"device_id\"\n                            placeholder=\"device_id\"\n                            allowEmpty\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                    </>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedDevice ? 'Editar' : 'Crear'}`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedDevice();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={`${selectedDevice ? 'Actualizar' : 'Crear'}`}\n                        initialValues={selectedDevice}\n                        onSubmit={handleSubmit}\n                        allowNull={true}\n                    >\n                        <Input\n                            flex={1}\n                            label=\"Id dispositivo\"\n                            size='large'\n                            name=\"device_id\"\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Id dispositivo es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='block_users'\n                            label=\"Block users\"\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <DatePicker\n                            flex={1}\n                            locale={locale}\n                            showTime\n                            name='expire_date'\n                            label='Fecha expiración'\n                            format='YYYY-MM-DD h:mm a'\n                        />\n                        <Input.TextArea\n                            flex={1}\n                            label=\"Nota\"\n                            size='large'\n                            name=\"note\"\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    )\n}\n\nexport default BlockDevices;","import { useState } from \"react\";\nimport { Grid } from \"../../components/com\";\nimport { RoundedButton } from \"../../components/com/grid/Styles\";\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from 'react-icons/ai';\nimport { Button, Drawer, Input, message } from \"antd\";\nimport { SimpleForm } from \"../../components/com/form/\";\nimport AsyncButton from \"../../components/asyncButton\";\nimport { getService } from \"../../services\";\nimport _ from \"lodash\";\n\n\nconst columns = ({ onEdit, onRemove }) => [\n    {\n        key: \"id\",\n        dataIndex: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        key: \"domain\",\n        dataIndex: \"domain\",\n        title: \"Dominio\",\n        sorter: true,\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n            </>\n    }\n\n];\n\nconst BlockEmailsDomain = () => {\n\n    const emailsBlockListService = getService('black-list-emails');\n\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedDomain, setSelectedDomain] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n\n    const onEdit = (record) => {\n        setSelectedDomain({\n            ...record,\n        });\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        await emailsBlockListService.remove(id)\n            .then(() => {\n                message.success(\"Dominio eliminado de la lista!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar el dominio! ' + error?.message)\n            )\n    };\n\n    const handleSubmit = async (err, data) => {\n        if (err) return message.error(err);\n        const { id, ...rest } = data;\n\n        if (selectedDomain?.id) {\n            await emailsBlockListService.patch(selectedDomain.id, { ...rest })\n                .then(() => {\n                    message.success(\"Dominio actualizada!\");\n                    setDrawerVisible(false);\n                    setSelectedDomain();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await emailsBlockListService.create({ ...rest })\n                .then(() => {\n                    message.success(\"Dominio agregada correctamente!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n    return (\n        <>\n            <Grid\n                source=\"black-list-emails\"\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove })}\n                filterDefaultValues={{\n                    $sort: {\n                        id: -1\n                    },\n                }}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n                actions={{}}\n                filters={\n                    <>\n                        <Input\n                            source=\"domain\"\n                            name=\"domain\"\n                            label=\"domain\"\n                            placeholder=\"domain\"\n                            allowEmpty\n                            size=\"medium\"\n                            style={{ width: '15rem' }}\n                        />\n                    </>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedDomain ? 'Editar' : 'Crear'}`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedDomain();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={`${selectedDomain ? 'Actualizar' : 'Crear'}`}\n                        initialValues={selectedDomain}\n                        onSubmit={handleSubmit}\n                        allowNull={true}\n                    >\n                        <Input\n                            flex={1}\n                            label=\"Dominio\"\n                            size='large'\n                            name=\"domain\"\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Dominio es requerido`\n                                }\n                            ]}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    )\n}\n\nexport default BlockEmailsDomain;","import React from 'react';\nimport { Layout, Tabs } from 'antd';\nimport { TabsStyled } from '../../components/Styles';\nimport BlockIps from './BlockIps';\nimport BlockDevices from './BlockDevices';\nimport BlockEmailsDomain from './BlockEmails';\n\n\nconst ReservationsOnDemandManager = () => {\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <TabsStyled defaultActiveKey=\"1\">\n                <Tabs.TabPane tab=\"Ips bloqueadas\" key=\"1\">\n                    <BlockIps />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Dispositivos bloqueados\" key=\"2\">\n                    <BlockDevices />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Correos bloqueados\" key=\"3\">\n                    <BlockEmailsDomain />\n                </Tabs.TabPane>\n            </TabsStyled>\n        </Layout.Content>\n    );\n}\n\nexport default ReservationsOnDemandManager;","import { Row, Tabs } from 'antd';\nimport styled from 'styled-components';\n\nexport const HeadLine = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: baseline;\n  flex-wrap: wrap;\n\n  width:100%!important;\n\n  background-color:var(--gray-dark-1)!important;\n  color:#fff!important;\n\n  & .ant-checkbox-wrapper{\n    margin:0px 10px;\n  }\n  & h2{\n    color: #fff!important;\n    text-transform: uppercase!important;\n    padding: 4px 10px!important;\n    font-size: 16px!important;\n    vertical-align: middle!important;\n    margin-bottom: 0px!important;\n  }\n`;\nexport const AvatarWrapper = styled.div`\n\n    position:relative;\n   \n    display: flex;\n    justify-content: start;\n    align-items: center;\n\n    & .container{\n      width: 34px;\n      position:relative;\n    }\n    & .container:hover .ant-btn{\n      display:inline-block;\n    }\n    & .ant-btn,.ant-btn:hover{\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 999;\n      height: 34px!important;\n      display: none;\n      width: 34px!important;\n      background: #0010214f!important;\n      color: #FFF!important;\n      font-weight: bold;\n      display:none;\n    }\n`;\n\nexport const Tools = styled.div`\n    display:flex;\n    justify-content: space-between;\n`;\nexport const Box = styled(Row)`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n  border-radius:1rem;\n  background: #fff ;\n  padding: 2rem;\n`;\nexport const TabsStyled = styled(Tabs)`\n    & .ant-tabs-nav{\n        background-color:white;\n        border-radius:1rem;\n        box-shadow: rgb(0 0 0 / 10%) 0px 4px 12px;\n        padding:0 1rem;\n    }\n`;\n"],"sourceRoot":""}