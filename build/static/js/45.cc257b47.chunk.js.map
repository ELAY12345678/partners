{"version":3,"sources":["components/com/TransferTable.jsx","views/payAccounts/payBenefitDetails/PayBenefitEstablishmentBranches.jsx","views/payAccounts/payBenefitDetails/PayBenefitUserSegments.jsx","views/payAccounts/payBenefitDetails/index.jsx","components/Styles.js","hooks/useCities.js"],"names":["TableTransfer","_ref","leftColumns","rightColumns","restProps","_objectWithoutProperties","_excluded","_jsx","_Transfer","_objectSpread","children","_ref2","direction","filteredItems","onItemSelectAll","onItemSelect","selectedKeys","listSelectedKeys","disabled","listDisabled","columns","rowSelection","getCheckboxProps","item","onSelectAll","selected","selectedRows","console","log","treeSelectedKeys","filter","map","_ref3","key","diffKeys","difference","onSelect","_ref4","_excluded2","selectedRowKeys","_Table","dataSource","size","style","pointerEvents","undefined","dataIndex","title","render","value","record","concat","city_name","TransferTable","_ref5","onChange","city_id","pay_benefit_id","establishmentBranchesService","getService","payBenefitsEstablishmentsService","establishmentBranchesOptions","setEstablishmentBranchesOptions","useState","selectedEstablishment","setSelectedEstablishment","searchValue","setSearchValue","targetKeys","setTargetKeys","establishmentBranchesInPayBenefit","setEstablishmentBranchesInPayBenefit","debounceGetEstablishmentBranches","debounce","getEstablishmentBranches","find","query","q","$client","searchBranchsByCityId","fullName","then","data","_","sortBy","_ref6","establishment_branch_id","_ref7","exits_establishment_branch_id","_ref8","full_name","catch","err","_message","error","maxWait","useEffect","$limit","_ref9","_Fragment","showSelectAll","showSearch","index","onSearch","handleChange","nextTargetKeys","moveKeys","filterOption","inputValue","_item$full_name","_item$full_name$toLow","toLowerCase","includes","STATUS","id","name","color","cities","onRemove","sorter","_$find","status","_Tag","AsyncButton","type","onClick","icon","AiOutlineDelete","confirmText","PayBenefitEstablishmentBranches","updateSource","setUpdateSource","drawerVisible","setDrawerVisible","selectedCityId","setSelectedCityId","payBenefitsEstablismentsService","loadingCities","useCities","_jsxs","Grid","custom","source","filterDefaultValues","$sort","actions","async","remove","success","message","filters","_InputNumber","alwaysOn","label","placeholder","allowEmpty","width","SelectField","defaultValue","loading","choices","extra","RoundedButton","AiOutlinePlus","_Drawer","height","placement","visible","onClose","_Row","gutter","_Col","_Select","allowClear","onClear","Option","borderRadius","create","establishment_id","response","handleSubmit","values","PayBenefitUserSegments","payBenefitsUserSegments","file_path","setFile_path","fileList","setFileList","SimpleForm","textAcceptButton","scrollToFirstError","onSubmit","form","importExcel","info","_Upload","flex","action","listType","defaultFileList","FileUploader","preview","path","allowTypes","onFinish","url","file","_Button","window","open","URL_S3","_Input","initial","validations","required","meta_establishment","meta_establishment_branch_address","numeral","format","moment","PayBenefitUsers","location","navigate","useNavigate","benefit_name","isSpecific","state","_Layout","Content","overflow","padding","_Breadcrumb","Item","defaultSelectedTab","cursor","_Divider","background","borderTop","marginTop","TabsStyled","defaultActiveKey","_Tabs","TabPane","tab","meta_pay_benefit_id","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","Box","_templateObject4","_templateObject5","citiesService","setCities","setLoadingCities"],"mappings":"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","file":"static/js/45.cc257b47.chunk.js","sourcesContent":["import { message, Table, Transfer } from 'antd';\nimport _, { debounce } from 'lodash';\nimport difference from 'lodash/difference';\nimport React, { useEffect, useState } from 'react';\nimport { getService } from '../../services';\n\n// Customize Table Transfer\nconst TableTransfer = ({ leftColumns, rightColumns, ...restProps }) => (\n    <Transfer\n        {...restProps}\n    >\n        {({\n            direction,\n            filteredItems,\n            onItemSelectAll,\n            onItemSelect,\n            selectedKeys: listSelectedKeys,\n            disabled: listDisabled,\n        }) => {\n            const columns = direction === 'left' ? leftColumns : rightColumns;\n            const rowSelection = {\n                getCheckboxProps: (item) => ({\n                    disabled: listDisabled || item.disabled,\n                }),\n\n                onSelectAll(selected, selectedRows) {\n                    console.log(selected, selectedRows)\n                    const treeSelectedKeys = selectedRows\n                        .filter((item) => !item.disabled)\n                        .map(({ key }) => key);\n                    const diffKeys = selected\n                        ? difference(treeSelectedKeys, listSelectedKeys)\n                        : difference(listSelectedKeys, treeSelectedKeys);\n                    onItemSelectAll(diffKeys, selected);\n                },\n\n                onSelect({ key, ...rest }, selected) {\n                    // console.log({ key, ...rest }, selected)\n                    onItemSelect(key, selected);\n                },\n\n                selectedRowKeys: listSelectedKeys,\n            };\n            return (\n                <Table\n                    rowSelection={rowSelection}\n                    columns={columns}\n                    // dataSource={direction === 'left' ? filteredItems : [{ key: '0', title: 'content1', description: 'description of content1', tag: 'cat' }]}\n                    dataSource={filteredItems}\n                    size=\"small\"\n                    style={{\n                        pointerEvents: listDisabled ? 'none' : undefined,\n                    }}\n                // onRow={({ key, ...rest }) => ({\n                //     onClick: () => {\n                //         console.log({ key, ...rest }, !listSelectedKeys.includes(key))\n\n                //         onItemSelect(key, !listSelectedKeys.includes(key));\n                //     },\n                // })}\n                />\n            );\n        }}\n    </Transfer>\n);\n\nconst columns = [\n    {\n        dataIndex: 'full_name',\n        title: 'Establecimiento',\n        render: (value, record) => `${value} - ${record?.city_name}`\n    },\n];\n\nconst TransferTable = ({ onChange, city_id, pay_benefit_id }) => {\n\n    const establishmentBranchesService = getService('establishments-branchs');\n    const payBenefitsEstablishmentsService = getService('pay-benefits-establishments-branchs');\n\n    const [establishmentBranchesOptions, setEstablishmentBranchesOptions] = useState([]);\n    const [selectedEstablishment, setSelectedEstablishment] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n\n    const [targetKeys, setTargetKeys] = useState([]);\n    const [establishmentBranchesInPayBenefit, setEstablishmentBranchesInPayBenefit] = useState([]);\n\n\n    const getEstablishmentBranches = (value, city_id) => {\n        if (value === '') {\n            setEstablishmentBranchesOptions([])\n            return;\n        }\n        establishmentBranchesService.find({\n            query: {\n                q: value,\n                $client: city_id ?\n                    {\n                        searchBranchsByCityId: city_id\n                    } :\n                    {\n                        fullName: true\n                    }\n                ,\n            }\n        })\n            .then((data) => {\n                setEstablishmentBranchesOptions(\n                    _.sortBy(\n                        _.filter(data, ({ establishment_branch_id }) =>\n                            !_.find(establishmentBranchesInPayBenefit, ({ establishment_branch_id: exits_establishment_branch_id }) => exits_establishment_branch_id === establishment_branch_id)\n                        ),\n                        [({ full_name }) => full_name]\n                    ));\n            })\n            .catch((err) => message.error(err));\n    };\n\n    const handleChange = (nextTargetKeys, direction, moveKeys) => {\n        setTargetKeys(nextTargetKeys);\n        setSelectedEstablishment([\n            ..._.filter(_.map(nextTargetKeys, (key) =>\n                _.find([...selectedEstablishment, ...establishmentBranchesOptions], (item) =>\n                    `${item.establishment_branch_id}` === key\n                )\n                // city_id: temp.city_id || temp.city_id === \"null\" ? temp.city_id : city_id ? city_id : \"null\"\n            ))\n        ]);\n    };\n\n    const getEstablishmentBranchesInPayBenefit = () => {\n        payBenefitsEstablishmentsService.find({\n            query: {\n                pay_benefit_id,\n                $limit: 100000\n            }\n        })\n            .then(({ data }) => {\n                setEstablishmentBranchesInPayBenefit(data);\n            })\n            .catch((err) => message.error(err));\n    }\n\n    const debounceGetEstablishmentBranches = debounce(getEstablishmentBranches, 500, { maxWait: 800 });\n\n    useEffect(() => {\n        onChange(selectedEstablishment);\n    }, [selectedEstablishment, onChange]);\n\n    useEffect(() => {\n        debounceGetEstablishmentBranches(searchValue, city_id);\n    }, [searchValue, city_id]);\n\n    useEffect(() => {\n        getEstablishmentBranchesInPayBenefit(pay_benefit_id);\n    }, [pay_benefit_id]);\n\n\n    return (\n        <>\n            <TableTransfer\n                showSelectAll={false}\n                showSearch\n                dataSource={_.map([...establishmentBranchesOptions, ...selectedEstablishment], (record, index) => ({ ...record, key: `${record?.establishment_branch_id}` }))}\n                targetKeys={targetKeys}\n                onSearch={(direction, value) => direction === 'left' && setSearchValue(value)}\n                onChange={handleChange}\n                filterOption={(inputValue, item) =>\n                    item?.full_name?.toLowerCase()?.includes(inputValue?.toLowerCase())\n                }\n                leftColumns={columns}\n                rightColumns={columns}\n\n            />\n        </>\n    );\n};\n\nexport default TransferTable;","import { Col, Drawer, InputNumber, message, Row, Select, Tag } from \"antd\";\nimport _ from \"lodash\";\nimport { useState } from \"react\";\nimport { AiOutlineDelete, AiOutlinePlus } from \"react-icons/ai\";\nimport AsyncButton from \"../../../components/asyncButton\";\nimport { Grid } from \"../../../components/com\";\nimport { SelectField } from \"../../../components/com/form/\";\nimport { RoundedButton } from \"../../../components/com/grid/Styles\";\nimport TransferTable from \"../../../components/com/TransferTable\";\nimport { useCities } from \"../../../hooks/useCities\";\nimport { getService } from \"../../../services\";\n\nconst STATUS = [\n    {\n        id: 'active',\n        name: 'active',\n        color: 'success'\n    },\n    {\n        id: 'inactive',\n        name: 'inactive',\n        color: 'error'\n    },\n];\n\nconst columns = ({ cities, onRemove }) => [\n    {\n        key: \"establishment_id\",\n        dataIndex: \"establishment_id\",\n        title: \"Id Establecimiento\",\n        sorter: true,\n    },\n    {\n        key: \"establishment_branch_id\",\n        dataIndex: \"establishment_branch_id\",\n        title: \"Id Sucursal\",\n        sorter: true,\n    },\n    {\n        key: \"city_id\",\n        dataIndex: \"city_id\",\n        title: \"Ciudad\",\n        sorter: true,\n        render: (value) => _.find(cities, ({ id }) => value === id)?.name || ''\n    },\n    {\n        key: \"status\",\n        dataIndex: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        render: (value) => {\n            const status = _.find(STATUS, ({ id }) => id === value) || value\n            return <Tag color={status?.color} >\n                {status?.name || status}\n            </Tag>\n        }\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        render: (id, record) => {\n            return (\n                <>\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </>\n            );\n        },\n    }\n];\n\nconst PayBenefitEstablishmentBranches = ({ pay_benefit_id, city_id }) => {\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [selectedEstablishment, setSelectedEstablishment] = useState();\n\n    const [selectedCityId, setSelectedCityId] = useState(city_id);\n\n    const payBenefitsEstablismentsService = getService('pay-benefits-establishments-branchs');\n\n    const [cities, loadingCities] = useCities();\n\n    const onRemove = async ({ id }) => {\n        await payBenefitsEstablismentsService.remove(id)\n            .then(() => {\n                message.success(\"Programación Eliminada!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch(err => message.error(err.message));\n    };\n\n    const handleSubmit = async (data) => {\n        await payBenefitsEstablismentsService\n            .create(\n                _.map(data, ({ establishment_branch_id, establishment_id, city_id }) => ({\n                    establishment_branch_id,\n                    establishment_id,\n                    pay_benefit_id,\n                    city_id,\n                    status: 'active',\n                }))\n            )\n            .then((response) => {\n                setSelectedEstablishment();\n                setSelectedCityId();\n                setUpdateSource(!updateSource);\n                setDrawerVisible(false);\n                message.success(\"Establecimientos agregados a este beneficio correctamente!\");\n            })\n            .catch((err) => {\n                message.error(err.message);\n            });\n\n    };\n\n    return (\n        <>\n            <Grid\n                custom={true}\n                updateSource={updateSource}\n                source=\"pay-benefits-establishments-branchs\"\n                filterDefaultValues={{\n                    pay_benefit_id: pay_benefit_id,\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                actions={{}}\n                columns={columns({ cities, onRemove })}\n                filters={\n                    <>\n                        <InputNumber\n                            alwaysOn\n                            source=\"establishment_id\"\n                            name=\"establishment_id\"\n                            label=\"Id Establecimiento\"\n                            placeholder=\"Id Establecimiento\"\n                            allowEmpty\n                            style={{ width: '200px' }}\n                        />\n                        <InputNumber\n                            alwaysOn\n                            source=\"establishment_branch_id\"\n                            name=\"establishment_branch_id\"\n                            label=\"Id Sucursal\"\n                            placeholder=\"Id Sucursal\"\n                            allowEmpty\n                            style={{ width: '200px' }}\n                        />\n                        <SelectField\n                            alwaysOn\n                            disabled={!!city_id}\n                            defaultValue={city_id}\n                            loading={loadingCities}\n                            source=\"city_id\"\n                            name=\"city_id\"\n                            label=\"city_id\"\n                            placeholder=\"Ciudad\"\n                            allowEmpty\n                            choices={cities}\n                            size=\"medium\"\n                            style={{\n                                width: '15em'\n                            }}\n                        />\n                    </>\n                }\n                extra={\n                    <div>\n                        <RoundedButton\n                            icon={<AiOutlinePlus />}\n                            type={\"primary\"}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    height={'80%'}\n                    style={{ height: '100%' }}\n                    placement=\"bottom\"\n                    title='Añadir establecimientos participantes'\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedCityId();\n                    }}\n                    extra={\n                        <Row gutter={8}>\n                            <Col>\n                                <Select\n                                    disabled={!!city_id}\n                                    defaultValue={selectedCityId}\n                                    loading={loadingCities}\n                                    placeholder=\"Ciudad\"\n                                    allowClear\n                                    onClear={() => setSelectedCityId()}\n                                    choices={cities}\n                                    size=\"medium\"\n                                    style={{\n                                        width: '15em'\n                                    }}\n                                    onSelect={(value) => setSelectedCityId(value)}\n                                >\n                                    {\n                                        _.map(cities, ({ id, name }, index) =>\n                                            <Select.Option value={id} key={index}>\n                                                {name}\n                                            </Select.Option>\n                                        )\n                                    }\n                                </Select>\n                            </Col>\n                            <Col>\n                                <AsyncButton\n                                    type=\"primary\"\n                                    style={{ borderRadius: '0.5rem' }}\n                                    onClick={() => handleSubmit(selectedEstablishment)}\n                                >\n                                    Guardar\n                                </AsyncButton>\n                            </Col>\n                        </Row>\n                    }\n                >\n                    <TransferTable\n                        city_id={selectedCityId}\n                        pay_benefit_id={pay_benefit_id}\n                        onChange={(values) => setSelectedEstablishment(values)}\n                    />\n                </Drawer>\n\n            }\n        </>\n    )\n}\n\nexport default PayBenefitEstablishmentBranches;","import { useState } from \"react\";\nimport { Drawer, message, Upload, Button, InputNumber, Input } from \"antd\";\nimport _ from \"lodash\";\nimport { AiOutlineDelete, AiOutlinePlus, } from \"react-icons/ai\";\nimport AsyncButton from \"../../../components/asyncButton\";\nimport { Grid } from \"../../../components/com\";\nimport { SimpleForm, FileUploader } from \"../../../components/com/form/\";\nimport { RoundedButton } from \"../../../components/com/grid/Styles\";\nimport { URL_S3 } from \"../../../constants\";\nimport { getService } from \"../../../services\";\n\nconst URL_FILE_FORMAT_BONUS = \"payPayments/bonus/formato-bonos.xlsx\";\n\n\nconst columns = ({ onRemove }) => [\n    {\n        key: \"user_id\",\n        dataIndex: \"user_id\",\n        title: \"Id usuario\",\n        sorter: true,\n    },\n    {\n        key: \"pay_benefit_id\",\n        dataIndex: \"pay_benefit_id\",\n        title: \"Id beneficio\",\n        sorter: true,\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        render: (id, record) => {\n            return (\n                <>\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </>\n            );\n        },\n    }\n];\n\nconst PayBenefitUserSegments = ({ pay_benefit_id }) => {\n\n    const payBenefitsUserSegments = getService('pay-benefits-users-segment');\n\n    const [updateSource, setUpdateSource] = useState(false);\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [file_path, setFile_path] = useState();\n    const [fileList, setFileList] = useState();\n\n    const onRemove = async ({ id }) => {\n        await payBenefitsUserSegments.remove(id)\n            .then(() => {\n                message.success(\"Usuario eliminado!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch(err => message.error(err.message));\n    };\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n        if (data?.pay_benefit_id) {\n            await payBenefitsUserSegments\n                .create(data)\n                .then((response) => {\n                    setUpdateSource(!updateSource);\n                    setDrawerVisible(false);\n                    message.success(\"Usuario agregado a este beneficio correctamente!\");\n                })\n                .catch((err) => {\n                    message.error(err.message);\n                });\n        }\n        else {\n            message.info('No se ha selecionado ningún beneficio');\n        }\n    };\n\n    const handleSubmitImportUsers = async (err, data, form) => {\n        if (err) return message.error(err);\n\n        if (file_path && pay_benefit_id)\n            await payBenefitsUserSegments.create({\n                file_path: `${file_path}`,\n                pay_benefit_id,\n            }, {\n                query: { $client: { importExcel: 'usersFromExcel' } }\n            })\n                .then(() => {\n                    message.success(\"Usuarios cargados correctamente!\");\n                    setDrawerVisible(false);\n                    setFile_path();\n                    setFileList();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        else {\n            if (!file_path)\n                message.info('No se ha cargado ningún archivo');\n            else if (!pay_benefit_id)\n                message.info('No se ha selecionado ningún beneficio');\n        }\n    };\n\n    return (\n        <>\n            <Grid\n                custom={true}\n                updateSource={updateSource}\n                source=\"pay-benefits-users-segment\"\n                filterDefaultValues={{\n                    pay_benefit_id: pay_benefit_id,\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                actions={{}}\n                columns={columns({ onRemove })}\n                extra={\n                    <div>\n                        <RoundedButton\n                            icon={<AiOutlinePlus />}\n                            type={\"primary\"}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Importar Usuarios\n                        </RoundedButton>\n                    </div>\n                }\n                filters={\n                    <>\n                        <InputNumber\n                            alwaysOn\n                            source=\"user_id\"\n                            name=\"user_id\"\n                            label=\"Id Usuario\"\n                            placeholder=\"Id Usuario\"\n                            allowEmpty\n                            style={{ width: '200px' }}\n                        />\n                    </>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    placement=\"right\"\n                    title='Importar usuarios'\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setFile_path();\n                        setFileList();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton='Importar'\n                        scrollToFirstError\n                        onSubmit={handleSubmitImportUsers}\n                    >\n                        {\n                            fileList &&\n                            <Upload\n                                flex={1}\n                                action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                                listType=\"picture\"\n                                defaultFileList={[fileList]}\n                                onRemove={() => {\n                                    setFileList();\n                                    setFile_path();\n                                }}\n                            ></Upload>\n                        }\n                        <FileUploader\n                            flex={1}\n                            preview={false}\n                            path={`/appartaPay/benefits/`}\n                            style={{ borderRadius: '0.5rem' }}\n                            title='Cargar archivo'\n                            allowTypes={['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']}\n                            onFinish={(url, file) => {\n                                setFileList(file)\n                                setFile_path(url);\n                            }}\n                        />\n                        <Button\n                            type='link'\n                            onClick={() => window.open(`${URL_S3}${URL_FILE_FORMAT_BONUS}`, '_blank')}\n                        >\n                            Descargar plantilla\n                        </Button>\n                    </SimpleForm>\n                    <hr />\n                    <SimpleForm\n                        textAcceptButton='Agregar usuario'\n                        scrollToFirstError\n                        onSubmit={handleSubmit}\n                    >\n                        <Input\n                            type=\"hidden\"\n                            name='pay_benefit_id'\n                            initial={pay_benefit_id}\n                        />\n                        <InputNumber\n                            flex={1}\n                            label='Id Usuario '\n                            name='user_id'\n                            size='large'\n                            validations={[{ required: true, message: 'Usuario ID es requerido' }]}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </>\n    )\n}\n\nexport default PayBenefitUserSegments;","import { useNavigate } from \"react-router-dom\";\n\nimport { Breadcrumb, Divider, InputNumber, Layout, Tabs, Tag } from \"antd\";\nimport _ from \"lodash\";\nimport { Grid } from \"../../../components/com\";\nimport { TabsStyled } from \"../../../components/Styles\";\nimport moment from \"moment\";\nimport numeral from \"numeral\";\n\nimport PayBenefitEstablishmentBranches from './PayBenefitEstablishmentBranches';\nimport PayBenefitUserSegments from \"./PayBenefitUserSegments\";\n\nconst STATUS = [\n    {\n        id: 'claimed',\n        name: 'claimed',\n        color: 'success'\n    },\n    {\n        id: 'expired',\n        name: 'expired',\n        color: 'magenta'\n    },\n    {\n        id: 'canceled',\n        name: 'canceled',\n        color: 'error'\n    },\n    {\n        id: 'acquired',\n        name: 'acquired',\n        color: 'processing'\n    },\n];\n\nconst columns = [\n    {\n        key: \"meta_user_id\",\n        dataIndex: \"meta_user_id\",\n        title: \"Usuario Id\",\n        sorter: true,\n    },\n    {\n        key: \"meta_establishment_id\",\n        dataIndex: \"meta_establishment_id\",\n        title: \"Id - Establecimiento\",\n        sorter: true,\n        render: (value, record) => `${value || \"\"} - ${record?.meta_establishment || \"\"}`\n    },\n    {\n        key: \"meta_establishment_branch_id\",\n        dataIndex: \"meta_establishment_branch_id\",\n        title: \"Id - Sucursal\",\n        sorter: true,\n        render: (value, record) => `${value || \"\"} - ${record?.meta_establishment_branch_address || \"\"}`\n    },\n    {\n        key: \"amount\",\n        dataIndex: \"amount\",\n        title: \"Monto\",\n        sorter: true,\n        render: (value) => `$ ${numeral(value || \"\").format(\"0,0\")}`\n    },\n    {\n        key: \"expire_day\",\n        dataIndex: \"expire_day\",\n        title: \"Día expiración\",\n        sorter: true,\n        render: (value) => moment(value).format(\"YYYY-MM-DD h:mm:ss a\")\n    },\n    {\n        key: \"status\",\n        dataIndex: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        render: (value) => {\n            const status = _.find(STATUS, ({ id }) => id === value) || value\n            return <Tag color={status?.color} >\n                {status?.name || status}\n            </Tag>\n        }\n    },\n];\n\nconst PayBenefitUsers = ({ location }) => {\n    const navigate = useNavigate();\n    const { pay_benefit_id, benefit_name, isSpecific, city_id } = location.state;\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Breadcrumb>\n                <Breadcrumb.Item\n                    onClick={() => navigate('/dashboard/management/pay-accounts',\n                        {\n                            state: {\n                                defaultSelectedTab: '4'\n                            }\n                        }\n                    )}\n                    style={{ cursor: 'pointer' }}\n                >\n                    Beneficio\n                </Breadcrumb.Item>\n                <Breadcrumb.Item>{benefit_name}</Breadcrumb.Item>\n            </Breadcrumb>\n            {/* <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n            <Row gutter={[16, 16]}>\n                <Col span={6}>\n                    <Box>\n                        <Col span={24}>\n                            <Statistic\n                                title=\"Pagos realizados (COP)\"\n                                value={0.1}\n                                precision={2}\n                            // loading={loadingTotalPaymentsByAccountId}\n                            />\n                        </Col>\n                    </Box>\n                </Col>\n                <Col span={6}>\n                    <Box>\n                        <Col span={24}>\n                            <Statistic\n                                title=\"Ingreso wallet (COP)\"\n                                value={2}\n                                precision={2}\n                            // loading={loadingTotalPaymentsByAccountId}\n                            />\n                        </Col>\n                    </Box>\n                </Col>\n                <Col span={6}>\n                    <Box>\n                        <Col span={24}>\n                            <Statistic\n                                title=\"Egreso wallet (COP)\"\n                                value={5}\n                                precision={2}\n                            // loading={loadingTotalPaymentsByAccountId}\n                            />\n                        </Col>\n                    </Box>\n                </Col>\n                <Col span={6}>\n                    <Box>\n                        <Col span={24}>\n                            <Statistic\n                                title=\"Balance total wallet (COP)\"\n                                value={5}\n                                precision={2}\n                            // loading={loadingTotalPaymentsByAccountId}\n                            />\n                        </Col>\n                    </Box>\n                </Col>\n            </Row> */}\n            <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n            <TabsStyled defaultActiveKey=\"1\">\n                {\n                    isSpecific &&\n                    <Tabs.TabPane tab=\"Sucursales\" key=\"2\">\n                        <PayBenefitEstablishmentBranches pay_benefit_id={pay_benefit_id} city_id={city_id} />\n                    </Tabs.TabPane>\n                }\n                <Tabs.TabPane tab=\"Usado por usuarios\" key=\"4\">\n                    <Grid\n                        custom={true}\n                        source=\"pay-benefits-users\"\n                        filterDefaultValues={{\n                            meta_pay_benefit_id: pay_benefit_id,\n                            $sort: {\n                                id: 1\n                            }\n                        }}\n                        actions={{}}\n                        columns={columns}\n                        filters={\n                            <>\n                                <InputNumber\n                                    alwaysOn\n                                    source=\"meta_user_id\"\n                                    name=\"meta_user_id\"\n                                    label=\"Id Usuario\"\n                                    placeholder=\"Id Usuario\"\n                                    allowEmpty\n                                    style={{ width: '200px' }}\n                                />\n                                <InputNumber\n                                    alwaysOn\n                                    source=\"meta_establishment_id\"\n                                    name=\"meta_establishment_id\"\n                                    label=\"Id Establecimiento\"\n                                    placeholder=\"Id Establecimiento\"\n                                    allowEmpty\n                                    style={{ width: '200px' }}\n                                />\n                                <InputNumber\n                                    alwaysOn\n                                    source=\"meta_establishment_branch_id\"\n                                    name=\"meta_establishment_branch_id\"\n                                    label=\"Id Sucursal\"\n                                    placeholder=\"Id Sucursal\"\n                                    allowEmpty\n                                    style={{ width: '200px' }}\n                                />\n                            </>\n                        }\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Segmento de usuarios\" key=\"6\">\n                        <PayBenefitUserSegments pay_benefit_id={pay_benefit_id} />\n                    </Tabs.TabPane>\n            </TabsStyled>\n        </Layout.Content>\n    );\n}\n\nexport default PayBenefitUsers","import { Row, Tabs } from 'antd';\nimport styled from 'styled-components';\n\nexport const HeadLine = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: baseline;\n  flex-wrap: wrap;\n\n  width:100%!important;\n\n  background-color:var(--gray-dark-1)!important;\n  color:#fff!important;\n\n  & .ant-checkbox-wrapper{\n    margin:0px 10px;\n  }\n  & h2{\n    color: #fff!important;\n    text-transform: uppercase!important;\n    padding: 4px 10px!important;\n    font-size: 16px!important;\n    vertical-align: middle!important;\n    margin-bottom: 0px!important;\n  }\n`;\nexport const AvatarWrapper = styled.div`\n\n    position:relative;\n   \n    display: flex;\n    justify-content: start;\n    align-items: center;\n\n    & .container{\n      width: 34px;\n      position:relative;\n    }\n    & .container:hover .ant-btn{\n      display:inline-block;\n    }\n    & .ant-btn,.ant-btn:hover{\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 999;\n      height: 34px!important;\n      display: none;\n      width: 34px!important;\n      background: #0010214f!important;\n      color: #FFF!important;\n      font-weight: bold;\n      display:none;\n    }\n`;\n\nexport const Tools = styled.div`\n    display:flex;\n    justify-content: space-between;\n`;\nexport const Box = styled(Row)`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n  border-radius:1rem;\n  background: #fff ;\n  padding: 2rem;\n`;\nexport const TabsStyled = styled(Tabs)`\n    & .ant-tabs-nav{\n        background-color:white;\n        border-radius:1rem;\n        box-shadow: rgb(0 0 0 / 10%) 0px 4px 12px;\n        padding:0 1rem;\n    }\n`;\n","import { useEffect, useState } from 'react';\nimport { message } from 'antd';\nimport { getService } from '../services';\n\nexport const useCities = () => {\n    const citiesService = getService(\"cities\");\n\n    const [cities, setCities] = useState([]);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    useEffect(() => {\n        setLoadingCities(true);\n        citiesService\n            .find({\n                query: {\n                    $limit: 100000,\n                    $sort: {\n                        name: 1,\n                    },\n                }\n            })\n            .then(({ data }) => {\n                setCities(data);\n                setLoadingCities(false);\n            })\n            .catch((err) => {\n                message.error(err.message);\n                setCities([]);\n                setLoadingCities(false);\n            });\n    }, []);\n\n\n    return [\n        cities,\n        loadingCities\n    ];\n}"],"sourceRoot":""}