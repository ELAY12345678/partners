{"version":3,"sources":["views/OnBoarding/index.jsx"],"names":["STATUS","id","name","SHOW_SCREEN","columns","_ref","onEdit","onRemove","navigate","dataIndex","key","title","sorter","render","value","_jsx","_Tag","color","children","record","_jsxs","_Fragment","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","state","onboarding_process_id","onboarding_name","concat","AiOutlineEye","OnBoarding","useNavigate","onBoardingService","getService","drawerVisible","setDrawerVisible","useState","updateSource","setUpdateSource","selectedOnBoarding","setSelectedOnBoarding","_Layout","Content","style","height","overflow","padding","Grid","source","filterDefaultValues","$sort","async","_ref2","remove","then","_message","success","catch","error","message","actions","extra","RoundedButton","AiOutlinePlus","_Drawer","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","_Input","flex","size","label","validations","required","_Select","_","map","_ref3","index","Option","_ref4","ColorField","placeholder","initial","background_color_image","presetColors","background_color_button","text_color_button"],"mappings":"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","file":"static/js/58.3bdce4f0.chunk.js","sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { Button, Drawer, Input, Layout, message, Select, Tag } from 'antd';\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlineEye, AiOutlinePlus } from 'react-icons/ai';\nimport AsyncButton from '../../components/asyncButton';\nimport { Grid } from '../../components/com';\nimport { ColorField } from '../../components/com/fields';\nimport { SimpleForm } from '../../components/com/form/';\nimport { RoundedButton } from '../../components/com/grid/Styles';\nimport { getService } from '../../services';\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst SHOW_SCREEN = [\n    {\n        id: \"home\",\n        name: \"Home\",\n    },\n    {\n        id: \"home_apparta_pay\",\n        name: \"Home apparta pay\",\n    },\n]\n\nconst columns = ({ onEdit, onRemove, navigate }) => [\n    {\n        dataIndex: \"id\",\n        key: \"id\",\n        title: \"Id\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"name\",\n        key: \"name\",\n        title: \"Nombre\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"show_screen\",\n        key: \"show_screen\",\n        title: \"Show screen\",\n        sorter: true,\n    },\n    {\n        dataIndex: \"status\",\n        key: \"status\",\n        title: \"Estado\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions',\n        render: (id, record) =>\n            <>\n                <Button\n                    type=\"text\"\n                    onClick={() => onEdit(record)}\n                    icon={<AiOutlineEdit />}\n                />\n                <AsyncButton\n                    type=\"link\"\n                    onClick={() => onRemove({ id })}\n                    icon={<AiOutlineDelete />}\n                    confirmText=\"Desea eliminar?\"\n                >\n                </AsyncButton>\n                <Button\n                    type=\"text\"\n                    onClick={() => navigate(\n                        '/dashboard/management/on-boarding/screens',\n                        {\n                            state: {\n                                onboarding_process_id: id,\n                                onboarding_name: `${record?.name}`,\n                            }\n                        })}\n                    icon={<AiOutlineEye />}\n                />\n            </>\n    }\n];\n\nconst OnBoarding = () => {\n    const navigate = useNavigate();\n\n    const onBoardingService = getService('onboarding-processes');\n\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n    const [selectedOnBoarding, setSelectedOnBoarding] = useState();\n\n    const onEdit = (record) => {\n        setSelectedOnBoarding(record);\n        setDrawerVisible(true);\n    };\n\n    const onRemove = async ({ id }) => {\n        await onBoardingService.remove(id)\n            .then(() => {\n                message.success(\"On boarding eliminada!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar! ' + error?.message)\n            )\n    };\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Grid\n                source='onboarding-processes'\n                filterDefaultValues={{\n                    $sort: {\n                        id: 1\n                    }\n                }}\n                updateSource={updateSource}\n                columns={columns({ onEdit, onRemove, navigate })}\n                actions={{}}\n                extra={\n                    <div>\n                        <RoundedButton\n                            type=\"primary\"\n                            icon={<AiOutlinePlus />}\n                            onClick={() => setDrawerVisible(true)}\n                        >\n                            Agregar\n                        </RoundedButton>\n                    </div>\n                }\n            />\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedOnBoarding ? 'Editar' : 'Crear'} On boarding`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedOnBoarding();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={`${selectedOnBoarding ? 'Actualizar' : 'Crear'}`}\n                        initialValues={selectedOnBoarding}\n                        onSubmit={() => {\n                            setUpdateSource(!updateSource);\n                            setDrawerVisible(false);\n                            setSelectedOnBoarding();\n                        }}\n                        source=\"onboarding-processes\"\n                        id={selectedOnBoarding?.id}\n                    >\n\n                        <Input\n                            flex={1}\n                            size='large'\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            size='large'\n                            name='show_screen'\n                            label=\"Show Screen\"\n                            validations={[{ required: true, message: 'Show Screen es requerida' }]}\n                        >\n                            {\n                                _.map(SHOW_SCREEN, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[{ required: true, message: 'Estado es requerido' }]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Input\n                            flex={1}\n                            size='large'\n                            name='description_last_button'\n                            label='Texto ultimo botón'\n                        />\n                        <ColorField\n                            flex={0.5}\n                            name=\"background_color_image\"\n                            label=\"Color de fondo\"\n                            placeholder=\"background_color_image\"\n                            initial={selectedOnBoarding?.background_color_image || '#f7f7f7'}\n                            presetColors={['#f7f7f7']}\n                        />\n                        <ColorField\n                            flex={0.5}\n                            name=\"background_color_button\"\n                            label=\"Color de botón\"\n                            placeholder=\"background_color_button\"\n                            initial={selectedOnBoarding?.background_color_button || '#35D172'}\n                            presetColors={['#35D172']}\n                        />\n                        <ColorField\n                            flex={0.5}\n                            name=\"text_color_button\"\n                            label=\"Color de texto\"\n                            placeholder=\"text_color_button\"\n                            initial={selectedOnBoarding?.text_color_button || '#fff'}\n                            presetColors={['#fff']}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default OnBoarding"],"sourceRoot":""}