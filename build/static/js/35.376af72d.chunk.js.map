{"version":3,"sources":["views/discounts/deals/index.jsx","components/Styles.js","components/resizablePanel/ResizablePanels.js","components/users/UserForm.js","components/modal/Styles.js","components/modal/Modal.js","components/HeadLine.js","sources/icons/discount.svg"],"names":["USERS_ROLES","STATUS","id","name","columns","_ref","onRemove","onEdit","userRole","title","dataIndex","key","sorter","render","value","_jsx","_Image","width","height","alt","src","concat","S3_PATH_IMAGE_HANDLER","window","imageShark","url","preview","URL_S3","moment","format","_Tag","color","children","record","_jsxs","_Fragment","_Button","type","onClick","icon","AiOutlineEdit","AsyncButton","AiOutlineDelete","confirmText","Deals","useSelector","_ref2","_appReducer$user","appReducer","user","role","establishmentFilters","_ref3","dashboardReducer","dealsService","getService","drawerVisible","setDrawerVisible","useState","updateSource","setUpdateSource","selectedDeal","setSelectedDeal","_Layout","Content","style","overflow","padding","_Row","align","gutter","_Col","iconDiscount","_Typography","Title","level","margin","_Divider","background","borderTop","marginTop","establishment_id","Grid","custom","source","filterDefaultValues","$sort","searchField","searchText","search","permitFetch","actions","_","filter","async","_ref4","remove","then","_message","success","catch","error","message","_objectSpread","start_date_time","end_date_time","extra","RoundedButton","AiOutlinePlus","Box","_Drawer","placement","visible","onClose","SimpleForm","textAcceptButton","initialValues","onSubmit","err","data","form","startOf","utc","undefined","endOf","path_cover","patch","create","_Input","initial","GalleryUploader","refresh","e","response","size","defaultImage","withCropper","setterVisibleCropper","reference","_id","path","FileUploader","flex","borderRadius","onFinish","file","handleUploadFinish","field","String","label","validations","required","_DatePicker","locale","_Select","map","_ref5","index","Option","_ref6","TextArea","autoSize","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","TabsStyled","_Tabs","_templateObject5","ControlledElement","React","Component","constructor","super","this","onMinimizeClicked","bind","onMaximizeClicked","state","currentSize","getSize","animate","done","from","to","Promise","resolve","setState","domElement","ReactDOM","findDOMNode","props","orientation","offsetHeight","offsetWidth","start","end","step","fn","stepFn","requestAnimationFrame","ReflexElement","position","zIndex","xs","sm","md","lg","xl","justify","fontSize","borderBottom","borderRight","counter","shape","paddingTop","roles","status","genders","codepush_environment_options","true_false","UserForm","useParams","navigate","useNavigate","service","galleryService","payloads","meta_file_name","meta_size","meta_media_type","description","placeholder","Password","d","xtype","input","_Modal","transparent","ModalView","WrapperHeadLine"],"mappings":"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","file":"static/js/35.376af72d.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport { message, Button, Image, Tag, Drawer, Select, Input, DatePicker, Layout, Row, Col, Typography, Divider } from 'antd';\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlinePlus } from \"react-icons/ai\";\nimport { Grid } from \"../../../components/com\";\nimport { RoundedButton } from \"../../../components/com/grid/Styles\";\nimport { getService } from \"../../../services\";\nimport AsyncButton from \"../../../components/asyncButton\";\nimport { S3_PATH_IMAGE_HANDLER, URL_S3 } from \"../../../constants\";\nimport { FileUploader, SimpleForm } from \"../../../components/com/form/\";\nimport GalleryUploader from \"../../../components/com/gallery/GalleryUploader\";\nimport { useSelector } from \"react-redux\";\nimport { Box } from \"../../../components\";\nimport iconDiscount from '../../../sources/icons/discount.svg';\n\nconst USERS_ROLES = {\n    admin: 'admin',\n    user: 'user',\n};\n\nconst STATUS = [\n    {\n        id: \"active\",\n        name: \"Active\",\n    },\n    {\n        id: \"inactive\",\n        name: \"Inactive\",\n    },\n];\n\nconst columns = ({ onRemove, onEdit, userRole }) => [\n    {\n        title: \"Id\",\n        dataIndex: \"id\",\n        key: \"id\",\n        sorter: true,\n    },\n    {\n        title: \"Foto\",\n        dataIndex: \"path_cover\",\n        render: (value) =>\n            value && <Image\n                width={100}\n                height={50}\n                alt=\"Campaign-Image\"\n                src={`${S3_PATH_IMAGE_HANDLER}/${window.imageShark({\n                    url: value,\n                    width: 100,\n                    height: 50,\n                })}`\n                }\n                preview={{\n                    src: `${URL_S3}${value}`\n                }}\n            />\n    },\n    {\n        title: \"Nombre\",\n        dataIndex: \"name\",\n        key: \"name\",\n        sorter: true,\n    },\n    {\n        title: \"Fecha Inicio\",\n        dataIndex: \"start_date_time\",\n        key: \"start_date_time\",\n        sorter: true,\n        render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n        title: \"Fecha Fin\",\n        dataIndex: \"end_date_time\",\n        key: \"end_date_time\",\n        sorter: true,\n        render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n        title: \"Descripción\",\n        dataIndex: \"description\",\n        key: \"description\",\n    },\n    {\n        title: \"Estado\",\n        dataIndex: \"status\",\n        key: \"status\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    {\n        title: \"Visibilidad\",\n        dataIndex: \"visibility\",\n        key: \"visibility\",\n        sorter: true,\n        render: (value) => value === 'active' ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n    },\n    userRole === USERS_ROLES.admin && {\n        title: \"Acciones\",\n        dataIndex: 'id',\n        key: 'actions_id',\n        render: (id, record) => {\n            return (\n                <>\n                    <Button\n                        type=\"text\"\n                        onClick={() => onEdit(record)}\n                        icon={<AiOutlineEdit />}\n                    />\n                    <AsyncButton\n                        type=\"link\"\n                        onClick={() => onRemove({ id })}\n                        icon={<AiOutlineDelete />}\n                        confirmText=\"Desea eliminar?\"\n                    >\n                    </AsyncButton>\n                </>\n            );\n        },\n    }\n]\n\nconst Deals = () => {\n\n    const userRole = useSelector(({ appReducer }) => appReducer?.user?.role);\n    const establishmentFilters = useSelector(({ dashboardReducer }) => dashboardReducer.establishmentFilters);\n\n\n    const dealsService = getService('deals');\n    const [drawerVisible, setDrawerVisible] = useState(false);\n    const [updateSource, setUpdateSource] = useState(false);\n    const [selectedDeal, setSelectedDeal] = useState();\n\n    const onRemove = async ({ id }) => {\n        await dealsService.remove(id)\n            .then(() => {\n                message.success(\"Promoción eliminada!\");\n                setUpdateSource(!updateSource);\n            })\n            .catch((error) =>\n                message.error('No se pudo eliminar la promoción! ' + error?.message)\n            )\n    };\n\n    const onEdit = (record) => {\n        setSelectedDeal({\n            ...record,\n            start_date_time: moment(record.start_date_time),\n            end_date_time: moment(record.end_date_time),\n        })\n        setDrawerVisible(true);\n    };\n\n    const handleUploadFinish = (field, url, file, _id) => {\n        dealsService.patch(_id, {\n            [field]: String(url),\n        })\n            .then((response) => {\n                setSelectedDeal({\n                    ...response\n                });\n                setUpdateSource(!updateSource);\n            })\n            .catch((err) => message.error(err.message));\n    };\n\n    const handleSubmit = async (err, data, form) => {\n        if (err) return message.error(err);\n\n        data.start_date_time = data.start_date_time ? moment(data.start_date_time).startOf('day').utc().format() : undefined;\n        data.end_date_time = data.end_date_time ? moment(data.end_date_time).endOf('day').utc().format() : undefined;\n\n        delete data.path_cover;\n\n        if (selectedDeal && selectedDeal.id) {\n            await dealsService.patch(selectedDeal.id, data)\n                .then(() => {\n                    message.success(\"Promoción actualizada!\");\n                    setDrawerVisible(false);\n                    setSelectedDeal();\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        } else {\n            await dealsService.create(data)\n                .then(() => {\n                    message.success(\"Promoción creada!\");\n                    setDrawerVisible(false);\n                    setUpdateSource(!updateSource);\n                })\n                .catch(err => message.error(err.message));\n        }\n    };\n\n\n    return (\n        <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n            <Row>\n                <Row\n                    align='middle'\n                    style={{\n                        color: \"var(--purple)\",\n                    }}\n                    gutter={[16, 16]}\n                >\n                    <Col>\n                        <img src={iconDiscount} alt='icon' />\n                    </Col>\n                    <Col>\n                        <Typography.Title level={3} style={{ margin: 0 }}>\n                            Ofertas\n                        </Typography.Title>\n                    </Col>\n                </Row>\n                <Divider style={{ background: 'transparent', borderTop: 0, marginTop: 0 }} />\n            </Row>\n            {\n                establishmentFilters.establishment_id ? (\n                    <Grid\n                        custom={true}\n                        source=\"deals\"\n                        filterDefaultValues={{\n                            establishment_id: establishmentFilters?.establishment_id,\n                            $sort: {\n                                id: 1\n                            }\n                        }}\n                        searchField=\"name\"\n                        searchText=\"Nombre...\"\n                        search={true}\n                        permitFetch={!!establishmentFilters?.establishment_id}\n                        actions={{}}\n                        updateSource={updateSource}\n                        columns={_.filter(columns({ onRemove, onEdit, userRole }), (record) => typeof record === 'object')}\n                        extra={\n                            userRole === USERS_ROLES.admin &&\n                            <>\n                                <RoundedButton\n                                    type=\"primary\"\n                                    icon={<AiOutlinePlus />}\n                                    onClick={() => setDrawerVisible(true)}\n                                >\n                                    Agregar\n                                </RoundedButton>\n                            </>\n                        }\n                    />\n                ) : (\n                    <Box>\n                        *Selecciona una dirección para ver los registros*\n                    </Box>\n                )\n            }\n            {\n                drawerVisible\n                &&\n                <Drawer\n                    title={`${selectedDeal ? 'Editar' : 'Crear'} Banner`}\n                    placement=\"right\"\n                    visible={drawerVisible}\n                    onClose={() => {\n                        setDrawerVisible(false);\n                        setSelectedDeal();\n                    }}\n                >\n                    <SimpleForm\n                        textAcceptButton={'Guardar'}\n                        initialValues={selectedDeal}\n                        onSubmit={handleSubmit}\n                    >\n                        {\n                            !selectedDeal?.id &&\n                            <Input\n                                type=\"hidden\"\n                                name='establishment_id'\n                                initial={establishmentFilters?.establishment_id}\n                            />\n                        }\n                        {\n                            selectedDeal?.id && selectedDeal?.path_cover &&\n                            <GalleryUploader\n                                refresh={(e, response) => {\n                                    setSelectedDeal({ ...response });\n                                    setUpdateSource(!updateSource);\n                                }}\n                                size=\"large\"\n                                record={selectedDeal}\n                                defaultImage={selectedDeal?.path_cover}\n                                source=\"path_cover\"\n                                withCropper={true}\n                                setterVisibleCropper={() => { }}\n                                reference=\"deals\"\n                                _id={selectedDeal.id}\n                                path={`deals_path_cover/${+selectedDeal?.id}`}\n                            />\n                        }\n                        {\n                            selectedDeal?.id &&\n                            <FileUploader\n                                flex={1}\n                                preview={false}\n                                path={`deals_path_cover/${selectedDeal.id}/`}\n                                name='path_cover'\n                                source='path_cover'\n                                style={{ borderRadius: '0.5rem' }}\n                                onFinish={(url, file) =>\n                                    handleUploadFinish(\"path_cover\", url, file, selectedDeal.id)\n                                }\n                            />\n                        }\n                        <Input\n                            flex={1}\n                            size=\"large\"\n                            name='name'\n                            label='Nombre'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: `Nombre es requerido`\n                                }\n                            ]}\n                        />\n                        <DatePicker\n                            flex={0.5}\n                            name='start_date_time'\n                            label=\"Fecha inicio\"\n                            size='large'\n                            locale={locale}\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Fecha es requerido',\n                                },\n                            ]}\n                        />\n                        <DatePicker\n                            flex={0.5}\n                            name='end_date_time'\n                            label=\"Fecha fin\"\n                            size='large'\n                            locale={locale}\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Fecha es requerido',\n                                },\n                            ]}\n                        />\n                        <Select\n                            flex={1}\n                            name='visibility'\n                            label=\"Visibilidad\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Visibilidad es requerida',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Select\n                            flex={1}\n                            name='status'\n                            label=\"Estado\"\n                            size='large'\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Estado es requerido',\n                                },\n                            ]}\n                        >\n                            {\n                                _.map(STATUS, ({ id, name }, index) =>\n                                    <Select.Option\n                                        key={index}\n                                        value={id}\n                                    >\n                                        {name}\n                                    </Select.Option>\n                                )\n                            }\n                        </Select>\n                        <Input.TextArea\n                            flex={1}\n                            name='description'\n                            label='Descripción'\n                            autoSize\n                            validations={[\n                                {\n                                    required: true,\n                                    message: 'Descripción es requerida',\n                                },\n                            ]}\n                        />\n                    </SimpleForm>\n                </Drawer>\n            }\n        </Layout.Content>\n    );\n}\n\nexport default Deals;","import { Row, Tabs } from 'antd';\nimport styled from 'styled-components';\n\nexport const HeadLine = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: baseline;\n  flex-wrap: wrap;\n\n  width:100%!important;\n\n  background-color:var(--gray-dark-1)!important;\n  color:#fff!important;\n\n  & .ant-checkbox-wrapper{\n    margin:0px 10px;\n  }\n  & h2{\n    color: #fff!important;\n    text-transform: uppercase!important;\n    padding: 4px 10px!important;\n    font-size: 16px!important;\n    vertical-align: middle!important;\n    margin-bottom: 0px!important;\n  }\n`;\nexport const AvatarWrapper = styled.div`\n\n    position:relative;\n   \n    display: flex;\n    justify-content: start;\n    align-items: center;\n\n    & .container{\n      width: 34px;\n      position:relative;\n    }\n    & .container:hover .ant-btn{\n      display:inline-block;\n    }\n    & .ant-btn,.ant-btn:hover{\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 999;\n      height: 34px!important;\n      display: none;\n      width: 34px!important;\n      background: #0010214f!important;\n      color: #FFF!important;\n      font-weight: bold;\n      display:none;\n    }\n`;\n\nexport const Tools = styled.div`\n    display:flex;\n    justify-content: space-between;\n`;\nexport const Box = styled(Row)`\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n  border-radius:1rem;\n  background: #fff ;\n  padding: 2rem;\n`;\nexport const TabsStyled = styled(Tabs)`\n    & .ant-tabs-nav{\n        background-color:white;\n        border-radius:1rem;\n        box-shadow: rgb(0 0 0 / 10%) 0px 4px 12px;\n        padding:0 1rem;\n    }\n`;\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Row, Col, Button, Typography } from 'antd';\nimport {\n    ReflexElement\n} from 'react-reflex'\nimport 'react-reflex/styles.css'\n\nclass ControlledElement extends React.Component {\n\n    constructor() {\n\n        super()\n\n        this.onMinimizeClicked =\n            this.onMinimizeClicked.bind(this)\n\n        this.onMaximizeClicked =\n            this.onMaximizeClicked.bind(this)\n\n        this.state = {\n            size: -1,\n        }\n    }\n\n    onMinimizeClicked() {\n\n        const currentSize = this.getSize()\n\n        const update = (size) => {\n\n            return new Promise((resolve) => {\n\n                this.setState({\n                    size: size < 50 ? 50 : size\n                }, () => resolve())\n            })\n        }\n\n        const done = (from, to) => {\n\n            return from < to\n        }\n\n        this.animate(\n            currentSize, 50, -50,\n            done, update)\n\n        this.setState({\n            ...this.state,\n        })\n    }\n\n    onMaximizeClicked() {\n\n        const currentSize = this.getSize()\n\n        const update = (size) => {\n\n            return new Promise((resolve) => {\n\n                this.setState({\n                    size\n                }, () => resolve())\n            })\n        }\n\n        const done = (from, to) => {\n\n            return from > to\n        }\n\n        this.animate(\n            currentSize, 300, 50,\n            done, update)\n\n\n    }\n\n    getSize() {\n\n        const domElement = ReactDOM.findDOMNode(this)\n\n        switch (this.props.orientation) {\n\n            case 'horizontal':\n                return domElement.offsetHeight\n\n            case 'vertical':\n                return domElement.offsetWidth\n\n            default:\n                return 0\n        }\n    }\n\n    animate(start, end, step, done, fn) {\n\n        const stepFn = () => {\n\n            if (!done(start, end)) {\n\n                fn(start += step).then(() => {\n                    requestAnimationFrame(stepFn)\n                })\n            }\n        }\n\n        stepFn()\n    }\n\n\n\n    render() {\n\n        return (\n            <ReflexElement size={this.state.size} {...this.props}>\n                <Row\n                    style={{\n                        position: 'fixed',\n                        zIndex: 1,\n                        width: '100%'\n                    }}>\n                    <Col xs={24} sm={24} md={12} lg={9} xl={7}>\n                        <Row\n                            type='flex'\n                            align='middle'\n                            justify=\"space-between\"\n                            style={{\n                                height: 50,\n                                width: '100%',\n                                fontSize: '1.2em',\n                                background: \" #fafafa\",\n                                borderBottom: \"1px solid #d9d9d9\",\n                                borderRight: \"1px solid #d9d9d9\",\n                                borderTop: \"1px solid #d9d9d9\",\n                                padding: \"0px 10px\",\n                            }}\n                        >\n                            <Col flex='auto' style={{ overflow: 'hidden' }} >\n                                <Row\n                                    align=\"middle\"\n                                >\n                                    <Typography.Title\n                                        level={5}\n                                        style={{ margin: 0 }}\n                                    >\n                                        {this.props.title}\n                                    </Typography.Title>\n                                </Row>\n                            </Col>\n                            <Col flex='none'>\n                                < Row\n                                    type='flex'\n                                    align='middle'\n                                    gutter={16}\n                                >\n                                    <Col>\n                                        {this.props.counter}\n                                    </Col>\n                                    <Col>\n                                        <Button\n                                            type=\"text\"\n                                            shape=\"circle\"\n                                            onClick={this.onMinimizeClicked}\n                                        >\n                                            <Typography.Title level={5}>\n                                                -\n                                            </Typography.Title>\n                                        </Button>\n                                        <Button\n                                            type=\"text\"\n                                            shape=\"circle\"\n                                            onClick={this.onMaximizeClicked}\n                                        >\n                                            <Typography.Title level={5}>\n                                                +\n                                            </Typography.Title>\n                                        </Button>\n                                    </Col>\n                                </Row >\n                            </Col>\n                        </Row >\n                    </Col>\n                </Row>\n                <div\n                    style={{\n                        paddingTop: 50,\n                    }}>\n                    {this.props.children}\n                </div>\n            </ReflexElement>\n        )\n    }\n}\n\n\nexport default ControlledElement;","import React, { useState, useEffect } from \"react\";\nimport { SelectField, SimpleForm, DateField, FileUploader } from \"../com/form/\";\nimport locale from \"antd/es/date-picker/locale/es_ES\";\nimport {\n  Icon,\n  Input,\n  Select,\n  message,\n  DatePicker,\n  Layout,\n  Row\n} from \"antd\";\nimport { ImageField } from \"../com\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport qs from \"qs\";\n\nimport { getService } from '../../services';\n\nconst { Option } = Select;\n\nconst roles = [\n  {\n    id: \"user\",\n    name: \"Usuario\",\n  },\n  {\n    id: \"admin\",\n    name: \"Administrador\",\n  },\n];\n\nconst status = [\n  {\n    id: \"active\",\n    name: \"Activo\",\n  },\n  {\n    id: \"disabled\",\n    name: \"Desactivado\",\n  },\n  {\n    id: \"pending validation\",\n    name: \"Pendiente de validación\",\n  },\n  {\n    id: \"pending_information\",\n    name: \"Pendiente por información\",\n  },\n];\nconst genders = [\n  {\n    id: \"male\",\n    name: \"Masculino\",\n  },\n  {\n    id: \"female\",\n    name: \"Femenino\",\n  },\n];\n\nexport const codepush_environment_options = [\n  { id: \"production\", name: \"production\" },\n  { id: \"staging\", name: \"staging\" },\n];\n\nexport const true_false = [\n  { id: \"false\", name: \"False\" },\n  { id: \"true\", name: \"True\" },\n];\n\nconst exclude_admin_roles = [\"admin\"];\n\nconst UserForm = ({ source }) => {\n\n  const { id } = useParams(); \n  const navigate = useNavigate();\n   \n\n  const handleUploadFinish = (field, url, file, _id) => {\n    const service = getService(\"users\");\n    const galleryService = getService(\"gallery\");\n    let payloads = {\n      meta_file_name: file.name,\n      meta_size: String(file.size),\n      name: file.name,\n      meta_media_type: file.type,\n      path: url,\n      description: \"\",\n    };\n    galleryService\n      .create(payloads)\n      .then(({ id }) => {\n        if (_id !== \"create\")\n          service\n            .patch(_id, {\n              [field]: id,\n            })\n            .then((response) => { })\n            .catch((err) => message.error(err.message));\n      })\n      .catch((err) => message.error(err.message));\n  };\n\n \n\n  return (\n    <Layout.Content style={{ height: '100%', overflow: 'auto', padding: '2rem' }}>\n      <Row style={{ padding: '2rem', background: 'white', borderRadius: '0.5rem' }}>\n        <SimpleForm\n          id={id}\n          source={source || \"users\"}\n          onSubmit={() => {\n            navigate(`/dashboard/management/users`);\n          }}\n          textAcceptButton={id ? \"ACTUALIZAR\" : \"CREAR\"}\n        >\n          {id && (\n            <FileUploader\n              flex={1}\n              path={`users/${id}/avatar/`}\n              name='avatar_gallery'\n              source='avatar_gallery'\n              onFinish={(url, file) =>\n                handleUploadFinish(\"avatar_gallery_id\", url, file, id)\n              }\n            />\n          )}\n          <Input\n            size=\"large\"\n            flex={0.5}\n            placeholder=\"Nombre\"\n            label=\"Nombre\"\n            name=\"first_name\"\n            validations={[{ required: true, message: \"El nombre es requerido\" }]}\n          />\n          <Input\n            size=\"large\"\n            flex={0.5}\n            placeholder=\"Apellido\"\n            label=\"Apellido\"\n            name=\"last_name\"\n            validations={[{ required: true, message: \"El apellido es requerido\" }]}\n          />\n          <Input\n            size=\"large\"\n            flex={0.5}\n            placeholder=\"Email\"\n            label=\"Correo\"\n            type=\"email\"\n            name=\"email\"\n            validations={[{ required: true, message: \"El email es requerido\" }]}\n          // prefix={<Icon size=\"large\" type=\"mail\" />}\n          />\n          <Input.Password\n            size=\"large\"\n            flex={0.5}\n            type=\"password\"\n            // prefix={<Icon size=\"large\" type=\"lock\" />}\n            placeholder=\"●●●●●●●●\"\n            label=\"Contraseña\"\n            name=\"password\"\n            validations={[\n              !id && { required: true, message: \"La contraseña es requerida\" },\n            ]}\n          />\n          <Select\n            size=\"large\"\n            name=\"gender\"\n            label=\"Genero\"\n            placeholder=\"Seleccionar\"\n          >\n            {genders\n              .map((d) => (\n                <Option key={d.id} >{d.name}</Option>\n              ))}\n          </Select>\n          {!id &&\n            <DatePicker\n              xtype=\"date\"\n              size=\"large\"\n              label=\"Fecha de nacimiento\"\n              name=\"birthday\"\n              format=\"MM/DD/YYYY\"\n              locale={locale}\n            />\n          }\n          <Input\n            xtype=\"phone\"\n            input\n            size=\"large\"\n            flex={0.1}\n            placeholder=\"Ej: 57\"\n            label=\"Código del País\"\n            name=\"phone_country_code\"\n            // prefix={<Icon size=\"large\" type=\"phone\" />}\n            validations={[\n              { required: true, message: \"El código del país es requerido\" },\n            ]}\n          />\n          <Input\n            xtype=\"phone\"\n            input\n            size=\"large\"\n            flex={0.2}\n            placeholder=\"Celular\"\n            label=\"Celular\"\n            type=\"tel\"\n            name=\"phone\"\n            // prefix={<Icon size=\"large\" type=\"phone\" />}\n            validations={[\n              { required: true, message: \"El teléfono celular es requerido\" },\n            ]}\n          />(\n          <Select\n            size=\"large\"\n            label=\"Elige un rol para el usuario\"\n            name=\"role\"\n            placeholder=\"Elige un rol para el usuario\"\n            validations={[{ required: true, message: \"El estado es requerido\" }]}\n          >\n            {\n              roles.map((d) => (\n                <Option key={d.id}>{d.name}</Option>\n              ))\n            }\n          </Select>\n          <Select\n            size=\"large\"\n            name=\"status\"\n            label=\"Estado\"\n            placeholder=\"Seleccionar\"\n            validations={[{ required: true, message: \"El estado es requerido\" }]}\n          >\n            {status\n              .map((d) => (\n                <Option key={d.id}>{d.name}</Option>\n              ))}\n          </Select>\n          <Select\n            size=\"large\"\n            name=\"account_manager\"\n            label=\"Account manager\"\n            placeholder=\"Seleccionar\"\n          >\n            {true_false\n              .map((d) => (\n                <Option key={d.id}>{d.name}</Option>\n              ))}\n          </Select>\n          <Select\n            size=\"large\"\n            name=\"test_user\"\n            label=\"Test User\"\n            placeholder=\"Seleccionar\"\n          >\n            {true_false\n              .map((d) => (\n                <Option key={d.id}>{d.name}</Option>\n              ))}\n          </Select>\n          <Select\n            size=\"large\"\n            name=\"codepush_enviorment\"\n            label=\"Code Push Environment\"\n            placeholder=\"Seleccionar\"\n          >\n            {codepush_environment_options\n              .map((d) => (\n                <Option key={d.id}>{d.name}</Option>\n              ))}\n          </Select>\n          <Input.TextArea\n            flex={1}\n            name='disabled_reason'\n            label=\"Disabled Reason\"\n            size=\"large\"\n            autoSize\n          />\n        </SimpleForm>\n      </Row>\n    </Layout.Content>\n  );\n};\nexport default UserForm;\n","import styled from 'styled-components';\nimport { Modal } from 'antd';\n\nexport const Wrapper = styled(Modal)`\n    ${\n    ({ transparent }) => {\n        if (transparent)\n            return `\n                & .ant-modal-content, .ant-modal-header {\n                    background-color: transparent!important;\n                    box-shadow: none!important;\n                }\n                & .ant-modal-header {\n                    border-bottom: 0px!important;\n                }\n                & .ant-modal-body {\n                    height: 85vh!important;\n                    padding-top: 50px!important;\n                }\n                & .ant-modal-footer {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    color: #FFF!important;\n                    border-top: 0px!important;\n                }\n                & .ant-list-item-meta-title{\n                    color: rgb(255 255 255);\n                    text-align:left;\n                }\n                & .ant-btn-link, .ant-btn-link:hover, .ant-btn-link:focus{\n                    color: rgb(255 255 255)!important;\n                }\n                & .ant-list-item-meta-description {\n                    color: rgb(255 255 255 / 90%);\n                }\n                & .ant-modal-close-x {\n                    font-size: 24px;\n                    color: #bbb;\n                }\n            `;\n    }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Modal } from 'antd';\nimport { Wrapper } from \"./Styles\"\nconst ModalView = ({ children, onCancel, visible, ...props }) => {\n    const [open, setOpen] = useState(visible || false);\n    useEffect(() => {\n        setOpen(visible);\n    }, [visible]);\n    return (<>\n        <Wrapper\n            onCancel={() => {\n                setOpen(false);\n                if (onCancel)\n                    onCancel()\n            }}\n            visible={open}\n            {...props}>\n            {children}\n        </Wrapper>\n    </>)\n}\n\nexport default ModalView;","import React from 'react';\nimport styled from 'styled-components';\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: start;\n    align-items: baseline;\n    flex-wrap: wrap;\n    /* background-color:var(--gray-dark-1)!important; */\n    color: var(--gray-dark-1)!important;\n    & .ant-checkbox-wrapper{\n        margin:0px 10px;\n    }\n    & h2{\n        color: var(--antd-wave-shadow-color);\n        padding: 4px 10px!important;\n        font-size: 18px!important;\n        font-weight: bold;\n        vertical-align: middle!important;\n        margin-bottom: 0px!important;\n    }\n`;\nconst WrapperHeadLine = (props) => (<Wrapper>{props.children}</Wrapper>);\nexport default WrapperHeadLine;","export default __webpack_public_path__ + \"static/media/discount.119bd1e4.svg\";"],"sourceRoot":""}